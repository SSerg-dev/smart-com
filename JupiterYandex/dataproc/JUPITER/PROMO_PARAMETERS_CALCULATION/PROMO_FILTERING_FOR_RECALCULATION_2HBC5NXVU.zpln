{
  "paragraphs": [
    {
      "text": "%md\n####Notebook \"PROMO_FILTERING_FOR_RECALCULATION\". \n####*Get promoes filtering by changes incidents*.\n###### *Developer: [LLC Smart-Com](http://smartcom.software/), andrey.philushkin@effem.com*",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:04:47.034",
      "progress": 0,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e####Notebook \u0026ldquo;PROMO_FILTERING_FOR_RECALCULATION\u0026rdquo;.\u003cbr /\u003e\n####\u003cem\u003eGet promoes filtering by changes incidents\u003c/em\u003e.\u003c/p\u003e\n\u003ch6\u003e\u003cem\u003eDeveloper: \u003ca href\u003d\"http://smartcom.software/\"\u003eLLC Smart-Com\u003c/a\u003e, \u003ca href\u003d\"mailto:andrey.philushkin@effem.com\"\u003eandrey.philushkin@effem.com\u003c/a\u003e\u003c/em\u003e\u003c/h6\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826481_1308068902",
      "id": "20220810-113330_1807397363",
      "dateCreated": "2022-08-10 12:00:26.481",
      "dateStarted": "2022-09-30 06:04:47.045",
      "dateFinished": "2022-09-30 06:04:49.036",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\ndef is_notebook() -\u003e bool:\n    try:\n        shell \u003d get_ipython().__class__.__name__\n        if shell \u003d\u003d \u0027ZMQInteractiveShell\u0027:\n            return True   # Jupyter notebook or qtconsole\n        elif shell \u003d\u003d \u0027TerminalInteractiveShell\u0027:\n            return False  # Terminal running IPython\n        else:\n            return False  # Other type (?)\n    except NameError:\n        return False      # Probably standard Python interpreter",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:04:49.042",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826481_1935949059",
      "id": "paragraph_1660132597099_1824680518",
      "dateCreated": "2022-08-10 12:00:26.481",
      "dateStarted": "2022-09-30 06:04:49.051",
      "dateFinished": "2022-09-30 06:05:27.680",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nfrom pyspark.sql import SQLContext, DataFrame, Row, Window\nfrom pyspark.sql import SparkSession\nfrom pyspark.context import SparkContext\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport pyspark.sql.functions as F\nimport pandas as pd\nimport datetime, time\nimport os\nimport json\nimport subprocess\n",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:27.698",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826481_120826711",
      "id": "20220810-113330_500009667",
      "dateCreated": "2022-08-10 12:00:26.481",
      "dateStarted": "2022-09-30 06:05:27.702",
      "dateFinished": "2022-09-30 06:05:28.133",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\ndatesDimSchema \u003d StructType([\n  StructField(\"OriginalDate\", DateType(), False),\n  StructField(\"MarsYear\", IntegerType(), False),\n  StructField(\"MarsPeriod\", IntegerType(), False),\n  StructField(\"MarsWeek\",  IntegerType(), False),\n  StructField(\"MarsDay\", IntegerType(),  False),\n  StructField(\"MarsPeriodName\", StringType(), False),\n  StructField(\"MarsPeriodFullName\",  StringType(), False),\n  StructField(\"MarsWeekName\", StringType(),  False),\n  StructField(\"MarsWeekFullName\", StringType(), False),\n  StructField(\"MarsDayName\", StringType(), False),\n  StructField(\"MarsDayFullName\",  StringType(), False),\n  StructField(\"CalendarYear\", IntegerType(),  False),\n  StructField(\"CalendarMonth\", IntegerType(), False),\n  StructField(\"CalendarDay\", IntegerType(), False),\n  StructField(\"CalendarDayOfYear\",  IntegerType(), False),\n  StructField(\"CalendarMonthName\", StringType(),  False),\n  StructField(\"CalendarMonthFullName\", StringType(), False),\n  StructField(\"CalendarYearWeek\", IntegerType(), False),\n  StructField(\"CalendarWeek\",  IntegerType(), False)\n])\n\ninputLogMessageSchema \u003d StructType([\n  StructField(\"logMessage\", StringType(), False)\n])",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:28.203",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826481_94612186",
      "id": "20220810-113330_677056882",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:28.207",
      "dateFinished": "2022-09-30 06:05:28.431",
      "status": "FINISHED"
    },
    {
      "title": "Set notebook args(for testing purposes only)",
      "text": "%pyspark\nif is_notebook():\n sys.argv\u003d[\u0027\u0027,\u0027{\"MaintenancePathPrefix\": \u0027\n \u0027\"/JUPITER/RAW/#MAINTENANCE/2022-09-28_manual__2022-09-28T13%3A08%3A03.931229%2B00%3A00_\", \u0027\n \u0027\"ProcessDate\": \"2022-09-28\", \"Schema\": \"Jupiter\", \"HandlerId\": \u0027\n \u0027\"99b5b5ac-ce95-4b9f-ab64-1b4f347b8f8b\"}\u0027]\n \n sc.addPyFile(\"hdfs:///SRC/SHARED/EXTRACT_SETTING.py\")\n sc.addPyFile(\"hdfs:///SRC/SHARED/SUPPORT_FUNCTIONS.py\")",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:28.507",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132953861_1696933688",
      "id": "paragraph_1660132953861_1696933688",
      "dateCreated": "2022-08-10 12:02:33.861",
      "dateStarted": "2022-09-30 06:05:28.511",
      "dateFinished": "2022-09-30 06:05:28.832",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nspark \u003d SparkSession.builder.appName(\u0027Jupiter - PySpark\u0027).getOrCreate()\nsc \u003d SparkContext.getOrCreate();\n\nimport EXTRACT_SETTING as es\n\nSETTING_RAW_DIR \u003d es.SETTING_RAW_DIR\nDATE_DIR\u003des.DATE_DIR\n\nEXTRACT_ENTITIES_AUTO_PATH \u003d f\u0027{es.HDFS_PREFIX}{es.MAINTENANCE_PATH_PREFIX}EXTRACT_ENTITIES_AUTO.csv\u0027\nprocessDate\u003des.processDate\npipelineRunId\u003des.pipelineRunId\nhandlerId\u003des.input_params.get(\"HandlerId\")\n\nprint(f\u0027EXTRACT_ENTITIES_AUTO_PATH\u003d{EXTRACT_ENTITIES_AUTO_PATH}\u0027)\n\nimport SUPPORT_FUNCTIONS as sp",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:28.911",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "INPUT_PARAMS\u003d{\"MaintenancePathPrefix\": \"/JUPITER/RAW/#MAINTENANCE/2022-09-28_manual__2022-09-28T13%3A08%3A03.931229%2B00%3A00_\", \"ProcessDate\": \"2022-09-28\", \"Schema\": \"Jupiter\", \"HandlerId\": \"99b5b5ac-ce95-4b9f-ab64-1b4f347b8f8b\"}\nSETTINGS_PATH\u003dhdfs:///JUPITER/RAW/#MAINTENANCE/2022-09-28_manual__2022-09-28T13%3A08%3A03.931229%2B00%3A00_PARAMETERS.csv\nhdfs:///JUPITER/RAW/#MAINTENANCE/2022-09-28_manual__2022-09-28T13%3A08%3A03.931229%2B00%3A00_PARAMETERS.csv\n\nprocessDate: 2022-09-28\npipelineRunId: manual__2022-09-28T13%3A08%3A03.931229%2B00%3A00\npipelineSubfolderName: None\n\nSETTING_RAW_DIR: hdfs:///JUPITER/RAW\nSETTING_PROCESS_DIR: hdfs:///JUPITER/PROCESS\nSETTING_OUTPUT_DIR: hdfs:///JUPITER/OUTPUT\nMAINTENANCE_PATH_PREFIX: /JUPITER/RAW/#MAINTENANCE/2022-09-28_manual__2022-09-28T13%3A08%3A03.931229%2B00%3A00_\nSYSTEM_NAME: JUPITER\nSETTING_BRANCH_NAME: \nOther settings - list \"systemParametersDF\" data frame\nEXTRACT_ENTITIES_AUTO_PATH\u003dhdfs:///JUPITER/RAW/#MAINTENANCE/2022-09-28_manual__2022-09-28T13%3A08%3A03.931229%2B00%3A00_EXTRACT_ENTITIES_AUTO.csv\nDefined functions:\ngetFilesList(path) - list files recursively\n    path - root path\ngetShowString(df, n\u003d20, truncate\u003dTrue, vertical\u003dFalse) - prints Spark DataFrame\ngetSchemasMap(schemas_dir) - creates dictionanry with Spark Schemas, schemas_dir - directory with json files with schemas\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d0"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d1"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d2"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d3"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d4"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d5"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d6"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_940087423",
      "id": "20220810-113330_824588436",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:28.915",
      "dateFinished": "2022-09-30 06:05:38.994",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nschema \u003d es.input_params.get(\"Schema\")",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:39.029",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_1487031246",
      "id": "20220810-113330_449807321",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:39.032",
      "dateFinished": "2022-09-30 06:05:39.277",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\r\nDIRECTORY \u003d SETTING_RAW_DIR + \u0027/SOURCES/\u0027\r\n\r\nPROMO_PATH \u003d DIRECTORY + \u0027JUPITER/Promo\u0027\r\nPROMOSTATUS_PATH \u003d DIRECTORY + \u0027JUPITER/PromoStatus\u0027\r\nPRODUCT_PATH \u003d DIRECTORY + \u0027JUPITER/Product\u0027\r\nBRANDTECH_PATH \u003d DIRECTORY + \u0027JUPITER/BrandTech\u0027\r\nPROMOPRODUCT_PATH \u003d DIRECTORY + \u0027JUPITER/PromoProduct\u0027\r\nCLIENTHIERARCHY_PATH \u003d DIRECTORY + \u0027JUPITER/ClientTreeHierarchyView\u0027\r\nPROMOPRODUCTTREE_PATH \u003d DIRECTORY + \u0027JUPITER/PromoProductTree\u0027\r\nCHANGESINCIDENTS_PATH \u003d DIRECTORY + \u0027JUPITER/ChangesIncident\u0027\r\nPRODUCTCHANGEINCIDENTS_PATH \u003d DIRECTORY + \u0027JUPITER/ProductChangeIncident\u0027\r\n\r\nDATESDIM_PATH \u003d DIRECTORY + \u0027UNIVERSALCATALOG/MARS_UNIVERSAL_CALENDAR.csv\u0027\r\n\r\nASSORTMENTMATRIX_PATH \u003d DIRECTORY + \u0027JUPITER/AssortmentMatrix\u0027\r\nPRICELIST_PATH \u003d DIRECTORY + \u0027JUPITER/PriceList\u0027\r\nBASELINE_PATH \u003d DIRECTORY + \u0027JUPITER/BaseLine\u0027\r\nSHARES_PATH \u003d DIRECTORY + \u0027JUPITER/ClientTreeBrandTech\u0027\r\nCLIENTTREE_PATH \u003d DIRECTORY + \u0027JUPITER/ClientTree\u0027\r\nPRODUCTTREE_PATH \u003d DIRECTORY + \u0027JUPITER/ProductTree\u0027\r\nINCREMENTAL_PATH \u003d DIRECTORY + \u0027JUPITER/IncrementalPromo\u0027\r\nCOGS_PATH \u003d DIRECTORY + \u0027JUPITER/COGS\u0027\r\nCOGSTN_PATH \u003d DIRECTORY + \u0027JUPITER/PlanCOGSTn\u0027\r\nTI_PATH \u003d DIRECTORY + \u0027JUPITER/TradeInvestment\u0027\r\nCORRECTION_PATH \u003d DIRECTORY + \u0027JUPITER/PromoProductsCorrection\u0027\r\n\r\nBLOCKEDPROMO_OUTPUT_PATH \u003d es.SETTING_PROCESS_DIR + \u0027/BlockedPromo/BlockedPromo.parquet\u0027\r\nBLOCKEDPROMO_OUTPUT_PATH_CSV \u003d es.SETTING_PROCESS_DIR + \u0027/BlockedPromo/BlockedPromo.CSV\u0027\r\n\r\nCHANGESINCIDENTS_OUTPUT_PATH \u003d es.SETTING_OUTPUT_DIR + \u0027/ChangesIncident/ChangesIncident.CSV\u0027\r\nPRODUCTCHANGEINCIDENTS_OUTPUT_PATH \u003d es.SETTING_OUTPUT_DIR + \u0027/ProductChangeIncident/ProductChangeIncident.CSV\u0027\r\n\r\nINPUT_FILE_LOG_PATH \u003d es.SETTING_PROCESS_DIR + \u0027/Logs/\u0027 + handlerId + \u0027.csv\u0027\r\n# OUTPUT_LOG_PATH \u003d  es.SETTING_PROCESS_DIR + \u0027/Logs/\u0027\r\n# OUTPUT_FILE_LOG_PATH \u003d OUTPUT_LOG_PATH + handlerId + \u0027.csv\u0027\r\n# OUTPUT_TEMP_FILE_LOG_PATH \u003d OUTPUT_LOG_PATH + handlerId + \u0027temp.csv\u0027",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:39.332",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_540738262",
      "id": "20220810-113330_1797622225",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:39.336",
      "dateFinished": "2022-09-30 06:05:39.559",
      "status": "FINISHED"
    },
    {
      "title": "Load raw entities schemas from json files to map",
      "text": "%pyspark\nSCHEMAS_DIR\u003dSETTING_RAW_DIR + \u0027/SCHEMAS/\u0027\nschemas_map \u003d sp.getSchemasMap(SCHEMAS_DIR)\n",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:39.636",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660198152320_1236962199",
      "id": "paragraph_1660198152320_1236962199",
      "dateCreated": "2022-08-11 06:09:12.320",
      "dateStarted": "2022-09-30 06:05:39.640",
      "dateFinished": "2022-09-30 06:05:40.621",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\r\npromoDF \u003d spark.read.csv(PROMO_PATH,sep\u003d\"\\u0001\",header\u003dTrue,schema\u003dschemas_map[\"Promo\"])\\\r\n.withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\\\r\n.withColumn(\"InOut\",col(\"InOut\").cast(BooleanType()))\r\npromoStatusDF \u003d spark.read.csv(PROMOSTATUS_PATH,sep\u003d\"\\u0001\",header\u003dTrue,schema\u003dschemas_map[\"PromoStatus\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\nproductDF \u003d spark.read.csv(PRODUCT_PATH,sep\u003d\"\\u0001\",header\u003dTrue,schema\u003dschemas_map[\"Product\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\nbrandTechDF \u003d spark.read.csv(BRANDTECH_PATH,sep\u003d\"\\u0001\",header\u003dTrue,schema\u003dschemas_map[\"BrandTech\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\npromoProductDF \u003d spark.read.csv(PROMOPRODUCT_PATH,sep\u003d\"\\u0001\",header\u003dTrue,schema\u003dschemas_map[\"PromoProduct\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\nclientHierarchyDF \u003d spark.read.csv(CLIENTHIERARCHY_PATH,sep\u003d\"\\u0001\",header\u003dTrue,schema\u003dschemas_map[\"ClientTreeHierarchyView\"])\r\npromoProductTreeDF \u003d spark.read.csv(PROMOPRODUCTTREE_PATH,sep\u003d\"\\u0001\",header\u003dTrue,schema\u003dschemas_map[\"PromoProductTree\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\nchangesIncidentsDF \u003d spark.read.csv(CHANGESINCIDENTS_PATH,sep\u003d\"\\u0001\",header\u003dTrue,schema\u003dschemas_map[\"ChangesIncident\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\nproductChangeIncidentsDF \u003d spark.read.csv(PRODUCTCHANGEINCIDENTS_PATH,sep\u003d\"\\u0001\",header\u003dTrue,schema\u003dschemas_map[\"ProductChangeIncident\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\nassortmentMatrixDF \u003d spark.read.csv(ASSORTMENTMATRIX_PATH,sep\u003d\"\\u0001\",header\u003dTrue,schema\u003dschemas_map[\"AssortmentMatrix\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\npriceListDF \u003d spark.read.csv(PRICELIST_PATH,sep\u003d\"\\u0001\",header\u003dTrue,schema\u003dschemas_map[\"PriceList\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\nbaselineDF \u003d spark.read.csv(BASELINE_PATH,sep\u003d\"\\u0001\",header\u003dTrue,schema\u003dschemas_map[\"BaseLine\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\nsharesDF \u003d spark.read.csv(SHARES_PATH,sep\u003d\"\\u0001\",header\u003dTrue,schema\u003dschemas_map[\"ClientTreeBrandTech\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\nclientTreeDF \u003d spark.read.csv(CLIENTTREE_PATH,sep\u003d\"\\u0001\",header\u003dTrue,schema\u003dschemas_map[\"ClientTree\"])\r\nproductTreeDF \u003d spark.read.csv(PRODUCTTREE_PATH,sep\u003d\"\\u0001\",header\u003dTrue,schema\u003dschemas_map[\"ProductTree\"])\r\ncorrectionDF \u003d spark.read.csv(CORRECTION_PATH,sep\u003d\"\\u0001\",header\u003dTrue,schema\u003dschemas_map[\"PromoProductsCorrection\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\nincrementalDF \u003d spark.read.csv(INCREMENTAL_PATH,sep\u003d\"\\u0001\",header\u003dTrue,schema\u003dschemas_map[\"IncrementalPromo\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\ncogsDF \u003d spark.read.csv(COGS_PATH,sep\u003d\"\\u0001\",header\u003dTrue,schema\u003dschemas_map[\"COGS\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\ncogsTnDF \u003d spark.read.csv(COGSTN_PATH,sep\u003d\"\\u0001\",header\u003dTrue,schema\u003dschemas_map[\"PlanCOGSTn\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\ntiDF \u003d spark.read.csv(TI_PATH,sep\u003d\"\\u0001\",header\u003dTrue,schema\u003dschemas_map[\"TradeInvestment\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\ndatesDF \u003d spark.read.format(\"csv\").option(\"delimiter\",\"|\").option(\"header\",\"true\").schema(datesDimSchema).load(DATESDIM_PATH)\r\n",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:40.640",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_1950981359",
      "id": "20220810-113330_453367110",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:40.644",
      "dateFinished": "2022-09-30 06:05:41.772",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\ntry:\n#   dbutils.fs.ls(INPUT_FILE_LOG_PATH)\n inputLogMessageDF \u003d spark.read.format(\"csv\").option(\"delimiter\",\"\\u0001\").option(\"header\",\"true\").load(INPUT_FILE_LOG_PATH)\n print(\u0027Log has been already made\u0027)\nexcept:\n inputLogMessageDF \u003d spark.createDataFrame(sc.emptyRDD(), inputLogMessageSchema)\n print(\u0027Init log\u0027)\n  \n",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:41.846",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Log has been already made\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d7"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_1143862177",
      "id": "20220810-113330_468171818",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:41.850",
      "dateFinished": "2022-09-30 06:05:42.679",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nnotCheckPromoStatusList \u003d [\u0027Draft\u0027, \u0027Cancelled\u0027, \u0027Deleted\u0027, \u0027Closed\u0027, \u0027Started\u0027, \u0027Finished\u0027]\nactualCogsTiRecalculationPromoStatusList \u003d [\u0027Finished\u0027, \u0027Closed\u0027]",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:42.751",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_357668815",
      "id": "20220810-113330_2102408644",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:42.754",
      "dateFinished": "2022-09-30 06:05:42.974",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\npromoFilterDF \u003d promoDF\\\n  .join(promoStatusDF, promoStatusDF.Id \u003d\u003d promoDF.PromoStatusId, \u0027inner\u0027)\\\n  .select(\\\n           promoDF.Id\n          ,promoDF.Disabled\n          ,promoDF.Number\n          ,promoDF.BrandTechId\n          ,promoDF.ClientTreeKeyId\n          ,promoDF.ClientTreeId\n          ,promoDF.InOut\n          ,date_add(to_date(promoDF.DispatchesStart, \u0027yyyy-MM-dd\u0027), 1).alias(\u0027DispatchesStart\u0027)\n          ,date_add(to_date(promoDF.StartDate, \u0027yyyy-MM-dd\u0027), 1).alias(\u0027StartDate\u0027)\n          ,date_add(to_date(promoDF.EndDate, \u0027yyyy-MM-dd\u0027), 1).alias(\u0027EndDate\u0027)\n          ,promoStatusDF.SystemName.alias(\u0027promoStatusName\u0027)\n         )\\\n  .where((~col(\u0027promoStatusName\u0027).isin(*notCheckPromoStatusList)) \u0026 (col(\u0027Disabled\u0027) \u003d\u003d \u0027False\u0027))\n\nactualCogsTiRecalculationPromoDF \u003d promoDF\\\n  .join(promoStatusDF, promoStatusDF.Id \u003d\u003d promoDF.PromoStatusId, \u0027inner\u0027)\\\n  .select(\\\n           promoDF.Id\n          ,promoDF.Disabled\n          ,promoDF.Number\n          ,promoStatusDF.SystemName.alias(\u0027promoStatusName\u0027)\n         )\\\n  .where((col(\u0027promoStatusName\u0027).isin(*actualCogsTiRecalculationPromoStatusList)) \u0026 (col(\u0027Disabled\u0027) \u003d\u003d \u0027False\u0027))\n\npromoFilterDF \u003d promoFilterDF\\\n  .join(brandTechDF, brandTechDF.Id \u003d\u003d promoFilterDF.BrandTechId, \u0027left\u0027)\\\n  .select(\\\n           promoFilterDF[\u0027*\u0027]\n          ,brandTechDF.BrandsegTechsub.alias(\u0027promoBrandTechName\u0027)\n         )\\\n\nactivePromoProductDF \u003d promoProductDF.where(col(\u0027Disabled\u0027) \u003d\u003d \u0027false\u0027)\nactiveClientTreeDF \u003d clientTreeDF.where(col(\u0027EndDate\u0027).isNull())\n\nactiveClientTreeList \u003d activeClientTreeDF.collect()",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:43.055",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d8"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_1282965938",
      "id": "20220810-113330_981221566",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:43.058",
      "dateFinished": "2022-09-30 06:05:44.235",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nactiveChangesIncidentsDF \u003d changesIncidentsDF\\\n  .withColumn(\u0027ItemId\u0027, upper(col(\u0027ItemId\u0027)))\\\n  .where(col(\u0027ProcessDate\u0027).isNull())\n\nprocessChangesIncidentsDF \u003d changesIncidentsDF\\\n  .where(~col(\u0027ProcessDate\u0027).isNull())\\\n  .drop(\u0027#QCCount\u0027)\n\nassortmentMatrixCiIdsDF \u003d activeChangesIncidentsDF.where(col(\u0027DirectoryName\u0027) \u003d\u003d \u0027AssortmentMatrix\u0027).select(activeChangesIncidentsDF.ItemId.alias(\u0027Id\u0027))\npriceListCiIdsDF \u003d activeChangesIncidentsDF.where(col(\u0027DirectoryName\u0027) \u003d\u003d \u0027PriceList\u0027).select(activeChangesIncidentsDF.ItemId.alias(\u0027Id\u0027))\nbaselineCiIdsDF \u003d activeChangesIncidentsDF.where(col(\u0027DirectoryName\u0027) \u003d\u003d \u0027BaseLine\u0027).select(activeChangesIncidentsDF.ItemId.alias(\u0027Id\u0027))\nsharesCiIdsDF \u003d activeChangesIncidentsDF.where(col(\u0027DirectoryName\u0027) \u003d\u003d \u0027ClientTreeBrandTech\u0027).select(activeChangesIncidentsDF.ItemId.alias(\u0027Id\u0027))\nclientTreeCiIdsDF \u003d activeChangesIncidentsDF.where(col(\u0027DirectoryName\u0027) \u003d\u003d \u0027ClientTree\u0027).select(activeChangesIncidentsDF.ItemId.alias(\u0027Id\u0027))\nproductTreeCiIdsDF \u003d activeChangesIncidentsDF.where(col(\u0027DirectoryName\u0027) \u003d\u003d \u0027ProductTree\u0027).select(activeChangesIncidentsDF.ItemId.alias(\u0027Id\u0027))\ncorrectionCiIdsDF \u003d activeChangesIncidentsDF.where(col(\u0027DirectoryName\u0027) \u003d\u003d \u0027PromoProductsCorrection\u0027).select(activeChangesIncidentsDF.ItemId.alias(\u0027Id\u0027))\nincrementalCiIdsDF \u003d activeChangesIncidentsDF.where(col(\u0027DirectoryName\u0027) \u003d\u003d \u0027IncrementalPromo\u0027).select(activeChangesIncidentsDF.ItemId.alias(\u0027Id\u0027))\ncogsCiIdsDF \u003d activeChangesIncidentsDF.where(col(\u0027DirectoryName\u0027) \u003d\u003d \u0027COGS\u0027).select(activeChangesIncidentsDF.ItemId.alias(\u0027Id\u0027))\ncogsTnCiIdsDF \u003d activeChangesIncidentsDF.where(col(\u0027DirectoryName\u0027) \u003d\u003d \u0027PlanCOGSTn\u0027).select(activeChangesIncidentsDF.ItemId.alias(\u0027Id\u0027))\ntiCiIdsDF \u003d activeChangesIncidentsDF.where(col(\u0027DirectoryName\u0027) \u003d\u003d \u0027TradeInvestment\u0027).select(activeChangesIncidentsDF.ItemId.alias(\u0027Id\u0027))\nactualCogsCiIdsDF \u003d activeChangesIncidentsDF.where(col(\u0027DirectoryName\u0027) \u003d\u003d \u0027PromoActualCOGS\u0027).select(activeChangesIncidentsDF.ItemId.alias(\u0027Id\u0027))\nactualCogsTnCiIdsDF \u003d activeChangesIncidentsDF.where(col(\u0027DirectoryName\u0027) \u003d\u003d \u0027PromoActualCOGSTn\u0027).select(activeChangesIncidentsDF.ItemId.alias(\u0027Id\u0027))\nactualTiCiIdsDF \u003d activeChangesIncidentsDF.where(col(\u0027DirectoryName\u0027) \u003d\u003d \u0027PromoActualTradeInvestment\u0027).select(activeChangesIncidentsDF.ItemId.alias(\u0027Id\u0027))\npromoScenarioIdsDF \u003d activeChangesIncidentsDF.where(col(\u0027DirectoryName\u0027) \u003d\u003d \u0027PromoScenario\u0027).select(activeChangesIncidentsDF.ItemId.alias(\u0027Id\u0027))\n\nprint(\u0027total incidents count:\u0027, activeChangesIncidentsDF.count())\nprint(\u0027assortmentMatrix incidents count:\u0027, assortmentMatrixCiIdsDF.count())\nprint(\u0027priceList incidents count:\u0027, priceListCiIdsDF.count())\nprint(\u0027baseline incidents count:\u0027, baselineCiIdsDF.count())\nprint(\u0027shares incidents count:\u0027, sharesCiIdsDF.count())\nprint(\u0027clientTree incidents count:\u0027, clientTreeCiIdsDF.count())\nprint(\u0027productTree incidents count:\u0027, productTreeCiIdsDF.count())\nprint(\u0027correction incidents count:\u0027, correctionCiIdsDF.count())\nprint(\u0027incremental incidents count:\u0027, incrementalCiIdsDF.count())\nprint(\u0027cogs incidents count:\u0027, cogsCiIdsDF.count())\nprint(\u0027cogstn incidents count:\u0027, cogsTnCiIdsDF.count())\nprint(\u0027ti incidents count:\u0027, tiCiIdsDF.count())\nprint(\u0027actual cogs incidents count:\u0027, actualCogsCiIdsDF.count())\nprint(\u0027actual cogstn incidents count:\u0027, actualCogsTnCiIdsDF.count())\nprint(\u0027actual ti incidents count:\u0027, actualTiCiIdsDF.count())\nprint(\u0027promo scenario incidents count:\u0027, promoScenarioIdsDF.count())",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:44.259",
      "progress": 50,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "total incidents count: 734\nassortmentMatrix incidents count: 0\npriceList incidents count: 6\nbaseline incidents count: 0\nshares incidents count: 0\nclientTree incidents count: 0\nproductTree incidents count: 0\ncorrection incidents count: 5\nincremental incidents count: 203\ncogs incidents count: 0\ncogstn incidents count: 520\nti incidents count: 0\nactual cogs incidents count: 0\nactual cogstn incidents count: 0\nactual ti incidents count: 0\npromo scenario incidents count: 0\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d9"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d10"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d11"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d12"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d13"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d14"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d15"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d16"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d17"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d18"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d19"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d20"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d21"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d22"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d23"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d24"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_1324345275",
      "id": "20220810-113330_258350418",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:44.263",
      "dateFinished": "2022-09-30 06:05:49.174",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nactiveProductChangeIncidentsDF \u003d productChangeIncidentsDF\\\n  .where(col(\u0027RecalculationProcessDate\u0027).isNull())\n\nprocessProductChangeIncidentsDF \u003d productChangeIncidentsDF\\\n  .where(~col(\u0027RecalculationProcessDate\u0027).isNull())\\\n  .drop(\u0027#QCCount\u0027)\n\nprint(\u0027total product incidents count:\u0027, activeProductChangeIncidentsDF.count())",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:49.268",
      "progress": 33,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "total product incidents count: 7\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d25"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_1038631839",
      "id": "20220810-113330_700905080",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:49.272",
      "dateFinished": "2022-09-30 06:05:49.896",
      "status": "FINISHED"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by assortment matrix  changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:49.972",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e#####\u003cem\u003eGet promo numbers filtered by assortment matrix  changes incidents\u003c/em\u003e\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_331523122",
      "id": "20220810-113330_1430522001",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:49.975",
      "dateFinished": "2022-09-30 06:05:49.984",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nassortmentMatrixCiDF \u003d assortmentMatrixCiIdsDF\\\n  .join(assortmentMatrixDF, \u0027Id\u0027, \u0027inner\u0027)\\\n  .select(\\\n           assortmentMatrixDF.ClientTreeId\n          ,date_add(to_date(assortmentMatrixDF.StartDate, \u0027yyyy-MM-dd\u0027), 1).alias(\u0027StartDate\u0027)\n          ,date_add(to_date(assortmentMatrixDF.EndDate, \u0027yyyy-MM-dd\u0027), 1).alias(\u0027EndDate\u0027)\n         )\n\npromoByAssortmentMatrixCiDF \u003d assortmentMatrixCiDF\\\n  .join(promoFilterDF,\n        [\\\n          assortmentMatrixCiDF.ClientTreeId \u003d\u003d promoFilterDF.ClientTreeKeyId\n         ,assortmentMatrixCiDF.StartDate \u003c\u003d promoFilterDF.DispatchesStart\n         ,assortmentMatrixCiDF.EndDate \u003e\u003d promoFilterDF.DispatchesStart\n        ]\\\n        ,\u0027inner\u0027)\\\n  .where(promoFilterDF.InOut \u003d\u003d \u0027false\u0027)\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:50.075",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_1380197794",
      "id": "20220810-113330_224779063",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:50.080",
      "dateFinished": "2022-09-30 06:05:50.354",
      "status": "FINISHED"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by pricelist changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:50.379",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e#####\u003cem\u003eGet promo numbers filtered by pricelist changes incidents\u003c/em\u003e\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_311194336",
      "id": "20220810-113330_852937540",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:50.383",
      "dateFinished": "2022-09-30 06:05:50.389",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\npriceListCiDF \u003d priceListCiIdsDF\\\n  .join(priceListDF, \u0027Id\u0027, \u0027inner\u0027)\\\n  .select(\\\n           priceListDF.ClientTreeId\n          ,date_add(to_date(priceListDF.StartDate, \u0027yyyy-MM-dd\u0027), 1).alias(\u0027StartDate\u0027)\n          ,date_add(to_date(priceListDF.EndDate, \u0027yyyy-MM-dd\u0027), 1).alias(\u0027EndDate\u0027)\n         )\n\npromoByPriceListCiDF \u003d priceListCiDF\\\n  .join(promoFilterDF,\n        [\\\n          priceListCiDF.ClientTreeId \u003d\u003d promoFilterDF.ClientTreeKeyId\n         ,priceListCiDF.StartDate \u003c\u003d promoFilterDF.DispatchesStart\n         ,priceListCiDF.EndDate \u003e\u003d promoFilterDF.DispatchesStart\n        ]\\\n        ,\u0027inner\u0027)\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:50.483",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_644822544",
      "id": "20220810-113330_742235728",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:50.486",
      "dateFinished": "2022-09-30 06:05:50.756",
      "status": "FINISHED"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by baseline changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:50.786",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e#####\u003cem\u003eGet promo numbers filtered by baseline changes incidents\u003c/em\u003e\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_619991319",
      "id": "20220810-113330_1506286534",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:50.790",
      "dateFinished": "2022-09-30 06:05:50.795",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n@udf\ndef getDemandCode(objectId):\n  c \u003d [x for x in activeClientTreeList if x.ObjectId \u003d\u003d objectId]\n  if len(c) \u003d\u003d 0:\n    return \u0027\u0027\n  while (len(c) !\u003d 0) \u0026 (c[0].Type !\u003d \u0027root\u0027) \u0026 ((c[0].DemandCode \u003d\u003d \u0027\u0027) | (c[0].DemandCode is None)):\n    c \u003d [x for x in activeClientTreeList if x.ObjectId \u003d\u003d c[0].parentId]\n    if len(c) \u003d\u003d 0: \n      break\n  if len(c) \u003d\u003d 0:\n    return \u0027\u0027\n  else:\n    return c[0].DemandCode",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:50.889",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_269690433",
      "id": "20220810-113330_2060967851",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:50.893",
      "dateFinished": "2022-09-30 06:05:51.112",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nbaselineCiDF \u003d baselineCiIdsDF\\\n  .join(baselineDF, \u0027Id\u0027, \u0027inner\u0027)\\\n  .select(\\\n           baselineDF.ProductId\n          ,baselineDF.DemandCode\n          ,date_add(to_date(baselineDF.StartDate, \u0027yyyy-MM-dd\u0027), 1).alias(\u0027StartDate\u0027)\n         )\n\nbaselineCiDF \u003d baselineCiDF\\\n  .join(datesDF, datesDF.OriginalDate \u003d\u003d baselineCiDF.StartDate, \u0027inner\u0027)\\\n  .select(\\\n          baselineCiDF[\u0027*\u0027]\n         ,datesDF.MarsWeekFullName\n         )\n\npromoDemandDF \u003d promoFilterDF\\\n  .select(\\\n           col(\u0027Id\u0027).alias(\u0027promoId\u0027)\n          ,col(\u0027Number\u0027).alias(\u0027promoNumber\u0027)\n          ,col(\u0027BrandTechId\u0027).alias(\u0027promoBrandTechId\u0027)\n          ,promoFilterDF.StartDate.alias(\u0027promoStartDate\u0027)\n          ,promoFilterDF.EndDate.alias(\u0027promoEndDate\u0027)\n          ,promoFilterDF.DispatchesStart.alias(\u0027promoDispatchesStart\u0027)\n          ,col(\u0027ClientTreeKeyId\u0027).alias(\u0027promoClientTreeKeyId\u0027)\n          ,col(\u0027ClientTreeId\u0027).alias(\u0027promoClientTreeId\u0027)\n          ,col(\u0027InOut\u0027).alias(\u0027promoInOut\u0027)\n         )\n\npromoDemandDF \u003d promoDemandDF\\\n  .withColumn(\u0027productDemandCode\u0027, lit(getDemandCode(col(\u0027promoClientTreeId\u0027))))\n\ntempList \u003d promoDemandDF.collect()\nnewPromoDemandDF \u003d spark.createDataFrame(tempList, promoDemandDF.schema)\n\n# join with promoProduct to get ZREP\npromoProductDemandDF \u003d newPromoDemandDF\\\n  .join(promoProductDF, promoProductDF.PromoId \u003d\u003d newPromoDemandDF.promoId, \u0027inner\u0027)\\\n  .select(\\\n           newPromoDemandDF[\u0027*\u0027]\n          ,promoProductDF.ProductId\n         )\n\npromoSplittedByWeekDF \u003d promoProductDemandDF\\\n  .join(datesDF, \n        [\\\n          datesDF.OriginalDate \u003e\u003d promoProductDemandDF.promoStartDate\n         ,datesDF.OriginalDate \u003c\u003d promoProductDemandDF.promoEndDate\n        ], \n        \u0027inner\u0027)\\\n  .select(\\\n          promoProductDemandDF.promoId\n         ,promoProductDemandDF.promoNumber\n         ,promoProductDemandDF.promoStartDate\n         ,promoProductDemandDF.promoEndDate\n         ,promoProductDemandDF.productDemandCode\n         ,promoProductDemandDF.ProductId\n         ,promoProductDemandDF.promoInOut\n         ,datesDF.MarsWeekFullName\n         ,datesDF.MarsDay\n         )\n\ncols \u003d promoSplittedByWeekDF.columns\ncols.remove(\u0027MarsDay\u0027)\n\npromoSplittedByWeekDF \u003d promoSplittedByWeekDF\\\n  .groupBy(cols)\\\n  .agg(count(\u0027*\u0027).cast(DecimalType(30,6)).alias(\u0027promoDaysInWeek\u0027))\n\npromoByBaselineCiDF \u003d baselineCiDF\\\n  .join(promoSplittedByWeekDF,\n        [\\\n          promoSplittedByWeekDF.productDemandCode \u003d\u003d baselineCiDF.DemandCode\n         ,promoSplittedByWeekDF.ProductId \u003d\u003d baselineCiDF.ProductId\n         ,promoSplittedByWeekDF.MarsWeekFullName \u003d\u003d baselineCiDF.MarsWeekFullName\n        ])\\\n  .where(promoSplittedByWeekDF.promoInOut \u003d\u003d \u0027false\u0027)\\\n  .select(promoSplittedByWeekDF.promoId.alias(\u0027Id\u0027), promoSplittedByWeekDF.promoNumber.alias(\u0027Number\u0027))\\\n  .dropDuplicates()",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:51.193",
      "progress": 100,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d28"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_1267804993",
      "id": "20220810-113330_2120202078",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:51.196",
      "dateFinished": "2022-09-30 06:05:54.595",
      "status": "FINISHED"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by shares changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:54.600",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e#####\u003cem\u003eGet promo numbers filtered by shares changes incidents\u003c/em\u003e\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_376236753",
      "id": "20220810-113330_1045457371",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:54.603",
      "dateFinished": "2022-09-30 06:05:54.609",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nsharesCiDF \u003d sharesCiIdsDF\\\n  .join(sharesDF, \u0027Id\u0027, \u0027inner\u0027)\\\n  .select(\\\n           sharesDF.ClientTreeId\n          ,sharesDF.BrandTechId\n         )\n\npromoBySharesCiDF \u003d sharesCiDF\\\n  .join(promoFilterDF,\n        [\\\n          promoFilterDF.ClientTreeKeyId \u003d\u003d sharesCiDF.ClientTreeId\n         ,promoFilterDF.BrandTechId \u003d\u003d sharesCiDF.BrandTechId\n        ]\\\n        ,\u0027inner\u0027)\\\n  .where(promoFilterDF.InOut \u003d\u003d \u0027false\u0027)\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:54.703",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_1980278380",
      "id": "20220810-113330_668943356",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:54.707",
      "dateFinished": "2022-09-30 06:05:54.925",
      "status": "FINISHED"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by clienttree changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:55.006",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e#####\u003cem\u003eGet promo numbers filtered by clienttree changes incidents\u003c/em\u003e\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_2010848197",
      "id": "20220810-113330_1664215595",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:55.010",
      "dateFinished": "2022-09-30 06:05:55.015",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nclientTreeCiDF \u003d clientTreeCiIdsDF\\\n  .join(clientTreeDF, \u0027Id\u0027, \u0027inner\u0027)\\\n  .select(\\\n           clientTreeDF.ObjectId\n         )\n\npromoByClientTreeCiDF \u003d clientTreeCiDF\\\n  .join(promoFilterDF,\n        [\\\n          promoFilterDF.ClientTreeId \u003d\u003d clientTreeDF.ObjectId\n        ]\\\n        ,\u0027inner\u0027)\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:55.110",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_1307952274",
      "id": "20220810-113330_1616335956",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:55.113",
      "dateFinished": "2022-09-30 06:05:55.332",
      "status": "FINISHED"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by producttree changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:55.413",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e#####\u003cem\u003eGet promo numbers filtered by producttree changes incidents\u003c/em\u003e\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_120266474",
      "id": "20220810-113330_1567946548",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:55.417",
      "dateFinished": "2022-09-30 06:05:55.422",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nproductTreeCiDF \u003d productTreeCiIdsDF\\\n  .join(productTreeDF, \u0027Id\u0027, \u0027inner\u0027)\\\n  .select(\\\n           productTreeDF.ObjectId\n         )\n\npromoByProductTreeCiDF \u003d productTreeCiDF\\\n  .join(promoProductTreeDF, promoProductTreeDF.ProductTreeObjectId \u003d\u003d productTreeCiDF.ObjectId, \u0027inner\u0027)\\\n  .join(promoFilterDF, promoFilterDF.Id \u003d\u003d promoProductTreeDF.PromoId, \u0027inner\u0027)\\\n  .where(promoFilterDF.InOut \u003d\u003d \u0027false\u0027)\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:55.517",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_1222748820",
      "id": "20220810-113330_6922181",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:55.520",
      "dateFinished": "2022-09-30 06:05:55.790",
      "status": "FINISHED"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by correction changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:55.820",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e#####\u003cem\u003eGet promo numbers filtered by correction changes incidents\u003c/em\u003e\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_315531841",
      "id": "20220810-113330_1818582353",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:55.823",
      "dateFinished": "2022-09-30 06:05:55.829",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\ncorrectionCiDF \u003d correctionCiIdsDF\\\n  .join(correctionDF, \u0027Id\u0027, \u0027inner\u0027)\\\n  .select(\\\n           correctionDF.PromoProductId\n         )\n\npromoByCorrectionCiDF \u003d correctionCiDF\\\n  .join(promoProductDF, promoProductDF.Id \u003d\u003d correctionCiDF.PromoProductId, \u0027inner\u0027)\\\n  .join(promoFilterDF, promoFilterDF.Id \u003d\u003d promoProductDF.PromoId, \u0027inner\u0027)\\\n  .where(promoFilterDF.InOut \u003d\u003d \u0027false\u0027)\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:55.923",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_1656754568",
      "id": "20220810-113330_910836093",
      "dateCreated": "2022-08-10 12:00:26.482",
      "dateStarted": "2022-09-30 06:05:55.926",
      "dateFinished": "2022-09-30 06:05:56.194",
      "status": "FINISHED"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by incremental changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:56.227",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e#####\u003cem\u003eGet promo numbers filtered by incremental changes incidents\u003c/em\u003e\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826482_402452668",
      "id": "20220810-113330_1283317207",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:05:56.230",
      "dateFinished": "2022-09-30 06:05:56.235",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nincrementalCiDF \u003d incrementalCiIdsDF\\\n  .join(incrementalDF, \u0027Id\u0027, \u0027inner\u0027)\\\n  .select(\\\n           incrementalDF.PromoId\n         )\n\npromoByIncrementalCiDF \u003d incrementalCiDF\\\n  .join(promoFilterDF, promoFilterDF.Id \u003d\u003d incrementalCiDF.PromoId, \u0027inner\u0027)\\\n  .where(promoFilterDF.InOut \u003d\u003d \u0027true\u0027)\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:56.330",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826483_288488303",
      "id": "20220810-113330_2548778",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:05:56.333",
      "dateFinished": "2022-09-30 06:05:56.550",
      "status": "FINISHED"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by cogs changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:56.633",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e#####\u003cem\u003eGet promo numbers filtered by cogs changes incidents\u003c/em\u003e\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826483_1437632337",
      "id": "20220810-113330_1181728426",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:05:56.636",
      "dateFinished": "2022-09-30 06:05:56.641",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\ncogsDF \u003d cogsDF\\\n  .withColumn(\u0027StartDate\u0027, date_add(to_date(cogsDF.StartDate, \u0027yyyy-MM-dd\u0027), 1))\\\n  .withColumn(\u0027EndDate\u0027, date_add(to_date(cogsDF.EndDate, \u0027yyyy-MM-dd\u0027), 1))\ncogsTnDF \u003d cogsTnDF\\\n  .withColumn(\u0027StartDate\u0027, date_add(to_date(cogsTnDF.StartDate, \u0027yyyy-MM-dd\u0027), 1))\\\n  .withColumn(\u0027EndDate\u0027, date_add(to_date(cogsTnDF.EndDate, \u0027yyyy-MM-dd\u0027), 1))\n\ncogsClientDF \u003d cogsDF\\\n  .join(clientTreeDF, clientTreeDF.Id \u003d\u003d cogsDF.ClientTreeId, \u0027inner\u0027)\\\n  .join(brandTechDF, brandTechDF.Id \u003d\u003d cogsDF.BrandTechId, \u0027inner\u0027)\\\n  .select(\\\n           cogsDF.Id\n          ,cogsDF.StartDate.alias(\u0027cogsStartDate\u0027)\n          ,cogsDF.EndDate.alias(\u0027cogsEndDate\u0027)\n          ,cogsDF.LSVpercent\n          ,clientTreeDF.ObjectId.alias(\u0027cogsClientTreeObjectId\u0027)\n          ,brandTechDF.BrandsegTechsub.alias(\u0027cbtName\u0027)\n         )\ncogsTnClientDF \u003d cogsTnDF\\\n  .join(clientTreeDF, clientTreeDF.Id \u003d\u003d cogsTnDF.ClientTreeId, \u0027inner\u0027)\\\n  .join(brandTechDF, brandTechDF.Id \u003d\u003d cogsTnDF.BrandTechId, \u0027inner\u0027)\\\n  .select(\\\n           cogsTnDF.Id\n          ,cogsTnDF.StartDate.alias(\u0027cogsStartDate\u0027)\n          ,cogsTnDF.EndDate.alias(\u0027cogsEndDate\u0027)\n          ,cogsTnDF.TonCost\n          ,clientTreeDF.ObjectId.alias(\u0027cogsClientTreeObjectId\u0027)\n          ,brandTechDF.BrandsegTechsub.alias(\u0027cbtName\u0027)\n         )\n\ncogsClientList \u003d cogsClientDF.collect()\ncogsCiIdsList \u003d [row.Id for row in cogsCiIdsDF.collect()]\n\ncogsTnClientList \u003d cogsTnClientDF.collect()\ncogsTnCiIdsList \u003d [row.Id for row in cogsTnCiIdsDF.collect()]",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:56.736",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d31"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d32"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d35"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d36"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826483_285480894",
      "id": "20220810-113330_575295155",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:05:56.739",
      "dateFinished": "2022-09-30 06:05:59.073",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n@udf\ndef isPromoFilteredByGogs(objectId, brandTechName, dispatchesStart):\n  c \u003d [x for x in activeClientTreeList if x.ObjectId \u003d\u003d objectId]\n  cogs \u003d []\n  while (len(cogs) \u003d\u003d 0) \u0026 (len(c) !\u003d 0) \u0026 (c[0].Type !\u003d \u0027root\u0027):\n    cogs \u003d [x for x in cogsClientList if x.cogsClientTreeObjectId \u003d\u003d c[0].ObjectId and x.cbtName \u003d\u003d brandTechName\\\n                                         and x.cogsStartDate \u003c\u003d dispatchesStart and x.cogsEndDate \u003e\u003d dispatchesStart]\n    c \u003d [x for x in activeClientTreeList if x.ObjectId \u003d\u003d c[0].parentId]\n  \n  if len(cogs) \u003d\u003d 0:\n    while (len(cogs) \u003d\u003d 0) \u0026 (len(c) !\u003d 0) \u0026 (c[0].Type !\u003d \u0027root\u0027):\n      cogs \u003d [x for x in cogsClientList if x.cogsClientTreeObjectId \u003d\u003d c[0].ObjectId and x.cbtName is None\\\n                                         and x.cogsStartDate \u003c\u003d dispatchesStart and x.cogsEndDate \u003e\u003d dispatchesStart]\n      c \u003d [x for x in activeClientTreeList if x.ObjectId \u003d\u003d c[0].parentId]\n      \n  isFiltered \u003d False\n  \n  if len(cogs) \u003d\u003d 0:\n    return False\n  else:\n    for item in cogs:\n      if item.Id in cogsCiIdsList:\n        isFiltered \u003d True\n    return isFiltered",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:59.142",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826483_1408017568",
      "id": "20220810-113330_16493640",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:05:59.145",
      "dateFinished": "2022-09-30 06:05:59.363",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n@udf\ndef isPromoFilteredByCogsTn(objectId, brandTechName, dispatchesStart):\n  c \u003d [x for x in activeClientTreeList if x.ObjectId \u003d\u003d int(objectId)]\n  cogs \u003d []\n  while (len(cogs) \u003d\u003d 0) \u0026 (len(c) !\u003d 0) \u0026 (c[0].Type !\u003d \u0027root\u0027):\n    cogs \u003d [x for x in cogsTnClientList if x.cogsClientTreeObjectId \u003d\u003d c[0].ObjectId and x.cbtName \u003d\u003d brandTechName\\\n                                         and x.cogsStartDate \u003c\u003d dispatchesStart and x.cogsEndDate \u003e\u003d dispatchesStart]\n    c \u003d [x for x in activeClientTreeList if x.ObjectId \u003d\u003d c[0].parentId]\n  \n  if len(cogs) \u003d\u003d 0:\n    while (len(cogs) \u003d\u003d 0) \u0026 (len(c) !\u003d 0) \u0026 (c[0].Type !\u003d \u0027root\u0027):\n      cogs \u003d [x for x in cogsTnClientList if x.cogsClientTreeObjectId \u003d\u003d c[0].ObjectId and x.cbtName is None\\\n                                         and x.cogsStartDate \u003c\u003d dispatchesStart and x.cogsEndDate \u003e\u003d dispatchesStart]\n      c \u003d [x for x in activeClientTreeList if x.ObjectId \u003d\u003d c[0].parentId]\n      \n  isFiltered \u003d False\n  \n  if len(cogs) \u003d\u003d 0:\n    return False\n  else:\n    for item in cogs:\n      if item.Id in cogsTnCiIdsList:\n        isFiltered \u003d True\n    return isFiltered",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:59.445",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826483_2053302785",
      "id": "20220810-113330_936054729",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:05:59.448",
      "dateFinished": "2022-09-30 06:05:59.672",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\npromoByCogsCiDF \u003d promoFilterDF\\\n  .withColumn(\u0027isFilteredByGogs\u0027, lit(isPromoFilteredByGogs(col(\u0027ClientTreeId\u0027), col(\u0027promoBrandTechName\u0027), col(\u0027DispatchesStart\u0027))))\\\n  .where(col(\u0027isFilteredByGogs\u0027) \u003d\u003d True)\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()\n\npromoByCogsTnCiDF \u003d promoFilterDF\\\n  .withColumn(\u0027isFilteredByGogs\u0027, lit(isPromoFilteredByCogsTn(col(\u0027ClientTreeId\u0027), col(\u0027promoBrandTechName\u0027), col(\u0027DispatchesStart\u0027))))\\\n  .where(col(\u0027isFilteredByGogs\u0027) \u003d\u003d True)\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:05:59.748",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826483_510203971",
      "id": "20220810-113330_216690036",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:05:59.752",
      "dateFinished": "2022-09-30 06:06:00.878",
      "status": "FINISHED"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by ti changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:06:00.953",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e#####\u003cem\u003eGet promo numbers filtered by ti changes incidents\u003c/em\u003e\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826483_612295038",
      "id": "20220810-113330_2082833804",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:06:00.956",
      "dateFinished": "2022-09-30 06:06:00.961",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\ntiDF \u003d tiDF\\\n  .withColumn(\u0027StartDate\u0027, date_add(to_date(tiDF.StartDate, \u0027yyyy-MM-dd\u0027), 1))\\\n  .withColumn(\u0027EndDate\u0027, date_add(to_date(tiDF.EndDate, \u0027yyyy-MM-dd\u0027), 1))\n\ntiClientNullBtDF \u003d tiDF\\\n  .join(clientTreeDF, clientTreeDF.Id \u003d\u003d tiDF.ClientTreeId, \u0027inner\u0027)\\\n  .select(\\\n           tiDF.Id\n          ,tiDF.StartDate.alias(\u0027tiStartDate\u0027)\n          ,tiDF.EndDate.alias(\u0027tiEndDate\u0027)\n          ,tiDF.SizePercent\n          ,clientTreeDF.ObjectId.alias(\u0027tiClientTreeObjectId\u0027)\n         )\\\n  .withColumn(\u0027tibtName\u0027, lit(None).cast(StringType()))\n\ntiClientNotNullBtDF \u003d tiDF\\\n  .join(clientTreeDF, clientTreeDF.Id \u003d\u003d tiDF.ClientTreeId, \u0027inner\u0027)\\\n  .join(brandTechDF, brandTechDF.Id \u003d\u003d tiDF.BrandTechId, \u0027inner\u0027)\\\n  .select(\\\n           tiDF.Id\n          ,tiDF.StartDate.alias(\u0027tiStartDate\u0027)\n          ,tiDF.EndDate.alias(\u0027tiEndDate\u0027)\n          ,tiDF.SizePercent\n          ,clientTreeDF.ObjectId.alias(\u0027tiClientTreeObjectId\u0027)\n          ,brandTechDF.BrandsegTechsub.alias(\u0027tibtName\u0027)\n         )\n\ntiClientList \u003d tiClientNullBtDF.union(tiClientNotNullBtDF).collect()\ntiCiIdsList \u003d [row.Id for row in tiCiIdsDF.collect()]",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:06:01.056",
      "progress": 100,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d39"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d40"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826483_1288860272",
      "id": "20220810-113330_568455084",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:06:01.059",
      "dateFinished": "2022-09-30 06:06:02.184",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n@udf\ndef isPromoFilteredByTi(objectId, brandTechName, startDate):\n  c \u003d [x for x in activeClientTreeList if x.ObjectId \u003d\u003d objectId]\n  ti \u003d []\n  while (len(ti) \u003d\u003d 0) \u0026 (len(c) !\u003d 0) \u0026 (c[0].Type !\u003d \u0027root\u0027):\n    ti \u003d [x for x in tiClientList if x.tiClientTreeObjectId \u003d\u003d c[0].ObjectId and (x.tibtName \u003d\u003d brandTechName or x.tibtName is None)\\\n                                     and x.tiStartDate \u003c\u003d startDate and x.tiEndDate \u003e\u003d startDate]\n    c \u003d [x for x in activeClientTreeList if x.ObjectId \u003d\u003d c[0].parentId]\n    \n  isFiltered \u003d False  \n    \n  if len(ti) \u003d\u003d 0:\n    return False\n  else:\n    for item in ti:\n      if item.Id in tiCiIdsList:\n        isFiltered \u003d True\n    return isFiltered",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:06:02.260",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826483_2878611",
      "id": "20220810-113330_1320880414",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:06:02.263",
      "dateFinished": "2022-09-30 06:06:02.481",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\npromoByTiCiDF \u003d promoFilterDF\\\n  .withColumn(\u0027isFilteredByTi\u0027, lit(isPromoFilteredByTi(col(\u0027ClientTreeId\u0027), col(\u0027promoBrandTechName\u0027), col(\u0027DispatchesStart\u0027))))\\\n  .where(col(\u0027isFilteredByTi\u0027) \u003d\u003d True)\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:06:02.564",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826483_1649990204",
      "id": "20220810-113330_291851376",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:06:02.567",
      "dateFinished": "2022-09-30 06:06:03.087",
      "status": "FINISHED"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by actual cogs changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:06:03.168",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e#####\u003cem\u003eGet promo numbers filtered by actual cogs changes incidents\u003c/em\u003e\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826483_546899384",
      "id": "20220810-113330_1102881333",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:06:03.171",
      "dateFinished": "2022-09-30 06:06:03.176",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\npromoByActualCogsCiDF \u003d actualCogsTiRecalculationPromoDF\\\n  .join(actualCogsCiIdsDF, actualCogsCiIdsDF.Id \u003d\u003d actualCogsTiRecalculationPromoDF.Id, \u0027inner\u0027)\\\n  .where(~actualCogsCiIdsDF.Id.isNull())\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()\n\npromoByActualCogsTnCiDF \u003d actualCogsTiRecalculationPromoDF\\\n  .join(actualCogsTnCiIdsDF, actualCogsTnCiIdsDF.Id \u003d\u003d actualCogsTiRecalculationPromoDF.Id, \u0027inner\u0027)\\\n  .where(~actualCogsTnCiIdsDF.Id.isNull())\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()\n\npromoByActualCogsCiDF.show()",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:06:03.271",
      "progress": 62,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---+------+\n| Id|Number|\n+---+------+\n+---+------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d43"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d44"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d45"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d46"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d47"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826483_363169347",
      "id": "20220810-113330_1871620385",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:06:03.274",
      "dateFinished": "2022-09-30 06:06:06.167",
      "status": "FINISHED"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by actual ti changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:06:06.178",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e#####\u003cem\u003eGet promo numbers filtered by actual ti changes incidents\u003c/em\u003e\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826483_728169062",
      "id": "20220810-113330_2045488695",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:06:06.180",
      "dateFinished": "2022-09-30 06:06:06.185",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\npromoByActualTiCiDF \u003d actualCogsTiRecalculationPromoDF\\\n  .join(actualTiCiIdsDF, actualTiCiIdsDF.Id \u003d\u003d actualCogsTiRecalculationPromoDF.Id, \u0027inner\u0027)\\\n  .where(~actualTiCiIdsDF.Id.isNull())\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()\n\npromoByActualTiCiDF.show()",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:06:06.280",
      "progress": 43,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---+------+\n| Id|Number|\n+---+------+\n+---+------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d50"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d51"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d52"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d53"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d54"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826483_908640449",
      "id": "20220810-113330_1121352630",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:06:06.283",
      "dateFinished": "2022-09-30 06:06:08.518",
      "status": "FINISHED"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by product changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:06:08.586",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e#####\u003cem\u003eGet promo numbers filtered by product changes incidents\u003c/em\u003e\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826483_1545009116",
      "id": "20220810-113330_1717552339",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:06:08.589",
      "dateFinished": "2022-09-30 06:06:08.594",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\npromoByProductCiDF \u003d promoFilterDF\\\n  .join(promoProductTreeDF, promoProductTreeDF.PromoId \u003d\u003d promoFilterDF.Id, \u0027inner\u0027)\\\n  .join(productTreeDF, productTreeDF.ObjectId \u003d\u003d promoProductTreeDF.ProductTreeObjectId, \u0027inner\u0027)\\\n  .select(\\\n           promoFilterDF.Id.alias(\u0027promoId\u0027)\n          ,promoFilterDF.ClientTreeKeyId\n          ,promoFilterDF.DispatchesStart\n          ,promoFilterDF.Disabled.alias(\u0027pptDisabled\u0027)\n          ,promoFilterDF.Number.alias(\u0027pNumber\u0027)\n          ,productTreeDF.EndDate\n          ,promoFilterDF.InOut\n          ,lower(productTreeDF.FilterQuery).alias(\u0027FilterQuery\u0027)\n         )\\\n  .where((col(\u0027pptDisabled\u0027) \u003d\u003d \u0027false\u0027) \u0026 (col(\u0027EndDate\u0027).isNull()))\n\ninoutPromoByProductCiDF \u003d promoByProductCiDF.where(col(\u0027InOut\u0027) \u003d\u003d \u0027true\u0027)\nnotInoutPromoByProductCiDF \u003d promoByProductCiDF.where(col(\u0027InOut\u0027) \u003d\u003d \u0027false\u0027)\n\nlowerCaseProductDF \u003d productDF.select(*[lower(col(c)).name(c) for c in productDF.columns])\nlowerCaseProductDF \u003d lowerCaseProductDF.toDF(*[c.lower() for c in lowerCaseProductDF.columns])",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:06:08.689",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826483_1350820636",
      "id": "20220810-113330_2088943256",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:06:08.692",
      "dateFinished": "2022-09-30 06:06:09.159",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\r\npromoByProductCiList \u003d notInoutPromoByProductCiDF.collect()\r\n\r\nfilteredArray \u003d []\r\nlowerCaseProductDF.registerTempTable(\"product\")\r\n\r\nfilteredProductSchema \u003d StructType([\r\n  StructField(\"Id\", StringType(), False),\r\n  StructField(\"Number\", IntegerType(), False),\r\n  StructField(\"fPromoId\", StringType(), False),\r\n])\r\n\r\nfor i, item in enumerate(promoByProductCiList):\r\n#   print(i, item.pNumber, item.promoId)\r\n  productFilter \u003d item.FilterQuery.replace(\u0027[\u0027+schema.lower()+\u0027].[\u0027, \u0027\u0027).replace(\u0027].[\u0027, \u0027.\u0027).replace(\u0027[\u0027, \u0027\u0027).replace(\u0027]\u0027, \u0027\u0027).replace(\u0027*\u0027, \u0027id\u0027)\r\n  filteredIdsList \u003d spark.sql(productFilter).collect()\r\n#   print(productFilter)\r\n#   print(filteredIdsList)\r\n  for productId in filteredIdsList:\r\n    filteredArray.append([productId[0], item.pNumber, item.promoId])\r\n    \r\nfilteredProductDF \u003d spark.createDataFrame(filteredArray, filteredProductSchema)",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:38:26.377",
      "progress": 100,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d59"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d60"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d61"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d62"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d63"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d64"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d65"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d66"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d67"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d68"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d69"
            },
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d70"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826483_1893095250",
      "id": "20220810-113330_1488727337",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:06:09.195",
      "dateFinished": "2022-09-30 06:06:13.089",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nprint(filteredProductDF.count())",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:06:13.100",
      "progress": 20,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "399\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d71"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826483_514980703",
      "id": "20220810-113330_700900931",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:06:13.103",
      "dateFinished": "2022-09-30 06:06:14.026",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nactiveAssortmentMatrixDF \u003d assortmentMatrixDF.where(col(\u0027Disabled\u0027) \u003d\u003d \u0027false\u0027)\n\ncols \u003d filteredProductDF.columns\n\nresultFilteredProductDF \u003d filteredProductDF\\\n  .join(activeAssortmentMatrixDF, activeAssortmentMatrixDF.ProductId \u003d\u003d filteredProductDF.Id, \u0027inner\u0027)\\\n  .select(filteredProductDF[\u0027*\u0027])\\\n  .dropDuplicates()",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:06:14.104",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826483_1039974139",
      "id": "20220810-113330_833079028",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:06:14.107",
      "dateFinished": "2022-09-30 06:06:14.323",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nprint(resultFilteredProductDF.count())",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:06:14.407",
      "progress": 69,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "0\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://rc1b-dataproc-d-nxh7ji9rxwajctvq.mdb.yandexcloud.net:44861/jobs/job?id\u003d73"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826483_1237511015",
      "id": "20220810-113330_1480116262",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:06:14.410",
      "dateFinished": "2022-09-30 06:06:16.190",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nnotInoutPromoByProductCiDF \u003d resultFilteredProductDF\\\n  .join(activeProductChangeIncidentsDF, activeProductChangeIncidentsDF.ProductId \u003d\u003d resultFilteredProductDF.Id, \u0027inner\u0027)\\\n  .select(resultFilteredProductDF.fPromoId.alias(\u0027Id\u0027), resultFilteredProductDF.Number)\\\n  .dropDuplicates()\n\ninoutPromoByProductCiDF \u003d inoutPromoByProductCiDF\\\n  .join(activePromoProductDF, activePromoProductDF.PromoId \u003d\u003d inoutPromoByProductCiDF.promoId, \u0027inner\u0027)\\\n  .join(activeProductChangeIncidentsDF, activeProductChangeIncidentsDF.ProductId \u003d\u003d activePromoProductDF.ProductId, \u0027inner\u0027)\\\n  .select(inoutPromoByProductCiDF.promoId.alias(\u0027Id\u0027), inoutPromoByProductCiDF.pNumber.alias(\u0027Number\u0027))\\\n  .dropDuplicates()\n\npromoByProductCiDF \u003d notInoutPromoByProductCiDF.union(inoutPromoByProductCiDF)",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:06:16.212",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826483_1580465649",
      "id": "20220810-113330_1632920429",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:06:16.215",
      "dateFinished": "2022-09-30 06:06:16.483",
      "status": "FINISHED"
    },
    {
      "text": "%md\n#####*Result*",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:06:16.516",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e#####\u003cem\u003eResult\u003c/em\u003e\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826483_139065134",
      "id": "20220810-113330_2143184378",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:06:16.519",
      "dateFinished": "2022-09-30 06:06:16.525",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\ntitleMessage \u003d \u0027[INFO]: PROMO FILTERING\u0027\ntitleLogMessageDF \u003d spark.createDataFrame([(titleMessage,)], inputLogMessageSchema)\n\npromoNumbersByAssortmentMatrixCiDF \u003d promoByAssortmentMatrixCiDF.select(col(\u0027Number\u0027)).withColumn(\u0027Title\u0027, lit(\u0027[INFO]: Promo filtered by Assortment matrix incidents: \u0027))\npromoNumbersByAssortmentMatrixCiDF \u003d promoNumbersByAssortmentMatrixCiDF\\\n  .groupBy(\u0027Title\u0027)\\\n  .agg(concat_ws(\u0027;\u0027, collect_list(col(\u0027Number\u0027))).alias(\u0027Number\u0027))\n\npromoNumbersByPriceListCiDF \u003d promoByPriceListCiDF.select(col(\u0027Number\u0027)).withColumn(\u0027Title\u0027, lit(\u0027[INFO]: Promo filtered by Pricelist incidents: \u0027))\npromoNumbersByPriceListCiDF \u003d promoNumbersByPriceListCiDF\\\n  .groupBy(\u0027Title\u0027)\\\n  .agg(concat_ws(\u0027;\u0027, collect_list(col(\u0027Number\u0027))).alias(\u0027Number\u0027))\n\npromoNumbersByBaselineCiDF \u003d promoByBaselineCiDF.select(col(\u0027Number\u0027)).withColumn(\u0027Title\u0027, lit(\u0027[INFO]: Promo filtered by Baseline incidents: \u0027))\npromoNumbersByBaselineCiDF \u003d promoNumbersByBaselineCiDF\\\n  .groupBy(\u0027Title\u0027)\\\n  .agg(concat_ws(\u0027;\u0027, collect_list(col(\u0027Number\u0027))).alias(\u0027Number\u0027))\n\npromoNumbersBySharesCiDF \u003d promoBySharesCiDF.select(col(\u0027Number\u0027)).withColumn(\u0027Title\u0027, lit(\u0027[INFO]: Promo filtered by Shares incidents: \u0027))\npromoNumbersBySharesCiDF \u003d promoNumbersBySharesCiDF\\\n  .groupBy(\u0027Title\u0027)\\\n  .agg(concat_ws(\u0027;\u0027, collect_list(col(\u0027Number\u0027))).alias(\u0027Number\u0027))\n\npromoNumbersByClientTreeCiDF \u003d promoByClientTreeCiDF.select(col(\u0027Number\u0027)).withColumn(\u0027Title\u0027, lit(\u0027[INFO]: Promo filtered by ClientTree incidents: \u0027))\npromoNumbersByClientTreeCiDF \u003d promoNumbersByClientTreeCiDF\\\n  .groupBy(\u0027Title\u0027)\\\n  .agg(concat_ws(\u0027;\u0027, collect_list(col(\u0027Number\u0027))).alias(\u0027Number\u0027))\n\npromoNumbersByProductTreeCiDF \u003d promoByProductTreeCiDF.select(col(\u0027Number\u0027)).withColumn(\u0027Title\u0027, lit(\u0027[INFO]: Promo filtered by ProductTree incidents: \u0027))\npromoNumbersByProductTreeCiDF \u003d promoNumbersByProductTreeCiDF\\\n  .groupBy(\u0027Title\u0027)\\\n  .agg(concat_ws(\u0027;\u0027, collect_list(col(\u0027Number\u0027))).alias(\u0027Number\u0027))\n\npromoNumbersByCorrectionCiDF \u003d promoByCorrectionCiDF.select(col(\u0027Number\u0027)).withColumn(\u0027Title\u0027, lit(\u0027[INFO]: Promo filtered by Correction incidents: \u0027))\npromoNumbersByCorrectionCiDF \u003d promoNumbersByCorrectionCiDF\\\n  .groupBy(\u0027Title\u0027)\\\n  .agg(concat_ws(\u0027;\u0027, collect_list(col(\u0027Number\u0027))).alias(\u0027Number\u0027))\n\npromoNumbersByIncrementalCiDF \u003d promoByIncrementalCiDF.select(col(\u0027Number\u0027)).withColumn(\u0027Title\u0027, lit(\u0027[INFO]: Promo filtered by Incremental incidents: \u0027))\npromoNumbersByIncrementalCiDF \u003d promoNumbersByIncrementalCiDF\\\n  .groupBy(\u0027Title\u0027)\\\n  .agg(concat_ws(\u0027;\u0027, collect_list(col(\u0027Number\u0027))).alias(\u0027Number\u0027))\n\npromoNumbersByCogsCiDF \u003d promoByCogsCiDF.select(col(\u0027Number\u0027)).withColumn(\u0027Title\u0027, lit(\u0027[INFO]: Promo filtered by COGS incidents: \u0027))\npromoNumbersByCogsCiDF \u003d promoNumbersByCogsCiDF\\\n  .groupBy(\u0027Title\u0027)\\\n  .agg(concat_ws(\u0027;\u0027, collect_list(col(\u0027Number\u0027))).alias(\u0027Number\u0027))\n\npromoNumbersByCogsTnCiDF \u003d promoByCogsTnCiDF.select(col(\u0027Number\u0027)).withColumn(\u0027Title\u0027, lit(\u0027[INFO]: Promo filtered by COGSTn incidents: \u0027))\npromoNumbersByCogsTnCiDF \u003d promoNumbersByCogsTnCiDF\\\n  .groupBy(\u0027Title\u0027)\\\n  .agg(concat_ws(\u0027;\u0027, collect_list(col(\u0027Number\u0027))).alias(\u0027Number\u0027))\n\npromoNumbersByTiCiDF \u003d promoByTiCiDF.select(col(\u0027Number\u0027)).withColumn(\u0027Title\u0027, lit(\u0027[INFO]: Promo filtered by TI incidents: \u0027))\npromoNumbersByTiCiDF \u003d promoNumbersByTiCiDF\\\n  .groupBy(\u0027Title\u0027)\\\n  .agg(concat_ws(\u0027;\u0027, collect_list(col(\u0027Number\u0027))).alias(\u0027Number\u0027))\n\npromoNumbersByActualCogsCiDF \u003d promoByActualCogsCiDF.select(col(\u0027Number\u0027)).withColumn(\u0027Title\u0027, lit(\u0027[INFO]: Promo filtered by Actual COGS incidents: \u0027))\npromoNumbersByActualCogsCiDF \u003d promoNumbersByActualCogsCiDF\\\n  .groupBy(\u0027Title\u0027)\\\n  .agg(concat_ws(\u0027;\u0027, collect_list(col(\u0027Number\u0027))).alias(\u0027Number\u0027))\n\npromoNumbersByActualCogsTnCiDF \u003d promoByActualCogsTnCiDF.select(col(\u0027Number\u0027)).withColumn(\u0027Title\u0027, lit(\u0027[INFO]: Promo filtered by Actual COGSTn incidents: \u0027))\npromoNumbersByActualCogsTnCiDF \u003d promoNumbersByActualCogsTnCiDF\\\n  .groupBy(\u0027Title\u0027)\\\n  .agg(concat_ws(\u0027;\u0027, collect_list(col(\u0027Number\u0027))).alias(\u0027Number\u0027))\n\npromoNumbersByActualTiCiDF \u003d promoByActualTiCiDF.select(col(\u0027Number\u0027)).withColumn(\u0027Title\u0027, lit(\u0027[INFO]: Promo filtered by Actual TI incidents: \u0027))\npromoNumbersByActualTiCiDF \u003d promoNumbersByActualTiCiDF\\\n  .groupBy(\u0027Title\u0027)\\\n  .agg(concat_ws(\u0027;\u0027, collect_list(col(\u0027Number\u0027))).alias(\u0027Number\u0027))\n\npromoNumbersByProductCiDF \u003d promoByProductCiDF.select(col(\u0027Number\u0027)).withColumn(\u0027Title\u0027, lit(\u0027[INFO]: Promo filtered by Product incidents: \u0027))\npromoNumbersByProductCiDF \u003d promoNumbersByProductCiDF\\\n  .groupBy(\u0027Title\u0027)\\\n  .agg(concat_ws(\u0027;\u0027, collect_list(col(\u0027Number\u0027))).alias(\u0027Number\u0027))\n\npromoNumbersFilteredByCiDF \u003d promoNumbersByAssortmentMatrixCiDF\\\n  .union(promoNumbersByPriceListCiDF)\\\n  .union(promoNumbersByBaselineCiDF)\\\n  .union(promoNumbersBySharesCiDF)\\\n  .union(promoNumbersByClientTreeCiDF)\\\n  .union(promoNumbersByProductTreeCiDF)\\\n  .union(promoNumbersByCorrectionCiDF)\\\n  .union(promoNumbersByIncrementalCiDF)\\\n  .union(promoNumbersByCogsCiDF)\\\n  .union(promoNumbersByCogsTnCiDF)\\\n  .union(promoNumbersByTiCiDF)\\\n  .union(promoNumbersByActualCogsCiDF)\\\n  .union(promoNumbersByActualCogsTnCiDF)\\\n  .union(promoNumbersByActualTiCiDF)\\\n  .union(promoNumbersByProductCiDF)\n\nlogMessageDF \u003d promoNumbersFilteredByCiDF\\\n  .withColumn(\u0027logMessage\u0027, concat(col(\u0027Title\u0027), col(\u0027Number\u0027)))\\\n  .drop(\u0027Title\u0027, \u0027Number\u0027)\n\noutputLogMessageDF \u003d inputLogMessageDF\\\n  .union(titleLogMessageDF)\\\n  .union(logMessageDF)\n\npromoByCiDF \u003d promoByAssortmentMatrixCiDF\\\n  .union(promoByPriceListCiDF)\\\n  .union(promoByBaselineCiDF)\\\n  .union(promoBySharesCiDF)\\\n  .union(promoByClientTreeCiDF)\\\n  .union(promoByProductTreeCiDF)\\\n  .union(promoByCorrectionCiDF)\\\n  .union(promoByIncrementalCiDF)\\\n  .union(promoByCogsCiDF)\\\n  .union(promoByCogsTnCiDF)\\\n  .union(promoByTiCiDF)\\\n  .union(promoByActualCogsCiDF)\\\n  .union(promoByActualCogsTnCiDF)\\\n  .union(promoByActualTiCiDF)\\\n  .union(promoByProductCiDF)\n\nblockedPromoDF \u003d promoByCiDF\\\n  .select(col(\u0027Id\u0027).alias(\u0027PromoId\u0027))\\\n  .withColumn(\u0027HandlerId\u0027, lit(handlerId))\n\nblockedPromoDF \u003d blockedPromoDF.dropDuplicates()\n\nactiveChangesIncidentsDF \u003d activeChangesIncidentsDF\\\n  .withColumn(\u0027Disabled\u0027, lit(True))\\\n  .drop(\u0027#QCCount\u0027)\n\nactiveProductChangeIncidentsDF \u003d activeProductChangeIncidentsDF\\\n  .withColumn(\u0027Disabled\u0027, lit(True))\\\n  .drop(\u0027#QCCount\u0027)\n\nresultChangesIncidentsDF \u003d activeChangesIncidentsDF.union(processChangesIncidentsDF)\nresultProductChangeIncidentsDF \u003d activeProductChangeIncidentsDF.union(processProductChangeIncidentsDF)\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:06:16.619",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660132826483_563157322",
      "id": "20220810-113330_1881250975",
      "dateCreated": "2022-08-10 12:00:26.483",
      "dateStarted": "2022-09-30 06:06:16.622",
      "dateFinished": "2022-09-30 06:06:17.895",
      "status": "FINISHED"
    },
    {
      "title": "Save results",
      "text": "%pyspark\nblockedPromoDF.write.mode(\"overwrite\").parquet(BLOCKEDPROMO_OUTPUT_PATH)\nblockedPromoDF\\\n.repartition(1)\\\n.write.csv(BLOCKEDPROMO_OUTPUT_PATH_CSV,\nsep\u003d\"\\u0001\",\nheader\u003dTrue,\nmode\u003d\"overwrite\",\nemptyValue\u003d\"\"\n)\n\n#resultChangesIncidentsDF.write.mode(\"overwrite\").parquet(CHANGESINCIDENTS_OUTPUT_PATH)\n#resultProductChangeIncidentsDF.write.mode(\"overwrite\").parquet(PRODUCTCHANGEINCIDENTS_OUTPUT_PATH)\n\nresultChangesIncidentsDF\u003dresultChangesIncidentsDF\\\n.na.fill({\"Disabled\":False})\\\n.withColumn(\"Disabled\",col(\"Disabled\").cast(IntegerType()))\n\nresultChangesIncidentsDF\\\n.repartition(1)\\\n.write.csv(CHANGESINCIDENTS_OUTPUT_PATH,\nsep\u003d\"\\u0001\",\nheader\u003dTrue,\nmode\u003d\"overwrite\",\nemptyValue\u003d\"\",\ntimestampFormat\u003d\"yyyy-MM-dd HH:mm:ss\"\n)\n\nresultProductChangeIncidentsDF\\\n.repartition(1)\\\n.write.csv(PRODUCTCHANGEINCIDENTS_OUTPUT_PATH,\nsep\u003d\"\\u0001\",\nheader\u003dTrue,\nmode\u003d\"overwrite\",\nemptyValue\u003d\"\",\ntimestampFormat\u003d\"yyyy-MM-dd HH:mm:ss\"\n)\n\n",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 06:06:17.924",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mPy4JJavaError\u001b[0m                             Traceback (most recent call last)\n\u001b[0;32m\u003cipython-input-164-9ee21e94242f\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m\u001b[0m\n\u001b[0;32m----\u003e 1\u001b[0;31m \u001b[0mblockedPromoDF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"overwrite\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparquet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mBLOCKEDPROMO_OUTPUT_PATH\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mblockedPromoDF\u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mrepartition\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m .write.csv(BLOCKEDPROMO_OUTPUT_PATH_CSV,\n\u001b[1;32m      5\u001b[0m \u001b[0msep\u001b[0m\u001b[0;34m\u003d\u001b[0m\u001b[0;34m\"\\u0001\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/usr/lib/spark/python/pyspark/sql/readwriter.py\u001b[0m in \u001b[0;36mparquet\u001b[0;34m(self, path, mode, partitionBy, compression)\u001b[0m\n\u001b[1;32m    937\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpartitionBy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpartitionBy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    938\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_set_opts\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcompression\u001b[0m\u001b[0;34m\u003d\u001b[0m\u001b[0mcompression\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 939\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jwrite\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparquet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    940\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    941\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0msince\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1.6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/usr/lib/spark/python/lib/py4j-0.10.9-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1302\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1303\u001b[0m         \u001b[0manswer\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1304\u001b[0;31m         return_value \u003d get_return_value(\n\u001b[0m\u001b[1;32m   1305\u001b[0m             answer, self.gateway_client, self.target_id, self.name)\n\u001b[1;32m   1306\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/usr/lib/spark/python/pyspark/sql/utils.py\u001b[0m in \u001b[0;36mdeco\u001b[0;34m(*a, **kw)\u001b[0m\n\u001b[1;32m    126\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdeco\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    127\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 128\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    129\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mpy4j\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprotocol\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPy4JJavaError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m             \u001b[0mconverted\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mconvert_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjava_exception\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/usr/lib/spark/python/lib/py4j-0.10.9-src.zip/py4j/protocol.py\u001b[0m in \u001b[0;36mget_return_value\u001b[0;34m(answer, gateway_client, target_id, name)\u001b[0m\n\u001b[1;32m    324\u001b[0m             \u001b[0mvalue\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mOUTPUT_CONVERTER\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0manswer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgateway_client\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    325\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0manswer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m\u003d\u003d\u001b[0m \u001b[0mREFERENCE_TYPE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 326\u001b[0;31m                 raise Py4JJavaError(\n\u001b[0m\u001b[1;32m    327\u001b[0m                     \u001b[0;34m\"An error occurred while calling {0}{1}{2}.\\n\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    328\u001b[0m                     format(target_id, \".\", name), value)\n\n\u001b[0;31mPy4JJavaError\u001b[0m: An error occurred while calling o1922.parquet.\n: org.apache.hadoop.security.AccessControlException: Permission denied: user\u003dzeppelin, access\u003dALL, inode\u003d\"/JUPITER/PROCESS/BlockedPromo/BlockedPromo.parquet\":dataproc-agent:hadoop:drwxr-xr-x\n\tat org.apache.hadoop.hdfs.server.namenode.FSPermissionChecker.checkSubAccess(FSPermissionChecker.java:348)\n\tat org.apache.hadoop.hdfs.server.namenode.FSPermissionChecker.checkPermission(FSPermissionChecker.java:265)\n\tat org.apache.hadoop.hdfs.server.namenode.FSPermissionChecker.checkPermission(FSPermissionChecker.java:193)\n\tat org.apache.hadoop.hdfs.server.namenode.FSDirectory.checkPermission(FSDirectory.java:1896)\n\tat org.apache.hadoop.hdfs.server.namenode.FSDirDeleteOp.delete(FSDirDeleteOp.java:110)\n\tat org.apache.hadoop.hdfs.server.namenode.FSNamesystem.delete(FSNamesystem.java:3104)\n\tat org.apache.hadoop.hdfs.server.namenode.NameNodeRpcServer.delete(NameNodeRpcServer.java:1127)\n\tat org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolServerSideTranslatorPB.delete(ClientNamenodeProtocolServerSideTranslatorPB.java:708)\n\tat org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos$ClientNamenodeProtocol$2.callBlockingMethod(ClientNamenodeProtocolProtos.java)\n\tat org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:528)\n\tat org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1086)\n\tat org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1029)\n\tat org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:957)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat javax.security.auth.Subject.doAs(Subject.java:422)\n\tat org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1762)\n\tat org.apache.hadoop.ipc.Server$Handler.run(Server.java:2957)\n\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.apache.hadoop.ipc.RemoteException.instantiateException(RemoteException.java:121)\n\tat org.apache.hadoop.ipc.RemoteException.unwrapRemoteException(RemoteException.java:88)\n\tat org.apache.hadoop.hdfs.DFSClient.delete(DFSClient.java:1614)\n\tat org.apache.hadoop.hdfs.DistributedFileSystem$19.doCall(DistributedFileSystem.java:949)\n\tat org.apache.hadoop.hdfs.DistributedFileSystem$19.doCall(DistributedFileSystem.java:946)\n\tat org.apache.hadoop.fs.FileSystemLinkResolver.resolve(FileSystemLinkResolver.java:81)\n\tat org.apache.hadoop.hdfs.DistributedFileSystem.delete(DistributedFileSystem.java:956)\n\tat org.apache.spark.internal.io.FileCommitProtocol.deleteWithJob(FileCommitProtocol.scala:124)\n\tat org.apache.spark.sql.execution.datasources.InsertIntoHadoopFsRelationCommand.deleteMatchingPartitions(InsertIntoHadoopFsRelationCommand.scala:226)\n\tat org.apache.spark.sql.execution.datasources.InsertIntoHadoopFsRelationCommand.run(InsertIntoHadoopFsRelationCommand.scala:129)\n\tat org.apache.spark.sql.execution.command.DataWritingCommandExec.sideEffectResult$lzycompute(commands.scala:108)\n\tat org.apache.spark.sql.execution.command.DataWritingCommandExec.sideEffectResult(commands.scala:106)\n\tat org.apache.spark.sql.execution.command.DataWritingCommandExec.doExecute(commands.scala:131)\n\tat org.apache.spark.sql.execution.SparkPlan.$anonfun$execute$1(SparkPlan.scala:180)\n\tat org.apache.spark.sql.execution.SparkPlan.$anonfun$executeQuery$1(SparkPlan.scala:218)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\n\tat org.apache.spark.sql.execution.SparkPlan.executeQuery(SparkPlan.scala:215)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:176)\n\tat org.apache.spark.sql.execution.QueryExecution.toRdd$lzycompute(QueryExecution.scala:127)\n\tat org.apache.spark.sql.execution.QueryExecution.toRdd(QueryExecution.scala:126)\n\tat org.apache.spark.sql.DataFrameWriter.$anonfun$runCommand$1(DataFrameWriter.scala:962)\n\tat org.apache.spark.sql.execution.SQLExecution$.$anonfun$withNewExecutionId$5(SQLExecution.scala:100)\n\tat org.apache.spark.sql.execution.SQLExecution$.withSQLConfPropagated(SQLExecution.scala:160)\n\tat org.apache.spark.sql.execution.SQLExecution$.$anonfun$withNewExecutionId$1(SQLExecution.scala:87)\n\tat org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:764)\n\tat org.apache.spark.sql.execution.SQLExecution$.withNewExecutionId(SQLExecution.scala:64)\n\tat org.apache.spark.sql.DataFrameWriter.runCommand(DataFrameWriter.scala:962)\n\tat org.apache.spark.sql.DataFrameWriter.saveToV1Source(DataFrameWriter.scala:414)\n\tat org.apache.spark.sql.DataFrameWriter.save(DataFrameWriter.scala:398)\n\tat org.apache.spark.sql.DataFrameWriter.save(DataFrameWriter.scala:287)\n\tat org.apache.spark.sql.DataFrameWriter.parquet(DataFrameWriter.scala:847)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)\n\tat py4j.Gateway.invoke(Gateway.java:282)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:238)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.security.AccessControlException): Permission denied: user\u003dzeppelin, access\u003dALL, inode\u003d\"/JUPITER/PROCESS/BlockedPromo/BlockedPromo.parquet\":dataproc-agent:hadoop:drwxr-xr-x\n\tat org.apache.hadoop.hdfs.server.namenode.FSPermissionChecker.checkSubAccess(FSPermissionChecker.java:348)\n\tat org.apache.hadoop.hdfs.server.namenode.FSPermissionChecker.checkPermission(FSPermissionChecker.java:265)\n\tat org.apache.hadoop.hdfs.server.namenode.FSPermissionChecker.checkPermission(FSPermissionChecker.java:193)\n\tat org.apache.hadoop.hdfs.server.namenode.FSDirectory.checkPermission(FSDirectory.java:1896)\n\tat org.apache.hadoop.hdfs.server.namenode.FSDirDeleteOp.delete(FSDirDeleteOp.java:110)\n\tat org.apache.hadoop.hdfs.server.namenode.FSNamesystem.delete(FSNamesystem.java:3104)\n\tat org.apache.hadoop.hdfs.server.namenode.NameNodeRpcServer.delete(NameNodeRpcServer.java:1127)\n\tat org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolServerSideTranslatorPB.delete(ClientNamenodeProtocolServerSideTranslatorPB.java:708)\n\tat org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos$ClientNamenodeProtocol$2.callBlockingMethod(ClientNamenodeProtocolProtos.java)\n\tat org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:528)\n\tat org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1086)\n\tat org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1029)\n\tat org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:957)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat javax.security.auth.Subject.doAs(Subject.java:422)\n\tat org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1762)\n\tat org.apache.hadoop.ipc.Server$Handler.run(Server.java:2957)\n\n\tat org.apache.hadoop.ipc.Client.getRpcResponse(Client.java:1562)\n\tat org.apache.hadoop.ipc.Client.call(Client.java:1508)\n\tat org.apache.hadoop.ipc.Client.call(Client.java:1405)\n\tat org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:233)\n\tat org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:118)\n\tat com.sun.proxy.$Proxy17.delete(Unknown Source)\n\tat org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolTranslatorPB.delete(ClientNamenodeProtocolTranslatorPB.java:644)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.hadoop.io.retry.RetryInvocationHandler.invokeMethod(RetryInvocationHandler.java:422)\n\tat org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invokeMethod(RetryInvocationHandler.java:165)\n\tat org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invoke(RetryInvocationHandler.java:157)\n\tat org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invokeOnce(RetryInvocationHandler.java:95)\n\tat org.apache.hadoop.io.retry.RetryInvocationHandler.invoke(RetryInvocationHandler.java:359)\n\tat com.sun.proxy.$Proxy18.delete(Unknown Source)\n\tat org.apache.hadoop.hdfs.DFSClient.delete(DFSClient.java:1612)\n\t... 39 more\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660216357449_1381238890",
      "id": "paragraph_1660216357449_1381238890",
      "dateCreated": "2022-08-11 11:12:37.449",
      "dateStarted": "2022-09-30 06:06:17.927",
      "dateFinished": "2022-09-30 06:06:20.217",
      "status": "ERROR"
    },
    {
      "text": "%pyspark\nsc.setCheckpointDir(\"tmp\")\n\noutputLogMessageDF\\\n.checkpoint(eager\u003dTrue)\\\n.repartition(1)\\\n.write.csv(INPUT_FILE_LOG_PATH,\nsep\u003d\"\\u0001\",\nheader\u003dTrue,\nmode\u003d\"overwrite\",\nemptyValue\u003d\"\",\n)\n\n#subprocess.call([\"hadoop\", \"fs\", \"-mv\", OUTPUT_TEMP_FILE_LOG_PATH, OUTPUT_LOG_PATH])\n#subprocess.call([\"hadoop\", \"fs\", \"-rm\", \"-r\", OUTPUT_TEMP_FILE_LOG_PATH])",
      "user": "anonymous",
      "dateUpdated": "2022-09-23 05:55:52.398",
      "progress": 100,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "0"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://rc1b-dataproc-g-esal.mdb.yandexcloud.net:42913/jobs/job?id\u003d385"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1661163051034_1265806109",
      "id": "paragraph_1661163051034_1265806109",
      "dateCreated": "2022-08-22 10:10:51.034",
      "dateStarted": "2022-09-22 08:00:23.583",
      "dateFinished": "2022-09-22 08:02:31.666",
      "status": "FINISHED"
    }
  ],
  "name": "PROMO_FILTERING_FOR_RECALCULATION",
  "id": "2HBC5NXVU",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {
    "isRunning": false
  }
}