{
  "paragraphs": [
    {
      "text": "%md\n####Notebook \"PLAN_PRODUCT_PARAMS_CALCULATION_PROCESS\". \n####*Calculate plan product parameters and plan promo baseline, incremental and LSV*.\n###### *Developer: [LLC Smart-Com](http://smartcom.software/), andrey.philushkin@effem.com*",
      "user": "anonymous",
      "dateUpdated": "2022-11-23 11:56:39.106",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e####Notebook \u0026ldquo;PLAN_PRODUCT_PARAMS_CALCULATION_PROCESS\u0026rdquo;. \u003c/p\u003e\n\u003cp\u003e####*Calculate plan product parameters and plan promo baseline, incremental and LSV*.\u003c/p\u003e\n\u003ch6\u003e*Developer: \u003ca href\u003d\"http://smartcom.software/\"\u003eLLC Smart-Com\u003c/a\u003e, \u003ca href\u003d\"mailto:\u0026#x61;\u0026#110;d\u0026#114;ey.\u0026#112;\u0026#x68;\u0026#x69;\u0026#x6c;u\u0026#x73;hk\u0026#105;\u0026#110;\u0026#64;\u0026#101;f\u0026#102;\u0026#101;\u0026#109;\u0026#x2e;\u0026#x63;\u0026#x6f;\u0026#x6d;\u0026#42;\"\u003e\u0026#x61;\u0026#110;d\u0026#114;ey.\u0026#112;\u0026#x68;\u0026#x69;\u0026#x6c;u\u0026#x73;hk\u0026#105;\u0026#110;\u0026#64;\u0026#101;f\u0026#102;\u0026#101;\u0026#109;\u0026#x2e;\u0026#x63;\u0026#x6f;\u0026#x6d;\u0026#42;\u003c/a\u003e\u003c/h6\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1669204599106_47115644",
      "id": "20220812-090849_1902034521",
      "dateCreated": "2022-11-23 11:56:39.106",
      "status": "READY"
    },
    {
      "text": "%pyspark\nfrom pyspark.sql import SQLContext, DataFrame, Row, Window\nfrom pyspark.sql import SparkSession\nfrom pyspark.context import SparkContext\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport pyspark.sql.functions as F\nimport pandas as pd\nimport datetime, time\nimport os\nimport json",
      "user": "anonymous",
      "dateUpdated": "2022-11-23 11:56:39.106",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1669204599106_358375491",
      "id": "paragraph_1660295518916_1352515283",
      "dateCreated": "2022-11-23 11:56:39.106",
      "status": "READY"
    },
    {
      "text": "%pyspark\ndef run(calcPlanPromoProductDF,planParamsPriceListDF,planParamsBaselineDF,calcPlanPromoDF,allCalcPlanPromoDF,planParamsSharesDF,datesDF,planParamsCorrectionDF,planParamsIncrementalDF,planParametersStatuses,promoProductCols):\n    sc \u003d SparkContext.getOrCreate();\n    spark \u003d SparkSession(sc)\n    \n    byPriceStartDate \u003d (Window.partitionBy(\u0027PromoId\u0027, \u0027ProductId\u0027).orderBy(col(\"priceStartDate\").desc()))\n\n    # calcPlanPromoProductDF \u003d calcPlanPromoProductDF.drop(\u0027Price\u0027)\n    calcPlanPromoProductDF \u003d calcPlanPromoProductDF\\\n      .join(planParamsPriceListDF, \n            [\\\n              planParamsPriceListDF.priceStartDate \u003c\u003d calcPlanPromoProductDF.promoDispatchesStart,\n              planParamsPriceListDF.priceEndDate \u003e\u003d calcPlanPromoProductDF.promoDispatchesStart,\n              planParamsPriceListDF.priceClientTreeId \u003d\u003d calcPlanPromoProductDF.promoClientTreeKeyId,\n              planParamsPriceListDF.priceProductId \u003d\u003d calcPlanPromoProductDF.ProductId\n            ], \n            \u0027left\u0027)\\\n      .select(\\\n               calcPlanPromoProductDF[\u0027*\u0027]\n              ,planParamsPriceListDF.priceStartDate\n              ,planParamsPriceListDF.Price.alias(\u0027calcPrice\u0027)\n             )\\\n      .withColumn(\u0027Row_Number\u0027, row_number().over(byPriceStartDate))\\\n      .where(col(\u0027Row_Number\u0027) \u003d\u003d 1).drop(\u0027Row_Number\u0027)\n\n    calcPlanPromoProductDF \u003d calcPlanPromoProductDF\\\n      .withColumn(\u0027Price\u0027, col(\u0027calcPrice\u0027))\\\n      .drop(\u0027calcPrice\u0027)\n\n    #product price logging\n    logPricePromoProductDF \u003d calcPlanPromoProductDF\\\n      .select(\\\n               calcPlanPromoProductDF.promoNumber\n              ,calcPlanPromoProductDF.ZREP\n              ,calcPlanPromoProductDF.Price\n             )\\\n      .withColumn(\u0027NullPrice\u0027, when(calcPlanPromoProductDF.Price.isNull(), True).otherwise(None))\\\n      .withColumn(\u0027ZeroPrice\u0027, when(calcPlanPromoProductDF.Price \u003d\u003d 0, True).otherwise(None))\n\n    logNullPricePromoDF \u003d logPricePromoProductDF\\\n      .where(col(\u0027NullPrice\u0027) \u003d\u003d True)\\\n      .groupBy(\u0027promoNumber\u0027)\\\n      .agg(concat_ws(\u0027;\u0027, collect_list(col(\u0027ZREP\u0027))).alias(\u0027nullPriceMessage\u0027))\n\n    logZeroPricePromoDF \u003d logPricePromoProductDF\\\n      .where(col(\u0027ZeroPrice\u0027) \u003d\u003d True)\\\n      .groupBy(\u0027promoNumber\u0027)\\\n      .agg(concat_ws(\u0027;\u0027, collect_list(col(\u0027ZREP\u0027))).alias(\u0027zeroPriceMessage\u0027))\n\n    logPricePromoDF \u003d logNullPricePromoDF\\\n      .join(logZeroPricePromoDF, \u0027promoNumber\u0027, \u0027full\u0027)\n    #---\n\n    calcPlanPromoProductDF \u003d calcPlanPromoProductDF.fillna(0, \u0027Price\u0027)\n\n    #####*Set product baseline*\n\n    # calcPlanPromoProductDF \u003d calcPlanPromoProductDF.drop(\u0027PlanProductBaselineCaseQty\u0027)\n\n    # set product shares\n    calcPlanPromoProductDF \u003d calcPlanPromoProductDF\\\n      .join(planParamsSharesDF,\n           [\\\n             planParamsSharesDF.BrandTechId \u003d\u003d calcPlanPromoProductDF.promoBrandTechId\n            ,planParamsSharesDF.ClientTreeId \u003d\u003d calcPlanPromoProductDF.promoClientTreeKeyId\n            ,planParamsSharesDF.ParentClientTreeDemandCode \u003d\u003d calcPlanPromoProductDF.promoDemandCode\n           ],\n           \u0027left\u0027)\\\n      .select(\\\n               calcPlanPromoProductDF[\u0027*\u0027]\n              ,planParamsSharesDF.Share.cast(DecimalType(30,6)).alias(\u0027productShare\u0027)\n             )\n\n    #product share logging\n    logSharePromoProductDF \u003d calcPlanPromoProductDF\\\n      .select(\\\n               calcPlanPromoProductDF.promoNumber\n              ,calcPlanPromoProductDF.ZREP\n              ,calcPlanPromoProductDF.productShare\n             )\\\n      .withColumn(\u0027NullShare\u0027, when(calcPlanPromoProductDF.productShare.isNull(), True).otherwise(None))\\\n      .withColumn(\u0027ZeroShare\u0027, when(calcPlanPromoProductDF.productShare \u003d\u003d 0, True).otherwise(None))\n\n    logNullSharePromoDF \u003d logSharePromoProductDF\\\n      .where(col(\u0027NullShare\u0027) \u003d\u003d True)\\\n      .groupBy(\u0027promoNumber\u0027)\\\n      .agg(concat_ws(\u0027;\u0027, collect_list(col(\u0027ZREP\u0027))).alias(\u0027nullShareMessage\u0027))\n\n    logZeroSharePromoDF \u003d logSharePromoProductDF\\\n      .where(col(\u0027ZeroShare\u0027) \u003d\u003d True)\\\n      .groupBy(\u0027promoNumber\u0027)\\\n      .agg(concat_ws(\u0027;\u0027, collect_list(col(\u0027ZREP\u0027))).alias(\u0027zeroShareMessage\u0027))\n\n    logSharePromoDF \u003d logNullSharePromoDF\\\n      .join(logZeroSharePromoDF, \u0027promoNumber\u0027, \u0027full\u0027)\n\n    logPromoProductDF \u003d logPricePromoDF\\\n      .join(logSharePromoDF, \u0027promoNumber\u0027, \u0027full\u0027)\n    # ---\n\n    calcPlanPromoProductDF \u003d calcPlanPromoProductDF.fillna(0, \u0027productShare\u0027)\n    # ---\n\n    # split promo duration by weeks\n    calcPlanPromoProductDF \u003d calcPlanPromoProductDF\\\n      .join(datesDF, \n            [\\\n              datesDF.OriginalDate \u003e\u003d calcPlanPromoProductDF.promoStartDate\n             ,datesDF.OriginalDate \u003c\u003d calcPlanPromoProductDF.promoEndDate\n            ], \n            \u0027inner\u0027)\\\n      .select(\\\n              calcPlanPromoProductDF[\u0027*\u0027]\n             ,datesDF.MarsWeekFullName\n             ,datesDF.MarsDay\n             )\n\n    cols \u003d calcPlanPromoProductDF.columns\n    cols.remove(\u0027MarsDay\u0027)\n\n    calcPlanPromoProductDF \u003d calcPlanPromoProductDF\\\n      .groupBy(cols)\\\n      .agg(count(\u0027*\u0027).cast(DecimalType(30,6)).alias(\u0027promoDaysInWeek\u0027))\n    #  ---\n\n    # set product baseline\n    planParamsBaselineDF \u003d planParamsBaselineDF\\\n      .join(datesDF, planParamsBaselineDF.baselineStartDate \u003d\u003d datesDF.OriginalDate, \u0027inner\u0027)\\\n      .select(\\\n              planParamsBaselineDF[\u0027*\u0027]\n             ,datesDF.MarsWeekFullName\n             )\n\n    calcPlanPromoProductDF \u003d calcPlanPromoProductDF\\\n      .join(planParamsBaselineDF, \n           [\\\n             planParamsBaselineDF.baselineProductId \u003d\u003d calcPlanPromoProductDF.ProductId\n            ,planParamsBaselineDF.baselineDemandCode \u003d\u003d calcPlanPromoProductDF.promoDemandCode\n            ,planParamsBaselineDF.MarsWeekFullName \u003d\u003d calcPlanPromoProductDF.MarsWeekFullName\n           ],\n           \u0027left\u0027)\n\n    calcPlanPromoProductDF \u003d calcPlanPromoProductDF\\\n      .fillna(0, [\u0027SellInBaselineQTY\u0027, \u0027SellOutBaselineQTY\u0027])\\\n      .drop(\u0027MarsWeekFullName\u0027)\n\n    calcPlanPromoProductDF \u003d calcPlanPromoProductDF\\\n      .withColumn(\\\n                   \u0027weeklyBaseline\u0027\n                  ,when(col(\u0027promoIsOnInvoice\u0027) \u003d\u003d \u0027True\u0027, ((col(\u0027SellInBaselineQTY\u0027) * col(\u0027promoDaysInWeek\u0027) / 7.0) * (col(\u0027productShare\u0027) / 100.0)).cast(DecimalType(30,6)))\n                       .otherwise(((col(\u0027SellOutBaselineQTY\u0027) * col(\u0027promoDaysInWeek\u0027) / 7.0) * (col(\u0027productShare\u0027) / 100.0)).cast(DecimalType(30,6)))\n                 )\\\n      .drop(\u0027baselineDemandCode\u0027, \u0027baselineProductId\u0027, \u0027baselineStartDate\u0027, \u0027promoDaysInWeek\u0027, \u0027SellInBaselineQTY\u0027, \u0027SellOutBaselineQTY\u0027)\n      \n    cols \u003d calcPlanPromoProductDF.columns\n    cols.remove(\u0027weeklyBaseline\u0027)\n\n    calcPlanPromoProductDF \u003d calcPlanPromoProductDF\\\n      .groupBy(cols)\\\n      .agg(sum(\u0027weeklyBaseline\u0027).cast(DecimalType(30,6)).alias(\u0027calcPlanProductBaselineCaseQty\u0027))\n\n    calcPlanPromoProductDF \u003d calcPlanPromoProductDF\\\n      .withColumn(\u0027PlanProductBaselineCaseQty\u0027, when(col(\u0027promoInOut\u0027) \u003d\u003d \u0027False\u0027, col(\u0027calcPlanProductBaselineCaseQty\u0027).cast(DecimalType(30,6))).otherwise(None))\\\n      .drop(\u0027calcPlanProductBaselineCaseQty\u0027)\n\n    #product baseline qty logging\n    logBaselineQtyPromoProductDF \u003d calcPlanPromoProductDF\\\n      .select(\\\n               calcPlanPromoProductDF.promoNumber\n              ,calcPlanPromoProductDF.ZREP\n              ,calcPlanPromoProductDF.PlanProductBaselineCaseQty\n             )\\\n      .withColumn(\u0027ZeroBaselineQty\u0027, when(calcPlanPromoProductDF.PlanProductBaselineCaseQty \u003d\u003d 0, True).otherwise(None))\n\n    logZeroBaselineQtyPromoDF \u003d logBaselineQtyPromoProductDF\\\n      .where(col(\u0027ZeroBaselineQty\u0027) \u003d\u003d True)\\\n      .groupBy(\u0027promoNumber\u0027)\\\n      .agg(concat_ws(\u0027;\u0027, collect_list(col(\u0027ZREP\u0027))).alias(\u0027zeroBaselineQtyMessage\u0027))\n\n    logPromoProductDF \u003d logPromoProductDF\\\n      .join(logZeroBaselineQtyPromoDF, \u0027promoNumber\u0027, \u0027full\u0027)\n    # ---\n\n    calcPlanPromoProductDF \u003d calcPlanPromoProductDF\\\n      .withColumn(\u0027PlanProductBaselineLSV\u0027, when(col(\u0027promoInOut\u0027) \u003d\u003d \u0027False\u0027, (col(\u0027PlanProductBaselineCaseQty\u0027) * col(\u0027Price\u0027)).cast(DecimalType(30,6))).otherwise(None))\n    #  ---\n\n    #####*Calculate plan product parameters*\n\n    calcPlanPromoProductDF \u003d calcPlanPromoProductDF\\\n      .join(planParamsCorrectionDF, planParamsCorrectionDF.correctionPromoProductId \u003d\u003d calcPlanPromoProductDF.Id, \u0027left\u0027)\\\n      .select(\\\n               calcPlanPromoProductDF[\u0027*\u0027]\n              ,when(planParamsCorrectionDF.correctionPlanProductUpliftPercentCorrected.isNull(), calcPlanPromoProductDF.PlanProductUpliftPercent)\\\n                    .otherwise(planParamsCorrectionDF.correctionPlanProductUpliftPercentCorrected).cast(DecimalType(30,6)).alias(\u0027productUpliftPercent\u0027)\n             )\n\n    calcPlanPromoProductDF \u003d calcPlanPromoProductDF\\\n      .join(planParamsIncrementalDF, \n            [\\\n              planParamsIncrementalDF.incrementalPromoId \u003d\u003d calcPlanPromoProductDF.PromoId\n             ,planParamsIncrementalDF.incrementalProductId \u003d\u003d calcPlanPromoProductDF.ProductId\n            ]\n            ,\u0027left\u0027)\\\n      .select(\\\n               calcPlanPromoProductDF[\u0027*\u0027]\n              ,planParamsIncrementalDF.PlanPromoIncrementalCases.cast(DecimalType(30,6))\n             )\n\n    calcPlanPromoProductDF \u003d calcPlanPromoProductDF\\\n      .withColumn(\u0027PlanProductIncrementalLSV\u0027, when(col(\u0027promoInOut\u0027) \u003d\u003d \u0027False\u0027, col(\u0027PlanProductBaselineLSV\u0027) * col(\u0027productUpliftPercent\u0027) / 100.0)\\\n                                                            .otherwise(col(\u0027PlanPromoIncrementalCases\u0027) * col(\u0027Price\u0027)).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanProductLSV\u0027, when(col(\u0027promoInOut\u0027) \u003d\u003d \u0027False\u0027, col(\u0027PlanProductBaselineLSV\u0027) + col(\u0027PlanProductIncrementalLSV\u0027))\\\n                                                            .otherwise(col(\u0027PlanProductIncrementalLSV\u0027)).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanProductPCPrice\u0027, (col(\u0027Price\u0027) / col(\u0027UOM_PC2Case\u0027)).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanProductIncrementalCaseQty\u0027, when(col(\u0027promoInOut\u0027) \u003d\u003d \u0027False\u0027, col(\u0027PlanProductBaselineCaseQty\u0027) * col(\u0027productUpliftPercent\u0027) / 100.0)\\\n                                                          .otherwise(col(\u0027PlanPromoIncrementalCases\u0027)).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanProductCaseQty\u0027, when(col(\u0027promoInOut\u0027) \u003d\u003d \u0027False\u0027, col(\u0027PlanProductBaselineCaseQty\u0027) + col(\u0027PlanProductIncrementalCaseQty\u0027))\\\n                                                          .otherwise(col(\u0027PlanProductIncrementalCaseQty\u0027)).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanProductPCQty\u0027, (col(\u0027PlanProductCaseQty\u0027) * col(\u0027UOM_PC2Case\u0027)).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanProductCaseLSV\u0027, when(col(\u0027promoInOut\u0027) \u003d\u003d \u0027False\u0027, col(\u0027PlanProductBaselineCaseQty\u0027) * col(\u0027Price\u0027))\\\n                                              .otherwise(col(\u0027PlanProductCaseQty\u0027) * col(\u0027Price\u0027)).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanProductPCLSV\u0027, (col(\u0027PlanProductCaseLSV\u0027) / col(\u0027UOM_PC2Case\u0027)).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanProductPostPromoEffectQtyW1\u0027, when(col(\u0027promoInOut\u0027) \u003d\u003d \u0027False\u0027, (col(\u0027PlanProductBaselineCaseQty\u0027) * col(\u0027promoClientPostPromoEffectW1\u0027) / 100.0))\\\n                                                    .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanProductPostPromoEffectQtyW1\u0027, when(col(\u0027PlanProductPostPromoEffectQtyW1\u0027).isNull(), 0)\\\n                  .otherwise(col(\u0027PlanProductPostPromoEffectQtyW1\u0027)).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanProductPostPromoEffectQtyW2\u0027, when(col(\u0027promoInOut\u0027) \u003d\u003d \u0027False\u0027, (col(\u0027PlanProductBaselineCaseQty\u0027) * col(\u0027promoClientPostPromoEffectW2\u0027) / 100.0))\\\n                                                    .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanProductPostPromoEffectQtyW2\u0027, when(col(\u0027PlanProductPostPromoEffectQtyW2\u0027).isNull(), 0)\\\n                  .otherwise(col(\u0027PlanProductPostPromoEffectQtyW2\u0027)).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanProductPostPromoEffectQty\u0027, when(col(\u0027promoInOut\u0027) \u003d\u003d \u0027False\u0027, col(\u0027PlanProductPostPromoEffectQtyW1\u0027) + col(\u0027PlanProductPostPromoEffectQtyW2\u0027))\\\n                                                    .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanProductPostPromoEffectLSVW1\u0027, when(col(\u0027promoInOut\u0027) \u003d\u003d \u0027False\u0027, (col(\u0027PlanProductBaselineLSV\u0027) * col(\u0027promoClientPostPromoEffectW1\u0027) / 100.0))\\\n                                                    .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanProductPostPromoEffectLSVW1\u0027, when(col(\u0027PlanProductPostPromoEffectLSVW1\u0027).isNull(), 0)\\\n                  .otherwise(col(\u0027PlanProductPostPromoEffectLSVW1\u0027)).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanProductPostPromoEffectLSVW2\u0027, when(col(\u0027promoInOut\u0027) \u003d\u003d \u0027False\u0027, (col(\u0027PlanProductBaselineLSV\u0027) * col(\u0027promoClientPostPromoEffectW2\u0027) / 100.0))\\\n                                                    .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanProductPostPromoEffectLSVW2\u0027, when(col(\u0027PlanProductPostPromoEffectLSVW2\u0027).isNull(), 0)\\\n                  .otherwise(col(\u0027PlanProductPostPromoEffectLSVW2\u0027)).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanProductPostPromoEffectLSV\u0027, when(col(\u0027promoInOut\u0027) \u003d\u003d \u0027False\u0027, col(\u0027PlanProductPostPromoEffectLSVW1\u0027) + col(\u0027PlanProductPostPromoEffectLSVW2\u0027))\\\n                                              .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanProductBaselineVolume\u0027, (col(\u0027PlanProductBaselineCaseQty\u0027) * col(\u0027CaseVolume\u0027)).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanProductIncrementalVolume\u0027, when(col(\u0027promoInOut\u0027) \u003d\u003d \u0027True\u0027, col(\u0027PlanProductIncrementalCaseQty\u0027) * col(\u0027CaseVolume\u0027))\\\n                                                          .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanProductPostPromoEffectVolumeW1\u0027, when(col(\u0027promoInOut\u0027) \u003d\u003d \u0027False\u0027, col(\u0027PlanProductBaselineVolume\u0027) * col(\u0027promoClientPostPromoEffectW1\u0027) / 100).otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanProductPostPromoEffectVolumeW2\u0027, when(col(\u0027promoInOut\u0027) \u003d\u003d \u0027False\u0027, col(\u0027PlanProductBaselineVolume\u0027) * col(\u0027promoClientPostPromoEffectW2\u0027) / 100).otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanProductPostPromoEffectVolume\u0027, when(col(\u0027promoInOut\u0027) \u003d\u003d \u0027False\u0027, col(\u0027PlanProductPostPromoEffectVolumeW1\u0027) + col(\u0027PlanProductPostPromoEffectVolumeW2\u0027)).otherwise(0).cast(DecimalType(30,6)))\n\n    #####*Calculate PlanPromoIncrementalLSV, PlanPromoBaselineLSV, PlanPromoLSV*\n\n    sumPlanProductParamsList \u003d calcPlanPromoProductDF\\\n      .select(\\\n               col(\u0027promoNumber\u0027)\n              ,col(\u0027PlanProductIncrementalLSV\u0027)\n              ,col(\u0027PlanProductBaselineLSV\u0027)\n              ,col(\u0027PlanProductBaselineVolume\u0027)\n              ,col(\u0027PlanProductIncrementalVolume\u0027)\n              ,col(\u0027PlanProductLSV\u0027)\n             )\\\n      .groupBy(\u0027promoNumber\u0027)\\\n      .agg(sum(\u0027PlanProductIncrementalLSV\u0027).alias(\u0027calcPlanPromoIncrementalLSV\u0027),\n           sum(\u0027PlanProductBaselineLSV\u0027).alias(\u0027calcPlanPromoBaselineLSV\u0027),\n           sum(\u0027PlanProductIncrementalVolume\u0027).alias(\u0027calcPlanProductIncrementalVolume\u0027),\n           sum(\u0027PlanProductBaselineVolume\u0027).alias(\u0027calcPlanProductBaselineVolume\u0027))\\\n      .withColumn(\u0027tempPlanPromoIncrementalLSV\u0027, when(col(\u0027calcPlanPromoIncrementalLSV\u0027).isNull(), 0).otherwise(col(\u0027calcPlanPromoIncrementalLSV\u0027)))\\\n      .withColumn(\u0027tempPlanPromoBaselineLSV\u0027, when(col(\u0027calcPlanPromoBaselineLSV\u0027).isNull(), 0).otherwise(col(\u0027calcPlanPromoBaselineLSV\u0027)))\\\n      .withColumn(\u0027calcPlanPromoLSV\u0027, col(\u0027tempPlanPromoIncrementalLSV\u0027) + col(\u0027tempPlanPromoBaselineLSV\u0027))\\\n      .withColumn(\u0027calcPlanProductBaselineVolume\u0027, when(col(\u0027calcPlanProductBaselineVolume\u0027).isNull(), 0).otherwise(col(\u0027calcPlanProductBaselineVolume\u0027)))\\\n      .withColumn(\u0027calcPlanProductIncrementalVolume\u0027, when(col(\u0027calcPlanProductIncrementalVolume\u0027).isNull(), 0).otherwise(col(\u0027calcPlanProductIncrementalVolume\u0027)))\\\n      .drop(\u0027tempPlanPromoIncrementalLSV\u0027,\u0027tempPlanPromoBaselineLSV\u0027)\n\n    sumPlanProductParamsList \u003d sumPlanProductParamsList.collect()\n\n    planParSchema \u003d StructType([\n      StructField(\"promoNumber\", StringType(), True),\n      StructField(\"calcPlanPromoIncrementalLSV\", DecimalType(30,6), True),\n      StructField(\"calcPlanPromoBaselineLSV\", DecimalType(30,6), True),\n      StructField(\"calcPlanProductIncrementalVolume\", DecimalType(30,6), True),\n      StructField(\"calcPlanProductBaselineVolume\", DecimalType(30,6), True),\n      StructField(\"calcPlanPromoLSV\", DecimalType(30,6), True)\n    ])\n\n    planParDF \u003d spark.createDataFrame(sumPlanProductParamsList, planParSchema)\n\n    calcPlanPromoDF \u003d calcPlanPromoDF\\\n      .join(planParDF, planParDF.promoNumber \u003d\u003d calcPlanPromoDF.Number, \u0027inner\u0027)\n\n    allCalcPlanPromoDF \u003d allCalcPlanPromoDF\\\n      .join(calcPlanPromoDF, \u0027Id\u0027, \u0027left\u0027)\\\n      .select(\\\n               allCalcPlanPromoDF[\u0027*\u0027]\n              ,calcPlanPromoDF.calcPlanPromoIncrementalLSV\n              ,calcPlanPromoDF.calcPlanPromoBaselineLSV\n              ,calcPlanPromoDF.calcPlanPromoLSV\n              ,calcPlanPromoDF.calcPlanProductBaselineVolume\n              ,calcPlanPromoDF.calcPlanProductIncrementalVolume\n             )\\\n      .withColumn(\u0027PlanPromoIncrementalLSV\u0027, when(calcPlanPromoDF.calcPlanPromoIncrementalLSV.isNull(), allCalcPlanPromoDF.PlanPromoIncrementalLSV)\\\n                                             .otherwise(calcPlanPromoDF.calcPlanPromoIncrementalLSV).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanPromoBaselineLSV\u0027, when(calcPlanPromoDF.calcPlanPromoBaselineLSV.isNull(), allCalcPlanPromoDF.PlanPromoBaselineLSV)\\\n                                             .otherwise(calcPlanPromoDF.calcPlanPromoBaselineLSV).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanPromoLSV\u0027, when(calcPlanPromoDF.calcPlanPromoLSV.isNull(), allCalcPlanPromoDF.PlanPromoLSV)\\\n                                             .otherwise(calcPlanPromoDF.calcPlanPromoLSV).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanPromoUpliftPercent\u0027, when(((col(\u0027PlanPromoBaselineLSV\u0027) !\u003d 0) \u0026 (col(\u0027NeedRecountUplift\u0027) \u003d\u003d True)\\\n                                                  \u0026 col(\u0027promoStatusSystemName\u0027).isin(*planParametersStatuses))\\\n                                                 ,col(\u0027PlanPromoIncrementalLSV\u0027) / col(\u0027PlanPromoBaselineLSV\u0027) * 100.0)\\\n                                             .otherwise(col(\u0027PlanPromoUpliftPercent\u0027)).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanPromoBaselineVolume\u0027, when(calcPlanPromoDF.calcPlanProductBaselineVolume.isNull(), allCalcPlanPromoDF.PlanPromoBaselineVolume)\\\n                                             .otherwise(calcPlanPromoDF.calcPlanProductBaselineVolume).cast(DecimalType(30,6)))\\\n      .withColumn(\u0027PlanPromoIncrementalVolume\u0027, when(col(\u0027InOut\u0027) \u003d\u003d \u0027False\u0027, col(\u0027PlanPromoBaselineVolume\u0027) * col(\u0027PlanPromoUpliftPercent\u0027) / 100).otherwise(col(\u0027calcPlanProductIncrementalVolume\u0027)).cast(DecimalType(30,6)))\\\n      .drop(\u0027calcPlanPromoIncrementalLSV\u0027,\u0027calcPlanPromoBaselineLSV\u0027,\u0027calcPlanPromoLSV\u0027,\u0027calcPlanProductBaselineVolume\u0027,\u0027calcPlanProductIncrementalVolume\u0027)\n\n    #####*Get result*\n\n    # newPromoProductDF \u003d calcPlanPromoProductDF.where(col(\u0027Action\u0027) \u003d\u003d \u0027Added\u0027).select(promoProductCols)\n    calcPlanPromoProductDF \u003d calcPlanPromoProductDF.select(promoProductCols)\n    print(\u0027Plan product parameters calculation completed!\u0027)\n    \n    return calcPlanPromoProductDF,calcPlanPromoDF,allCalcPlanPromoDF,logPromoProductDF\n    ",
      "user": "anonymous",
      "dateUpdated": "2022-12-06 09:43:33.969",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1669204599106_1737224196",
      "id": "paragraph_1660295531984_1959047283",
      "dateCreated": "2022-11-23 11:56:39.106",
      "status": "READY"
    }
  ],
  "name": "PLAN_PRODUCT_PARAMS_CALCULATION_PROCESS",
  "id": "2HM7NNCPP",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}