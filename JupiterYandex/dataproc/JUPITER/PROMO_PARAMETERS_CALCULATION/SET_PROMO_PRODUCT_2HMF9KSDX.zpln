{
  "paragraphs": [
    {
      "text": "%md\n####Notebook \"SET_PROMO_PRODUCT\". \n####*Get product set for promo*.\n###### *Developer: [LLC Smart-Com](http://smartcom.software/), andrey.philushkin@effem.com*",
      "user": "anonymous",
      "dateUpdated": "2022-12-01 07:57:12.418",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e####Notebook \u0026ldquo;SET_PROMO_PRODUCT\u0026rdquo;. \u003c/p\u003e\n\u003cp\u003e####*Get product set for promo*.\u003c/p\u003e\n\u003ch6\u003e*Developer: \u003ca href\u003d\"http://smartcom.software/\"\u003eLLC Smart-Com\u003c/a\u003e, \u003ca href\u003d\"mailto:\u0026#97;n\u0026#100;\u0026#x72;\u0026#x65;\u0026#x79;\u0026#x2e;\u0026#112;\u0026#x68;\u0026#x69;l\u0026#117;\u0026#x73;\u0026#104;k\u0026#105;\u0026#110;\u0026#64;e\u0026#102;f\u0026#x65;\u0026#109;\u0026#x2e;\u0026#x63;\u0026#111;\u0026#109;*\"\u003e\u0026#97;n\u0026#100;\u0026#x72;\u0026#x65;\u0026#x79;\u0026#x2e;\u0026#112;\u0026#x68;\u0026#x69;l\u0026#117;\u0026#x73;\u0026#104;k\u0026#105;\u0026#110;\u0026#64;e\u0026#102;f\u0026#x65;\u0026#109;\u0026#x2e;\u0026#x63;\u0026#111;\u0026#109;*\u003c/a\u003e\u003c/h6\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1669881432418_1683056857",
      "id": "20220812-055330_539687180",
      "dateCreated": "2022-12-01 07:57:12.418",
      "status": "READY"
    },
    {
      "text": "%pyspark\nfrom pyspark.sql import SQLContext, DataFrame, Row, Window\nfrom pyspark.sql import SparkSession\nfrom pyspark.context import SparkContext\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport pyspark.sql.functions as F\nimport pandas as pd\nimport datetime, time\nimport os\nimport json",
      "user": "anonymous",
      "dateUpdated": "2022-12-01 07:57:12.418",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/text",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1669881432418_772231916",
      "id": "paragraph_1660293326638_73140893",
      "dateCreated": "2022-12-01 07:57:12.418",
      "status": "READY"
    },
    {
      "text": "%pyspark\ndef run(notInOutCalcPlanPromoDF,notInOutCalcPlanPromoProductDF,promoProductTreeDF,productDF,productTreeDF,assortmentMatrixDF,allProductDF,allProduct01DF,schema):\n    sc \u003d SparkContext.getOrCreate();\n    spark \u003d SparkSession(sc)\n    #####*Get AM Products*\n    \n    notInOutCalcPlanPromoDF \u003d notInOutCalcPlanPromoDF.withColumn(\"InOutProductIds\",upper(col(\"InOutProductIds\")))\n    setProductDF \u003d notInOutCalcPlanPromoDF\\\n      .join(promoProductTreeDF, promoProductTreeDF.PromoId \u003d\u003d notInOutCalcPlanPromoDF.Id, \u0027inner\u0027)\\\n      .join(productTreeDF, productTreeDF.ObjectId \u003d\u003d promoProductTreeDF.ProductTreeObjectId, \u0027inner\u0027)\\\n      .select(\\\n               notInOutCalcPlanPromoDF.Id.alias(\u0027promoId\u0027)\n              ,notInOutCalcPlanPromoDF.ClientTreeKeyId\n              ,notInOutCalcPlanPromoDF.DispatchesStart\n              ,promoProductTreeDF.Disabled.alias(\u0027pptDisabled\u0027)\n              ,notInOutCalcPlanPromoDF.Number.alias(\u0027pNumber\u0027)\n              ,productTreeDF.EndDate\n              ,lower(productTreeDF.FilterQuery).alias(\u0027FilterQuery\u0027)\n              ,notInOutCalcPlanPromoDF.InOutProductIds.alias(\u0027promoInOutProductIds\u0027)\n             )\\\n      .where((col(\u0027pptDisabled\u0027) \u003d\u003d \u0027false\u0027) \u0026 (col(\u0027EndDate\u0027).isNull()))\n\n    setProductDF \u003d setProductDF\\\n      .withColumn(\u0027CheckedProductList\u0027, split(setProductDF.promoInOutProductIds, \u0027;\u0027))\\\n      .drop(\u0027EndDate\u0027,\u0027promoInOutProductIds\u0027)\n\n    amProductDF \u003d setProductDF\\\n      .join(assortmentMatrixDF, \n            [\\\n              assortmentMatrixDF.ClientTreeId \u003d\u003d setProductDF.ClientTreeKeyId\n             ,assortmentMatrixDF.StartDate \u003c\u003d setProductDF.DispatchesStart\n             ,assortmentMatrixDF.EndDate \u003e\u003d setProductDF.DispatchesStart\n            ],\n            \u0027inner\u0027)\\\n      .select(setProductDF[\u0027*\u0027], assortmentMatrixDF.ProductId)\n\n    amProductDF \u003d amProductDF\\\n      .join(allProductDF, allProductDF.Id \u003d\u003d amProductDF.ProductId, \u0027inner\u0027)\\\n      .select(amProductDF[\u0027*\u0027], allProductDF.EAN_PC)\\\n      .drop(\u0027ProductId\u0027)\n\n    amProductDF \u003d amProductDF\\\n      .join(allProduct01DF, allProduct01DF.EAN_PC \u003d\u003d amProductDF.EAN_PC, \u0027inner\u0027)\\\n      .select(amProductDF[\u0027*\u0027], allProduct01DF.Id.alias(\u0027ProductId\u0027))\n\n    #####*Convert productDF to lower case*\n\n    lowerCaseProductDF \u003d productDF.select(*[lower(col(c)).name(c) for c in productDF.columns])\n    lowerCaseProductDF \u003d lowerCaseProductDF.toDF(*[c.lower() for c in lowerCaseProductDF.columns])\n\n    #####*Get Filtered Products DF*\n\n    setProductList \u003d setProductDF.collect()\n\n    filteredArray \u003d []\n    lowerCaseProductDF.registerTempTable(\"product\")\n\n    filteredProductSchema \u003d StructType([\n      StructField(\"Id\", StringType(), False),\n      StructField(\"filteredEAN_PC\", StringType(), False),\n      StructField(\"filteredZREP\", StringType(), False),\n      StructField(\"Number\", IntegerType(), False),\n      StructField(\"filteredPromoId\", StringType(), False),\n    ])\n\n    for i, item in enumerate(setProductList):\n    #   print(i, item.pNumber, item.promoId)\n      print(item.FilterQuery)\n      productFilter \u003d item.FilterQuery.replace(\u0027[\u0027+schema.lower()+\u0027].[\u0027, \u0027\u0027).replace(\u0027].[\u0027, \u0027.\u0027).replace(\u0027[\u0027, \u0027\u0027).replace(\u0027]\u0027, \u0027\u0027).replace(\u0027*\u0027, \u0027id,ean_pc,zrep\u0027)\n      filteredList \u003d spark.sql(productFilter).collect()\n    #   print(productFilter)\n    #   print(filteredList)\n      for f in filteredList:\n        filteredArray.append([f[0], f[1], f[2], item.pNumber, item.promoId])\n        \n    filteredProductDF \u003d spark.createDataFrame(filteredArray, filteredProductSchema)\n    filteredProductDF \u003d filteredProductDF.withColumn(\u0027Id\u0027,upper(col(\u0027Id\u0027))).withColumn(\u0027filteredPromoId\u0027,upper(col(\u0027filteredPromoId\u0027)))\n    \n    # display(filteredProductDF)\n\n    #####*Get Union Filtered Products DF *\n\n    resultFilteredProductDF \u003d amProductDF\\\n      .join(filteredProductDF,\n            [\\\n              filteredProductDF.Id \u003d\u003d amProductDF.ProductId\n             ,filteredProductDF.filteredPromoId \u003d\u003d amProductDF.promoId\n            ],\n            \u0027inner\u0027)\\\n      .drop(filteredProductDF.Id)\\\n      .drop(filteredProductDF.filteredEAN_PC)\n\n    resultFilteredProductDF \u003d resultFilteredProductDF.where(expr(\"array_contains(CheckedProductList, ProductId)\"))\n\n    #####*Get result product set for promoes*\n\n    notInOutCalcPlanPromoProductDF \u003d resultFilteredProductDF\\\n      .join(notInOutCalcPlanPromoProductDF, \n            [\\\n              notInOutCalcPlanPromoProductDF.ProductId \u003d\u003d resultFilteredProductDF.ProductId\n             ,notInOutCalcPlanPromoProductDF.PromoId \u003d\u003d resultFilteredProductDF.filteredPromoId\n            ],\n            \u0027full\u0027)\\\n      .select(\\\n               notInOutCalcPlanPromoProductDF[\u0027*\u0027]\n              ,resultFilteredProductDF.Number\n              ,resultFilteredProductDF.ProductId.alias(\u0027ResultFilteredProductId\u0027)\n              ,resultFilteredProductDF.filteredZREP.alias(\u0027ResultFilteredZREP\u0027)\n              ,resultFilteredProductDF.filteredPromoId.alias(\u0027pId\u0027)\n             )\\\n      .dropDuplicates()\n\n    notInOutCalcPlanPromoProductDF \u003d notInOutCalcPlanPromoProductDF\\\n      .withColumn(\u0027Action\u0027, when(notInOutCalcPlanPromoProductDF.ResultFilteredProductId.isNull(), lit(\u0027Deleted\u0027))\\\n                  .otherwise(when(notInOutCalcPlanPromoProductDF.ProductId.isNull(), lit(\u0027Added\u0027))\\\n                  .otherwise(\u0027\u0027)))\n\n    notInOutCalcPlanPromoProductDF \u003d notInOutCalcPlanPromoProductDF\\\n      .withColumn(\u0027Disabled\u0027, when(notInOutCalcPlanPromoProductDF.Action \u003d\u003d lit(\u0027Deleted\u0027), True)\\\n                  .otherwise(when(notInOutCalcPlanPromoProductDF.Action \u003d\u003d lit(\u0027Added\u0027), False).otherwise(notInOutCalcPlanPromoProductDF.Disabled)))\\\n      .withColumn(\u0027DeletedDate\u0027, when(notInOutCalcPlanPromoProductDF.Action \u003d\u003d lit(\u0027Deleted\u0027), current_timestamp())\\\n                                     .otherwise(notInOutCalcPlanPromoProductDF.DeletedDate))\\\n      .withColumn(\u0027PromoId\u0027, when(notInOutCalcPlanPromoProductDF.Action \u003d\u003d lit(\u0027Added\u0027), col(\u0027pId\u0027)).otherwise(col(\u0027PromoId\u0027)))\\\n      .withColumn(\u0027ProductId\u0027, when(notInOutCalcPlanPromoProductDF.Action \u003d\u003d lit(\u0027Added\u0027), col(\u0027ResultFilteredProductId\u0027)).otherwise(col(\u0027ProductId\u0027)))\\\n      .withColumn(\u0027ZREP\u0027, when(notInOutCalcPlanPromoProductDF.Action \u003d\u003d lit(\u0027Added\u0027), col(\u0027ResultFilteredZREP\u0027)).otherwise(col(\u0027ZREP\u0027)))\\\n      .withColumn(\u0027promoNumber\u0027, when(notInOutCalcPlanPromoProductDF.Action \u003d\u003d lit(\u0027Added\u0027), col(\u0027Number\u0027)).otherwise(col(\u0027promoNumber\u0027)))\\\n      .withColumn(\u0027AverageMarker\u0027, when(notInOutCalcPlanPromoProductDF.Action \u003d\u003d lit(\u0027Added\u0027), False).otherwise(col(\u0027AverageMarker\u0027)))\n      \n    print(notInOutCalcPlanPromoProductDF.count())\n      \n    return notInOutCalcPlanPromoProductDF  ",
      "user": "anonymous",
      "dateUpdated": "2022-12-01 10:21:09.900",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1669881432418_328899170",
      "id": "paragraph_1660292265815_1159054847",
      "dateCreated": "2022-12-01 07:57:12.418",
      "status": "READY"
    }
  ],
  "name": "SET_PROMO_PRODUCT",
  "id": "2HMF9KSDX",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}