{
  "paragraphs": [
    {
      "text": "%md\r\n####Notebook \"PI_PLAN_PRODUCT_PARAMS_CALCULATION_PROCESS\". \r\n####*Calculate plan price increase product parameters and plan promo baseline, incremental and LSV*.\r\n###### *Developer: [LLC Smart-Com](http://smartcom.software/), andrey.philushkin@effem.com*",
      "user": "anonymous",
      "dateUpdated": "2023-05-01T13:10:03+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1682946603269_2061109587",
      "id": "paragraph_1681786789933_692695704",
      "dateCreated": "2023-05-01T13:10:03+0000",
      "status": "READY",
      "focus": true,
      "$$hashKey": "object:10990"
    },
    {
      "text": "%pyspark\r\nfrom pyspark.sql import SQLContext, DataFrame, Row, Window\r\nfrom pyspark.sql import SparkSession\r\nfrom pyspark.context import SparkContext\r\nfrom pyspark.sql.types import *\r\nfrom pyspark.sql.functions import *\r\nimport pyspark.sql.functions as F\r\nimport pandas as pd\r\nimport datetime, time\r\nimport os\r\nimport json",
      "user": "anonymous",
      "dateUpdated": "2023-05-01T13:10:03+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1682946603269_1654947164",
      "id": "paragraph_1681786788304_2049830928",
      "dateCreated": "2023-05-01T13:10:03+0000",
      "status": "READY",
      "$$hashKey": "object:10991"
    },
    {
      "text": "%pyspark\r\ndef run(calcPlanPromoProductDF,planParamsPriceListDF,planParamsIncreasePriceListDF,planParamsBaselineDF,planParamsIncreaseBaselineDF,calcPlanPromoDF,allCalcPlanPromoDF,planParamsSharesDF,datesDF,planParamsCorrectionDF,planParamsIncrementalDF,planParametersStatuses,promoProductCols):\r\n    sc = SparkContext.getOrCreate();\r\n    spark = SparkSession(sc)\r\n    \r\n    \r\n    byPriceStartDate = (Window.partitionBy('PromoPriceIncreaseId', 'ProductId').orderBy(col(\"priceStartDate\").desc()))\r\n\r\n    # calcPlanPromoProductDF = calcPlanPromoProductDF.drop('Price')\r\n    \r\n    #Increase Price\r\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\r\n      .join(planParamsIncreasePriceListDF, \r\n            [\\\r\n              planParamsIncreasePriceListDF.priceStartDate <= calcPlanPromoProductDF.promoDispatchesStart,\r\n              planParamsIncreasePriceListDF.priceEndDate >= calcPlanPromoProductDF.promoDispatchesStart,\r\n              planParamsIncreasePriceListDF.priceClientTreeId == calcPlanPromoProductDF.promoClientTreeKeyId,\r\n              planParamsIncreasePriceListDF.priceProductId == calcPlanPromoProductDF.ProductId\r\n            ], \r\n            'left')\\\r\n      .select(\\\r\n               calcPlanPromoProductDF['*']\r\n              ,planParamsIncreasePriceListDF.priceStartDate\r\n              ,planParamsIncreasePriceListDF.Price.alias('calcPrice')\r\n             )\\\r\n      .withColumn('Row_Number', row_number().over(byPriceStartDate))\\\r\n      .where(col('Row_Number') == 1).drop('Row_Number')\r\n\r\n    \r\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\r\n      .withColumn('IncreaseFound', when(col('calcPrice').isNull(),lit('false')).otherwise(lit('true')))\\\r\n      .withColumn('Price', col('calcPrice'))\\\r\n      .drop('calcPrice')\\\r\n      .drop('priceStartDate')\r\n\r\n    #Regular Price\r\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\r\n      .join(planParamsPriceListDF, \r\n            [\\\r\n              planParamsPriceListDF.priceStartDate <= calcPlanPromoProductDF.promoDispatchesStart,\r\n              planParamsPriceListDF.priceEndDate >= calcPlanPromoProductDF.promoDispatchesStart,\r\n              planParamsPriceListDF.priceClientTreeId == calcPlanPromoProductDF.promoClientTreeKeyId,\r\n              planParamsPriceListDF.priceProductId == calcPlanPromoProductDF.ProductId\r\n            ], \r\n            'left')\\\r\n      .select(\\\r\n               calcPlanPromoProductDF['*']\r\n              ,planParamsPriceListDF.priceStartDate\r\n              ,planParamsPriceListDF.Price.alias('calcPrice')\r\n             )\\\r\n      .withColumn('Row_Number', row_number().over(byPriceStartDate))\\\r\n      .where(col('Row_Number') == 1).drop('Row_Number')\r\n\r\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\r\n      .withColumn('Price', when(col('Price').isNull(),col('calcPrice')).otherwise(col('Price')))\\\r\n      .drop('calcPrice')\r\n\r\n    #product price logging\r\n    logPricePromoProductDF = calcPlanPromoProductDF\\\r\n      .select(\\\r\n               calcPlanPromoProductDF.promoNumber\r\n              ,calcPlanPromoProductDF.ZREP\r\n              ,calcPlanPromoProductDF.Price\r\n             )\\\r\n      .withColumn('NullPrice', when(calcPlanPromoProductDF.Price.isNull(), True).otherwise(None))\\\r\n      .withColumn('ZeroPrice', when(calcPlanPromoProductDF.Price == 0, True).otherwise(None))\r\n\r\n    logNullPricePromoDF = logPricePromoProductDF\\\r\n      .where(col('NullPrice') == True)\\\r\n      .groupBy('promoNumber')\\\r\n      .agg(concat_ws(';', collect_list(col('ZREP'))).alias('nullPriceMessage'))\r\n\r\n    logZeroPricePromoDF = logPricePromoProductDF\\\r\n      .where(col('ZeroPrice') == True)\\\r\n      .groupBy('promoNumber')\\\r\n      .agg(concat_ws(';', collect_list(col('ZREP'))).alias('zeroPriceMessage'))\r\n\r\n    logPricePromoDF = logNullPricePromoDF\\\r\n      .join(logZeroPricePromoDF, 'promoNumber', 'full')\r\n    #---\r\n\r\n    calcPlanPromoProductDF = calcPlanPromoProductDF.fillna(0, 'Price')\r\n\r\n    #####*Set product baseline*\r\n\r\n    # calcPlanPromoProductDF = calcPlanPromoProductDF.drop('PlanProductBaselineCaseQty')\r\n\r\n    # set product shares\r\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\r\n      .join(planParamsSharesDF,\r\n           [\\\r\n             planParamsSharesDF.BrandTechId == calcPlanPromoProductDF.promoBrandTechId\r\n            ,planParamsSharesDF.ClientTreeId == calcPlanPromoProductDF.promoClientTreeKeyId\r\n            ,planParamsSharesDF.ParentClientTreeDemandCode == calcPlanPromoProductDF.promoDemandCode\r\n           ],\r\n           'left')\\\r\n      .select(\\\r\n               calcPlanPromoProductDF['*']\r\n              ,planParamsSharesDF.Share.cast(DecimalType(30,6)).alias('productShare')\r\n             )\r\n\r\n    #product share logging\r\n    logSharePromoProductDF = calcPlanPromoProductDF\\\r\n      .select(\\\r\n               calcPlanPromoProductDF.promoNumber\r\n              ,calcPlanPromoProductDF.ZREP\r\n              ,calcPlanPromoProductDF.productShare\r\n             )\\\r\n      .withColumn('NullShare', when(calcPlanPromoProductDF.productShare.isNull(), True).otherwise(None))\\\r\n      .withColumn('ZeroShare', when(calcPlanPromoProductDF.productShare == 0, True).otherwise(None))\r\n\r\n    logNullSharePromoDF = logSharePromoProductDF\\\r\n      .where(col('NullShare') == True)\\\r\n      .groupBy('promoNumber')\\\r\n      .agg(concat_ws(';', collect_list(col('ZREP'))).alias('nullShareMessage'))\r\n\r\n    logZeroSharePromoDF = logSharePromoProductDF\\\r\n      .where(col('ZeroShare') == True)\\\r\n      .groupBy('promoNumber')\\\r\n      .agg(concat_ws(';', collect_list(col('ZREP'))).alias('zeroShareMessage'))\r\n\r\n    logSharePromoDF = logNullSharePromoDF\\\r\n      .join(logZeroSharePromoDF, 'promoNumber', 'full')\r\n\r\n    logPromoProductDF = logPricePromoDF\\\r\n      .join(logSharePromoDF, 'promoNumber', 'full')\r\n    # ---\r\n\r\n    calcPlanPromoProductDF = calcPlanPromoProductDF.fillna(0, 'productShare')\r\n    # ---\r\n\r\n    # split promo duration by weeks\r\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\r\n      .join(datesDF, \r\n            [\\\r\n              datesDF.OriginalDate >= calcPlanPromoProductDF.promoStartDate\r\n             ,datesDF.OriginalDate <= calcPlanPromoProductDF.promoEndDate\r\n            ], \r\n            'inner')\\\r\n      .select(\\\r\n              calcPlanPromoProductDF['*']\r\n             ,datesDF.MarsWeekFullName\r\n             ,datesDF.MarsDay\r\n             )\r\n\r\n    cols = calcPlanPromoProductDF.columns\r\n    cols.remove('MarsDay')\r\n\r\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\r\n      .groupBy(cols)\\\r\n      .agg(count('*').cast(DecimalType(30,6)).alias('promoDaysInWeek'))\r\n    #  ---\r\n    \r\n    \r\n    # set product baseline\r\n    planParamsBaselineDF = planParamsBaselineDF\\\r\n      .join(datesDF, planParamsBaselineDF.baselineStartDate == datesDF.OriginalDate, 'inner')\\\r\n      .select(\\\r\n              planParamsBaselineDF['*']\r\n             ,datesDF.MarsWeekFullName\r\n             )\r\n    \r\n    planParamsIncreaseBaselineDF = planParamsIncreaseBaselineDF\\\r\n      .join(datesDF, planParamsIncreaseBaselineDF.baselineStartDate == datesDF.OriginalDate, 'inner')\\\r\n      .select(\\\r\n              planParamsIncreaseBaselineDF['*']\r\n             ,datesDF.MarsWeekFullName\r\n             )\r\n\r\n    calcRegularPlanPromoProductDF = calcPlanPromoProductDF\\\r\n      .where(col('IncreaseFound') == 'false')\\\r\n      .join(planParamsBaselineDF, \r\n           [\\\r\n             planParamsBaselineDF.baselineProductId == calcPlanPromoProductDF.ProductId\r\n            ,planParamsBaselineDF.baselineDemandCode == calcPlanPromoProductDF.promoDemandCode\r\n            ,planParamsBaselineDF.MarsWeekFullName == calcPlanPromoProductDF.MarsWeekFullName\r\n           ],\r\n           'left')\r\n    \r\n    calcIncreasePlanPromoProductDF = calcPlanPromoProductDF\\\r\n      .where(col('IncreaseFound') == 'true')\\\r\n      .join(planParamsIncreaseBaselineDF, \r\n           [\\\r\n             planParamsIncreaseBaselineDF.baselineProductId == calcPlanPromoProductDF.ProductId\r\n            ,planParamsIncreaseBaselineDF.baselineDemandCode == calcPlanPromoProductDF.promoDemandCode\r\n            ,planParamsIncreaseBaselineDF.MarsWeekFullName == calcPlanPromoProductDF.MarsWeekFullName\r\n           ],\r\n           'left')\r\n\r\n    calcPlanPromoProductDF = calcRegularPlanPromoProductDF.union(calcIncreasePlanPromoProductDF)\r\n\r\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\r\n      .fillna(0, ['SellInBaselineQTY', 'SellOutBaselineQTY'])\\\r\n      .drop('MarsWeekFullName')\r\n\r\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\r\n      .withColumn(\\\r\n                   'weeklyBaseline'\r\n                  ,when(col('promoIsOnInvoice') == 'True', ((col('SellInBaselineQTY') * col('promoDaysInWeek') / 7.0) * (col('productShare') / 100.0)).cast(DecimalType(30,6)))\r\n                       .otherwise(((col('SellOutBaselineQTY') * col('promoDaysInWeek') / 7.0) * (col('productShare') / 100.0)).cast(DecimalType(30,6)))\r\n                 )\\\r\n      .drop('baselineDemandCode', 'baselineProductId', 'baselineStartDate', 'promoDaysInWeek', 'SellInBaselineQTY', 'SellOutBaselineQTY')\r\n      \r\n    cols = calcPlanPromoProductDF.columns\r\n    cols.remove('weeklyBaseline')\r\n\r\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\r\n      .groupBy(cols)\\\r\n      .agg(sum('weeklyBaseline').cast(DecimalType(30,6)).alias('calcPlanProductBaselineCaseQty'))\r\n\r\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\r\n      .withColumn('PlanProductBaselineCaseQty', col('calcPlanProductBaselineCaseQty').cast(DecimalType(30,6)))\\\r\n      .drop('calcPlanProductBaselineCaseQty')\r\n\r\n    #product baseline qty logging\r\n    logBaselineQtyPromoProductDF = calcPlanPromoProductDF\\\r\n      .select(\\\r\n               calcPlanPromoProductDF.promoNumber\r\n              ,calcPlanPromoProductDF.ZREP\r\n              ,calcPlanPromoProductDF.PlanProductBaselineCaseQty\r\n             )\\\r\n      .withColumn('ZeroBaselineQty', when(calcPlanPromoProductDF.PlanProductBaselineCaseQty == 0, True).otherwise(None))\r\n\r\n    logZeroBaselineQtyPromoDF = logBaselineQtyPromoProductDF\\\r\n      .where(col('ZeroBaselineQty') == True)\\\r\n      .groupBy('promoNumber')\\\r\n      .agg(concat_ws(';', collect_list(col('ZREP'))).alias('zeroBaselineQtyMessage'))\r\n\r\n    logPromoProductDF = logPromoProductDF\\\r\n      .join(logZeroBaselineQtyPromoDF, 'promoNumber', 'full')\r\n    # ---\r\n\r\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\r\n      .withColumn('PlanProductBaselineLSV', (col('PlanProductBaselineCaseQty') * col('Price')).cast(DecimalType(30,6)))\r\n    #  ---\r\n\r\n    #####*Calculate plan product parameters*\r\n    #??\r\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\r\n      .join(planParamsCorrectionDF, planParamsCorrectionDF.correctionPromoProductPriceIncreaseId == calcPlanPromoProductDF.Id, 'left')\\\r\n      .select(\\\r\n               calcPlanPromoProductDF['*']\r\n              ,when(planParamsCorrectionDF.correctionPlanProductUpliftPercentCorrected.isNull(), calcPlanPromoProductDF.PlanProductUpliftPercent)\\\r\n                    .otherwise(planParamsCorrectionDF.correctionPlanProductUpliftPercentCorrected).cast(DecimalType(30,6)).alias('productUpliftPercent')\r\n             )\r\n\r\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\r\n      .withColumn('PlanProductIncrementalLSV', (col('PlanProductBaselineLSV') * col('productUpliftPercent') / 100.0).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanProductLSV', (col('PlanProductBaselineLSV') + col('PlanProductIncrementalLSV')).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanProductPCPrice', (col('Price') / col('UOM_PC2Case')).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanProductIncrementalCaseQty', (col('PlanProductBaselineCaseQty') * col('productUpliftPercent') / 100.0).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanProductCaseQty', (col('PlanProductBaselineCaseQty') + col('PlanProductIncrementalCaseQty')).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanProductPCQty', (col('PlanProductCaseQty') * col('UOM_PC2Case')).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanProductCaseLSV', (col('PlanProductBaselineCaseQty') * col('Price')).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanProductPCLSV', (col('PlanProductCaseLSV') / col('UOM_PC2Case')).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanProductPostPromoEffectQtyW1', (col('PlanProductBaselineCaseQty') * col('promoClientPostPromoEffectW1') / 100.0).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanProductPostPromoEffectQtyW1', when(col('PlanProductPostPromoEffectQtyW1').isNull(), 0)\\\r\n                  .otherwise(col('PlanProductPostPromoEffectQtyW1')).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanProductPostPromoEffectQtyW2', (col('PlanProductBaselineCaseQty') * col('promoClientPostPromoEffectW2') / 100.0).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanProductPostPromoEffectQtyW2', when(col('PlanProductPostPromoEffectQtyW2').isNull(), 0)\\\r\n                  .otherwise(col('PlanProductPostPromoEffectQtyW2')).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanProductPostPromoEffectQty', (col('PlanProductPostPromoEffectQtyW1') + col('PlanProductPostPromoEffectQtyW2')).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanProductPostPromoEffectLSVW1', (col('PlanProductBaselineLSV') * col('promoClientPostPromoEffectW1') / 100.0).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanProductPostPromoEffectLSVW1', when(col('PlanProductPostPromoEffectLSVW1').isNull(), 0)\\\r\n                  .otherwise(col('PlanProductPostPromoEffectLSVW1')).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanProductPostPromoEffectLSVW2', (col('PlanProductBaselineLSV') * col('promoClientPostPromoEffectW2') / 100.0).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanProductPostPromoEffectLSVW2', when(col('PlanProductPostPromoEffectLSVW2').isNull(), 0)\\\r\n                  .otherwise(col('PlanProductPostPromoEffectLSVW2')).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanProductPostPromoEffectLSV', (col('PlanProductPostPromoEffectLSVW1') + col('PlanProductPostPromoEffectLSVW2')).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanProductBaselineVolume', (col('PlanProductBaselineCaseQty') * col('CaseVolume')).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanProductIncrementalVolume', when(col('promoInOut') == 'True', col('PlanProductIncrementalCaseQty') * col('CaseVolume'))\\\r\n                                                          .otherwise(0).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanProductPostPromoEffectVolumeW1', (col('PlanProductBaselineVolume') * col('promoClientPostPromoEffectW1') / 100).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanProductPostPromoEffectVolumeW2', (col('PlanProductBaselineVolume') * col('promoClientPostPromoEffectW2') / 100).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanProductPostPromoEffectVolume', (col('PlanProductPostPromoEffectVolumeW1') + col('PlanProductPostPromoEffectVolumeW2')).cast(DecimalType(30,6)))\r\n\r\n    #####*Calculate PlanPromoIncrementalLSV, PlanPromoBaselineLSV, PlanPromoLSV*\r\n\r\n    sumPlanProductParamsList = calcPlanPromoProductDF\\\r\n      .select(\\\r\n               col('promoNumber')\r\n              ,col('PlanProductIncrementalLSV')\r\n              ,col('PlanProductBaselineLSV')\r\n              ,col('PlanProductBaselineVolume')\r\n              ,col('PlanProductIncrementalVolume')\r\n              ,col('PlanProductLSV')\r\n             )\\\r\n      .groupBy('promoNumber')\\\r\n      .agg(sum('PlanProductIncrementalLSV').alias('calcPlanPromoIncrementalLSV'),\r\n           sum('PlanProductBaselineLSV').alias('calcPlanPromoBaselineLSV'),\r\n           sum('PlanProductIncrementalVolume').alias('calcPlanProductIncrementalVolume'),\r\n           sum('PlanProductBaselineVolume').alias('calcPlanProductBaselineVolume'))\\\r\n      .withColumn('tempPlanPromoIncrementalLSV', when(col('calcPlanPromoIncrementalLSV').isNull(), 0).otherwise(col('calcPlanPromoIncrementalLSV')))\\\r\n      .withColumn('tempPlanPromoBaselineLSV', when(col('calcPlanPromoBaselineLSV').isNull(), 0).otherwise(col('calcPlanPromoBaselineLSV')))\\\r\n      .withColumn('calcPlanPromoLSV', col('tempPlanPromoIncrementalLSV') + col('tempPlanPromoBaselineLSV'))\\\r\n      .withColumn('calcPlanProductBaselineVolume', when(col('calcPlanProductBaselineVolume').isNull(), 0).otherwise(col('calcPlanProductBaselineVolume')))\\\r\n      .withColumn('calcPlanProductIncrementalVolume', when(col('calcPlanProductIncrementalVolume').isNull(), 0).otherwise(col('calcPlanProductIncrementalVolume')))\\\r\n      .drop('tempPlanPromoIncrementalLSV','tempPlanPromoBaselineLSV')\r\n\r\n    sumPlanProductParamsList = sumPlanProductParamsList.collect()\r\n\r\n    planParSchema = StructType([\r\n      StructField(\"promoNumber\", StringType(), True),\r\n      StructField(\"calcPlanPromoIncrementalLSV\", DecimalType(30,6), True),\r\n      StructField(\"calcPlanPromoBaselineLSV\", DecimalType(30,6), True),\r\n      StructField(\"calcPlanProductIncrementalVolume\", DecimalType(30,6), True),\r\n      StructField(\"calcPlanProductBaselineVolume\", DecimalType(30,6), True),\r\n      StructField(\"calcPlanPromoLSV\", DecimalType(30,6), True)\r\n    ])\r\n\r\n    planParDF = spark.createDataFrame(sumPlanProductParamsList, planParSchema)\r\n\r\n    calcPlanPromoDF = calcPlanPromoDF\\\r\n      .join(planParDF, planParDF.promoNumber == calcPlanPromoDF.Number, 'inner')\r\n\r\n    @udf\r\n    def isNullCheck(value):\r\n      if value is None:\r\n        return 0\r\n      else:\r\n        return value\r\n        \r\n    allCalcPlanPromoDF = allCalcPlanPromoDF\\\r\n      .join(calcPlanPromoDF, 'Id', 'left')\\\r\n      .select(\\\r\n               allCalcPlanPromoDF['*']\r\n              ,calcPlanPromoDF.calcPlanPromoIncrementalLSV\r\n              ,calcPlanPromoDF.calcPlanPromoBaselineLSV\r\n              ,calcPlanPromoDF.calcPlanPromoLSV\r\n              ,calcPlanPromoDF.calcPlanProductBaselineVolume\r\n              ,calcPlanPromoDF.calcPlanProductIncrementalVolume\r\n             )\\\r\n      .withColumn('PlanPromoIncrementalLSV', when(calcPlanPromoDF.calcPlanPromoIncrementalLSV.isNull(), allCalcPlanPromoDF.PlanPromoIncrementalLSV)\\\r\n                                             .otherwise(calcPlanPromoDF.calcPlanPromoIncrementalLSV).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoBaselineLSV', when(calcPlanPromoDF.calcPlanPromoBaselineLSV.isNull(), allCalcPlanPromoDF.PlanPromoBaselineLSV)\\\r\n                                             .otherwise(calcPlanPromoDF.calcPlanPromoBaselineLSV).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoLSV', when(calcPlanPromoDF.calcPlanPromoLSV.isNull(), allCalcPlanPromoDF.PlanPromoLSV)\\\r\n                                             .otherwise(calcPlanPromoDF.calcPlanPromoLSV).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoPostPromoEffectLSV', (isNullCheck(col('PlanPromoBaselineLSV')) * isNullCheck(col('promoClientPostPromoEffectW1')) / 100.0 \\\r\n                                                + isNullCheck(col('PlanPromoBaselineLSV')) * isNullCheck(col('promoClientPostPromoEffectW2')) / 100.0)\\\r\n                                              .cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoBaselineVolume', when(calcPlanPromoDF.calcPlanProductBaselineVolume.isNull(), allCalcPlanPromoDF.PlanPromoBaselineVolume)\\\r\n                                             .otherwise(calcPlanPromoDF.calcPlanProductBaselineVolume).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoIncrementalVolume', when(col('InOut') == 'False', col('PlanPromoBaselineVolume') * col('PlanPromoUpliftPercent') / 100).otherwise(col('calcPlanProductIncrementalVolume')).cast(DecimalType(30,6)))\\\r\n      .drop('calcPlanPromoIncrementalLSV','calcPlanPromoBaselineLSV','calcPlanPromoLSV','calcPlanProductBaselineVolume')\r\n      \r\n    allCalcPlanPromoDF = allCalcPlanPromoDF\\\r\n      .withColumn('PlanPromoTIShopper', (col('PlanPromoLSV') * col('MarsMechanicDiscount') / 100).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoCost', (isNullCheck(col('PlanPromoTIShopper')) + isNullCheck(col('PlanPromoTIMarketing')) + isNullCheck(col('PlanPromoBranding'))\\\r\n                                  + isNullCheck(col('PlanPromoBTL')) + isNullCheck(col('PlanPromoCostProduction'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoIncrementalBaseTI', (col('PlanPromoIncrementalLSV') * col('PlanTIBasePercent') / 100).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoIncrementalCOGS', (col('PlanPromoIncrementalLSV') * col('PlanCOGSPercent') / 100).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoBaseTI', (col('PlanPromoLSV') * col('PlanTIBasePercent') / 100).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoTotalCost', (isNullCheck(col('PlanPromoCost')) + isNullCheck(col('PlanPromoBaseTI'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoPostPromoEffectLSVW1', (isNullCheck(col('PlanPromoBaselineLSV')) * isNullCheck(col('promoClientPostPromoEffectW1')) / 100.0).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoPostPromoEffectLSVW2', (col('PlanPromoBaselineLSV') * col('promoClientPostPromoEffectW2') / 100.0).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoNetIncrementalLSV', (isNullCheck(col('PlanPromoIncrementalLSV')) + isNullCheck(col('PlanPromoPostPromoEffectLSV'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoNetLSV', (isNullCheck(col('PlanPromoBaselineLSV')) + isNullCheck(col('PlanPromoNetIncrementalLSV'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoNetIncrementalBaseTI', (col('PlanPromoNetIncrementalLSV') * col('PlanTIBasePercent') / 100.0).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoNetIncrementalCOGS', (col('PlanPromoNetIncrementalLSV') * col('PlanCOGSPercent') / 100.0).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoNetBaseTI', (col('PlanPromoNetLSV') * col('PlanTIBasePercent') / 100.0).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoBaselineBaseTI', (col('PlanPromoBaselineLSV') * col('PlanTIBasePercent') / 100.0).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoNSV', (isNullCheck(col('PlanPromoLSV')) - isNullCheck(col('PlanPromoTIShopper'))\\\r\n                                 - isNullCheck(col('PlanPromoTIMarketing')) - isNullCheck(col('PlanPromoBaseTI'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoIncrementalNSV', (isNullCheck(col('PlanPromoIncrementalLSV')) - isNullCheck(col('PlanPromoTIShopper'))\\\r\n                                            - isNullCheck(col('PlanPromoTIMarketing')) - isNullCheck(col('PlanPromoIncrementalBaseTI'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoNetIncrementalNSV', (isNullCheck(col('PlanPromoNetIncrementalLSV')) - isNullCheck(col('PlanPromoTIShopper'))\\\r\n                                               - isNullCheck(col('PlanPromoTIMarketing')) - isNullCheck(col('PlanPromoNetIncrementalBaseTI'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoNetIncrementalMACLSV', (isNullCheck(col('PlanPromoNetIncrementalNSV'))\\\r\n                                               - isNullCheck(col('PlanPromoNetIncrementalCOGS'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoNetNSV', (isNullCheck(col('PlanPromoNetLSV')) - isNullCheck(col('PlanPromoTIShopper'))\\\r\n                                    - isNullCheck(col('PlanPromoTIMarketing')) - isNullCheck(col('PlanPromoNetBaseTI'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoIncrementalMACLSV', (isNullCheck(col('PlanPromoIncrementalNSV')) - isNullCheck(col('PlanPromoIncrementalCOGS'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoIncrementalEarningsLSV', (isNullCheck(col('PlanPromoIncrementalMACLSV')) - isNullCheck(col('PlanPromoBranding'))\\\r\n                                                 - isNullCheck(col('PlanPromoBTL')) - isNullCheck(col('PlanPromoCostProduction'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoNetIncrementalEarningsLSV', (isNullCheck(col('PlanPromoNetIncrementalMACLSV')) - isNullCheck(col('PlanPromoBranding'))\\\r\n                                                    - isNullCheck(col('PlanPromoBTL')) - isNullCheck(col('PlanPromoCostProduction'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoROIPercentLSV', when(col('PlanPromoCost') != 0, (col('PlanPromoIncrementalEarningsLSV') / col('PlanPromoCost') + 1) * 100.0)\\\r\n                                              .otherwise(0).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoNetROIPercentLSV', when(col('PlanPromoCost') != 0, (col('PlanPromoNetIncrementalEarningsLSV') / col('PlanPromoCost') + 1) * 100.0)\\\r\n                                              .otherwise(0).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoNetUpliftPercent', when(col('PlanPromoBaselineLSV') != 0, (col('PlanPromoNetIncrementalLSV') / col('PlanPromoBaselineLSV')) * 100.0)\\\r\n                                              .otherwise(0).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanAddTIShopperCalculated', (isNullCheck(col('PlanPromoTIShopper')) - isNullCheck(col('PlanPromoNetIncrementalLSV')) * col('RATIShopperPercent') / 100)\\\r\n                  .cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanAddTIShopperApproved', when(col('LastApprovedDate').isNull(), col('PlanAddTIShopperCalculated')).otherwise(col('PlanAddTIShopperApproved')))\\\r\n      .withColumn('PlanPromoPostPromoEffectVolumeW1', (isNullCheck(col('PlanPromoBaselineVolume')) * isNullCheck(col('promoClientPostPromoEffectW1')) / 100).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoPostPromoEffectVolumeW2', (isNullCheck(col('PlanPromoBaselineVolume')) * isNullCheck(col('promoClientPostPromoEffectW2')) / 100).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoPostPromoEffectVolume',  (isNullCheck(col('PlanPromoPostPromoEffectVolumeW1')) + isNullCheck(col('PlanPromoPostPromoEffectVolumeW2'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoNetIncrementalVolume', (col('PlanPromoIncrementalVolume') + col('PlanPromoPostPromoEffectVolume')).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoIncrementalCOGSTn', (col('PlanPromoIncrementalVolume') * col('PlanCOGSTn')).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoNetIncrementalCOGSTn', (col('PlanPromoNetIncrementalVolume') * col('PlanCOGSTn')).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoNetIncrementalMAC', (isNullCheck(col('PlanPromoNetIncrementalNSV')) - isNullCheck(col('PlanPromoNetIncrementalCOGSTn'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoIncrementalEarnings', ((isNullCheck(col('PlanPromoIncrementalMAC')) - isNullCheck(col('PlanPromoBranding'))\\\r\n                                                 - isNullCheck(col('PlanPromoBTL')) - isNullCheck(col('PlanPromoCostProduction')))).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoNetIncrementalEarnings', ((isNullCheck(col('PlanPromoNetIncrementalMAC')) - isNullCheck(col('PlanPromoBranding'))\\\r\n                                                 - isNullCheck(col('PlanPromoBTL')) - isNullCheck(col('PlanPromoCostProduction')))).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoROIPercent', (when(col(\"PlanPromoCost\") != 0, (col('PlanPromoIncrementalEarnings') / col('PlanPromoCost') + 1) * 100.0)\\\r\n                                              .otherwise(0)).cast(DecimalType(30,6)))\\\r\n      .withColumn('PlanPromoNetROIPercent', (when(col(\"PlanPromoCost\") != 0, (col('PlanPromoNetIncrementalEarnings') / col('PlanPromoCost') + 1) * 100.0)\\\r\n                                              .otherwise(0)).cast(DecimalType(30,6)))\r\n\r\n    #####*Get result*\r\n\r\n    # newPromoProductDF = calcPlanPromoProductDF.where(col('Action') == 'Added').select(promoProductCols)\r\n    calcPlanPromoProductDF = calcPlanPromoProductDF.select(promoProductCols)\r\n    print('Plan product parameters calculation completed!')\r\n    \r\n    return calcPlanPromoProductDF,calcPlanPromoDF,allCalcPlanPromoDF,logPromoProductDF",
      "user": "anonymous",
      "dateUpdated": "2023-05-02T11:09:30+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1682946603269_1562935048",
      "id": "paragraph_1681786763148_587263925",
      "dateCreated": "2023-05-01T13:10:03+0000",
      "status": "READY",
      "$$hashKey": "object:10992"
    }
  ],
  "name": "JUPITER/PROMO_PARAMETERS_CALCULATION/PI_PLAN_PRODUCT_PARAMS_CALCULATION_PROCESS",
  "id": "2HYEQ4SFZ",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {}
}