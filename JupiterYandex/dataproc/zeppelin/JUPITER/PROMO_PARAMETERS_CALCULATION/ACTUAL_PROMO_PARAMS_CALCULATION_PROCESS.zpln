{
  "paragraphs": [
    {
      "text": "%md\n####Notebook \"ACTUAL_PROMO_PARAMS_CALCULATION_PROCESS\". \n####*Calculate actual promo parameters*.\n###### *Developer: [LLC Smart-Com](http://smartcom.software/), andrey.philushkin@effem.com*",
      "user": "anonymous",
      "dateUpdated": "2022-08-15 09:03:27.736",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e####Notebook \u0026ldquo;ACTUAL_PROMO_PARAMS_CALCULATION_PROCESS\u0026rdquo;. \u003c/p\u003e\n\u003cp\u003e####*Calculate actual promo parameters*.\u003c/p\u003e\n\u003ch6\u003e*Developer: \u003ca href\u003d\"http://smartcom.software/\"\u003eLLC Smart-Com\u003c/a\u003e, \u003ca href\u003d\"mailto:\u0026#x61;\u0026#x6e;\u0026#100;\u0026#x72;\u0026#101;\u0026#121;.\u0026#112;\u0026#x68;\u0026#x69;l\u0026#x75;\u0026#115;\u0026#104;\u0026#107;\u0026#x69;\u0026#110;@\u0026#x65;\u0026#102;\u0026#102;\u0026#x65;\u0026#109;\u0026#x2e;\u0026#99;\u0026#111;\u0026#109;\u0026#x2a;\"\u003e\u0026#x61;\u0026#x6e;\u0026#100;\u0026#x72;\u0026#101;\u0026#121;.\u0026#112;\u0026#x68;\u0026#x69;l\u0026#x75;\u0026#115;\u0026#104;\u0026#107;\u0026#x69;\u0026#110;@\u0026#x65;\u0026#102;\u0026#102;\u0026#x65;\u0026#109;\u0026#x2e;\u0026#99;\u0026#111;\u0026#109;\u0026#x2a;\u003c/a\u003e\u003c/h6\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660554207736_1507728345",
      "id": "20220815-090327_63030900",
      "dateCreated": "2022-08-15 09:03:27.736",
      "status": "READY"
    },
    {
      "text": "%pyspark\nfrom pyspark.sql import SQLContext, DataFrame, Row, Window\nfrom pyspark.sql import SparkSession\nfrom pyspark.context import SparkContext\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport pyspark.sql.functions as F\nimport pandas as pd\nimport datetime, time\nimport os\nimport json",
      "user": "anonymous",
      "dateUpdated": "2022-08-15 10:49:36.219",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660554207737_1486283282",
      "id": "20220815-090327_1171898177",
      "dateCreated": "2022-08-15 09:03:27.737",
      "status": "READY"
    },
    {
      "text": "%pyspark\r\ndef run(clientTreeDF,cogsDF,brandTechDF,cogsTnDF,tiDF,ratiShopperDF,calcActualPromoDF,promoDF,actualCogsDF,actualCogsTnDF,actualTiDF):\r\n    sc \u003d SparkContext.getOrCreate()\r\n    spark \u003d SparkSession(sc)\r\n\r\n    #####*Set COGS\u0026TI Percent*\r\n\r\n    activeClientTreeList \u003d clientTreeDF.where(col(\u0027EndDate\u0027).isNull()).collect()\r\n\r\n    cogsClientDF \u003d cogsDF\\\r\n      .join(clientTreeDF, clientTreeDF.Id \u003d\u003d cogsDF.ClientTreeId, \u0027inner\u0027)\\\r\n      .join(brandTechDF, brandTechDF.Id \u003d\u003d cogsDF.BrandTechId, \u0027inner\u0027)\\\r\n      .select(\\\r\n               cogsDF.StartDate.alias(\u0027cogsStartDate\u0027)\r\n              ,cogsDF.EndDate.alias(\u0027cogsEndDate\u0027)\r\n              ,cogsDF.LSVpercent\r\n              ,clientTreeDF.ObjectId.alias(\u0027cogsClientTreeObjectId\u0027)\r\n              ,brandTechDF.BrandsegTechsub.alias(\u0027cbtName\u0027)\r\n             )\r\n\r\n    cogsClientList \u003d cogsClientDF.collect()\r\n\r\n    cogsClientTnDF \u003d cogsTnDF\\\r\n      .join(clientTreeDF, clientTreeDF.Id \u003d\u003d cogsTnDF.ClientTreeId, \u0027inner\u0027)\\\r\n      .join(brandTechDF, brandTechDF.Id \u003d\u003d cogsTnDF.BrandTechId, \u0027inner\u0027)\\\r\n      .select(\\\r\n               cogsTnDF.StartDate.alias(\u0027cogsStartDate\u0027)\r\n              ,cogsTnDF.EndDate.alias(\u0027cogsEndDate\u0027)\r\n              ,cogsTnDF.TonCost\r\n              ,clientTreeDF.ObjectId.alias(\u0027cogsClientTreeObjectId\u0027)\r\n              ,brandTechDF.BrandsegTechsub.alias(\u0027cbtName\u0027)\r\n             )\r\n\r\n    cogsTnClientList \u003d cogsClientTnDF.collect()\r\n\r\n    tiClientNullBtDF \u003d tiDF\\\r\n      .join(clientTreeDF, clientTreeDF.Id \u003d\u003d tiDF.ClientTreeId, \u0027inner\u0027)\\\r\n      .select(\\\r\n               tiDF.StartDate.alias(\u0027tiStartDate\u0027)\r\n              ,tiDF.EndDate.alias(\u0027tiEndDate\u0027)\r\n              ,tiDF.SizePercent\r\n              ,clientTreeDF.ObjectId.alias(\u0027tiClientTreeObjectId\u0027)\r\n             )\\\r\n      .withColumn(\u0027tibtName\u0027, lit(None).cast(StringType()))\r\n\r\n    tiClientNotNullBtDF \u003d tiDF\\\r\n      .join(clientTreeDF, clientTreeDF.Id \u003d\u003d tiDF.ClientTreeId, \u0027inner\u0027)\\\r\n      .join(brandTechDF, brandTechDF.Id \u003d\u003d tiDF.BrandTechId, \u0027inner\u0027)\\\r\n      .select(\\\r\n               tiDF.StartDate.alias(\u0027tiStartDate\u0027)\r\n              ,tiDF.EndDate.alias(\u0027tiEndDate\u0027)\r\n              ,tiDF.SizePercent\r\n              ,clientTreeDF.ObjectId.alias(\u0027tiClientTreeObjectId\u0027)\r\n              ,brandTechDF.BrandsegTechsub.alias(\u0027tibtName\u0027)\r\n             )\r\n\r\n    tiClientList \u003d tiClientNullBtDF.union(tiClientNotNullBtDF).collect()\r\n\r\n    ratiShopperList \u003d ratiShopperDF.collect()\r\n\r\n    actualCogsClientDF \u003d actualCogsDF\\\r\n      .join(clientTreeDF, clientTreeDF.Id \u003d\u003d actualCogsDF.ClientTreeId, \u0027inner\u0027)\\\r\n      .join(brandTechDF, brandTechDF.Id \u003d\u003d actualCogsDF.BrandTechId, \u0027inner\u0027)\\\r\n      .select(\\\r\n               actualCogsDF.StartDate.alias(\u0027cogsStartDate\u0027)\r\n              ,actualCogsDF.EndDate.alias(\u0027cogsEndDate\u0027)\r\n              ,actualCogsDF.LSVpercent\r\n              ,clientTreeDF.ObjectId.alias(\u0027cogsClientTreeObjectId\u0027)\r\n              ,brandTechDF.BrandsegTechsub.alias(\u0027cbtName\u0027)\r\n             )\r\n\r\n    actualCogsClientList \u003d actualCogsClientDF.collect()\r\n\r\n    actualCogsTnClientDF \u003d actualCogsTnDF\\\r\n      .join(clientTreeDF, clientTreeDF.Id \u003d\u003d actualCogsTnDF.ClientTreeId, \u0027inner\u0027)\\\r\n      .join(brandTechDF, brandTechDF.Id \u003d\u003d actualCogsTnDF.BrandTechId, \u0027inner\u0027)\\\r\n      .select(\\\r\n               actualCogsTnDF.StartDate.alias(\u0027cogsStartDate\u0027)\r\n              ,actualCogsTnDF.EndDate.alias(\u0027cogsEndDate\u0027)\r\n              ,actualCogsTnDF.TonCost\r\n              ,clientTreeDF.ObjectId.alias(\u0027cogsClientTreeObjectId\u0027)\r\n              ,brandTechDF.BrandsegTechsub.alias(\u0027cbtName\u0027)\r\n             )\r\n\r\n    actualCogsTnClientList \u003d actualCogsTnClientDF.collect()\r\n\r\n    actualTiClientNullBtDF \u003d actualTiDF\\\r\n      .join(clientTreeDF, clientTreeDF.Id \u003d\u003d actualTiDF.ClientTreeId, \u0027inner\u0027)\\\r\n      .select(\\\r\n               actualTiDF.StartDate.alias(\u0027tiStartDate\u0027)\r\n              ,actualTiDF.EndDate.alias(\u0027tiEndDate\u0027)\r\n              ,actualTiDF.SizePercent\r\n              ,clientTreeDF.ObjectId.alias(\u0027tiClientTreeObjectId\u0027)\r\n             )\\\r\n      .withColumn(\u0027tibtName\u0027, lit(None).cast(StringType()))\r\n\r\n    actualTiClientNotNullBtDF \u003d actualTiDF\\\r\n      .join(clientTreeDF, clientTreeDF.Id \u003d\u003d actualTiDF.ClientTreeId, \u0027inner\u0027)\\\r\n      .join(brandTechDF, brandTechDF.Id \u003d\u003d actualTiDF.BrandTechId, \u0027inner\u0027)\\\r\n      .select(\\\r\n               actualTiDF.StartDate.alias(\u0027tiStartDate\u0027)\r\n              ,actualTiDF.EndDate.alias(\u0027tiEndDate\u0027)\r\n              ,actualTiDF.SizePercent\r\n              ,clientTreeDF.ObjectId.alias(\u0027tiClientTreeObjectId\u0027)\r\n              ,brandTechDF.BrandsegTechsub.alias(\u0027tibtName\u0027)\r\n             )\r\n\r\n    actualTiClientList \u003d actualTiClientNullBtDF.union(actualTiClientNotNullBtDF).collect()\r\n\r\n    import COGS_TI_CALCULATION as cc\r\n\r\n    import RA_TI_SHOPPER_CALCULATION as ra\r\n\r\n    calcActualPromoDF \u003d calcActualPromoDF\\\r\n      .withColumn(\u0027calcCogsPercent\u0027, when(col(\u0027UseActualCOGS\u0027) \u003d\u003d False, lit(cc.getCogsPercent(activeClientTreeList,cogsClientList)(col(\u0027ClientTreeId\u0027), col(\u0027promoBrandTechName\u0027), col(\u0027DispatchesStart\u0027))))\\\r\n                 .otherwise(None))\\\r\n      .withColumn(\u0027calcCogsTn\u0027, when(col(\u0027UseActualCOGS\u0027) \u003d\u003d False, lit(cc.getCogsTnPercent(activeClientTreeList,cogsTnClientList)(col(\u0027ClientTreeId\u0027), col(\u0027promoBrandTechName\u0027), col(\u0027DispatchesStart\u0027))))\\\r\n                 .otherwise(None))\\\r\n      .withColumn(\u0027calcTiPercent\u0027, when(col(\u0027UseActualTI\u0027) \u003d\u003d False, lit(cc.getTiPercent(activeClientTreeList,tiClientList)(col(\u0027ClientTreeId\u0027), col(\u0027promoBrandTechName\u0027), col(\u0027StartDate\u0027))))\\\r\n                 .otherwise(None))\\\r\n      .withColumn(\u0027calcActualCogsPercent\u0027, when(col(\u0027UseActualCOGS\u0027) \u003d\u003d True,lit(cc.getActualCogsPercent(activeClientTreeList,actualCogsClientList)(col(\u0027ClientTreeId\u0027), col(\u0027promoBrandTechName\u0027), col(\u0027DispatchesStart\u0027))))\\\r\n                 .otherwise(None))\\\r\n      .withColumn(\u0027calcActualCogsTn\u0027, when(col(\u0027UseActualCOGS\u0027) \u003d\u003d True,lit(cc.getActualCogsTnPercent(activeClientTreeList,actualCogsTnClientList)(col(\u0027ClientTreeId\u0027), col(\u0027promoBrandTechName\u0027), col(\u0027DispatchesStart\u0027))))\\\r\n                 .otherwise(None))\\\r\n      .withColumn(\u0027calcActualTiPercent\u0027, when(col(\u0027UseActualTI\u0027) \u003d\u003d True, lit(cc.getActualTiPercent(activeClientTreeList,actualTiClientList)(col(\u0027ClientTreeId\u0027), col(\u0027promoBrandTechName\u0027), col(\u0027StartDate\u0027))))\\\r\n                 .otherwise(None))\\\r\n      .withColumn(\u0027calcRaTiShopperPercent\u0027, lit(ra.getRaTiShopperPercent(activeClientTreeList,ratiShopperList)(col(\u0027ClientTreeKeyId\u0027), col(\u0027BudgetYear\u0027))))\r\n\r\n    logCOGS \u003d calcActualPromoDF\\\r\n      .select(\\\r\n               col(\u0027Number\u0027).alias(\u0027promoNumber\u0027)\\\r\n              ,col(\u0027calcCogsPercent\u0027).alias(\u0027COGSMessage\u0027)\r\n             )\\\r\n      .where(col(\u0027calcCogsPercent\u0027).isin(*cc.logText))\r\n\r\n    logCOGSTn \u003d calcActualPromoDF\\\r\n      .select(\\\r\n               col(\u0027Number\u0027).alias(\u0027promoNumber\u0027)\\\r\n              ,col(\u0027calcCogsTn\u0027).alias(\u0027COGSTnMessage\u0027)\r\n             )\\\r\n      .where(col(\u0027calcCogsTn\u0027).isin(*cc.logTnText))\r\n\r\n    logTI \u003d calcActualPromoDF\\\r\n      .select(\\\r\n               col(\u0027Number\u0027).alias(\u0027promoNumber\u0027)\\\r\n              ,col(\u0027calcTiPercent\u0027).alias(\u0027TIMessage\u0027)\r\n             )\\\r\n      .where(col(\u0027calcTiPercent\u0027).isin(*cc.logText))\r\n\r\n    logActualCOGS \u003d calcActualPromoDF\\\r\n      .select(\\\r\n               col(\u0027Number\u0027).alias(\u0027promoNumber\u0027)\\\r\n              ,col(\u0027calcActualCogsPercent\u0027).alias(\u0027ActualCOGSMessage\u0027)\r\n             )\\\r\n      .where(col(\u0027calcActualCogsPercent\u0027).isin(*cc.actualLogText))\r\n\r\n    logActualCOGSTn \u003d calcActualPromoDF\\\r\n      .select(\\\r\n               col(\u0027Number\u0027).alias(\u0027promoNumber\u0027)\\\r\n              ,col(\u0027calcActualCogsTn\u0027).alias(\u0027ActualCOGSTnMessage\u0027)\r\n             )\\\r\n      .where(col(\u0027calcActualCogsTn\u0027).isin(*cc.actualLogText))\r\n\r\n    logActualTI \u003d calcActualPromoDF\\\r\n      .select(\\\r\n               col(\u0027Number\u0027).alias(\u0027promoNumber\u0027)\\\r\n              ,col(\u0027calcActualTiPercent\u0027).alias(\u0027ActualTIMessage\u0027)\r\n             )\\\r\n      .where(col(\u0027calcActualTiPercent\u0027).isin(*cc.actualLogText))\r\n\r\n    logRATIShopper \u003d calcActualPromoDF\\\r\n      .select(\\\r\n               col(\u0027Number\u0027).alias(\u0027promoNumber\u0027)\\\r\n              ,col(\u0027calcRaTiShopperPercent\u0027).alias(\u0027TIMessage\u0027)\r\n             )\\\r\n      .where(col(\u0027calcRaTiShopperPercent\u0027).isin(*ra.raLogText))\r\n\r\n    calcActualPromoDF \u003d calcActualPromoDF\\\r\n      .withColumn(\u0027PlanCOGSPercent\u0027, when(((~col(\u0027calcCogsPercent\u0027).isin(*cc.logText)) \u0026 (~col(\u0027calcCogsPercent\u0027).isNull())), col(\u0027calcCogsPercent\u0027))\\\r\n                  .otherwise(col(\u0027PlanCOGSPercent\u0027)))\\\r\n      .withColumn(\u0027PlanCOGSTn\u0027, when(((~col(\u0027calcCogsTn\u0027).isin(*cc.logTnText)) \u0026 (~col(\u0027calcCogsTn\u0027).isNull())), col(\u0027calcCogsTn\u0027))\\\r\n                  .otherwise(col(\u0027PlanCOGSTn\u0027)))\\\r\n      .withColumn(\u0027PlanTIBasePercent\u0027, when(((~col(\u0027calcTiPercent\u0027).isin(*cc.logText)) \u0026 (~col(\u0027calcTiPercent\u0027).isNull())), col(\u0027calcTiPercent\u0027))\\\r\n                  .otherwise(col(\u0027PlanTIBasePercent\u0027)))\\\r\n      .withColumn(\u0027ActualCOGSPercent\u0027, when(((~col(\u0027calcActualCogsPercent\u0027).isin(*cc.actualLogText)) \u0026 (col(\u0027UseActualCOGS\u0027) \u003d\u003d True)\\\r\n                                             \u0026 (~col(\u0027calcActualCogsPercent\u0027).isNull())), col(\u0027calcActualCogsPercent\u0027))\\\r\n                  .otherwise(col(\u0027ActualCOGSPercent\u0027)).cast(DecimalType(30,2)))\\\r\n      .withColumn(\u0027ActualCOGSTn\u0027, when(((~col(\u0027calcActualCogsTn\u0027).isin(*cc.actualLogText)) \u0026 (col(\u0027UseActualCOGS\u0027) \u003d\u003d True)\\\r\n                                             \u0026 (~col(\u0027calcActualCogsTn\u0027).isNull())), col(\u0027calcActualCogsTn\u0027))\\\r\n                  .otherwise(col(\u0027ActualCOGSTn\u0027)).cast(DecimalType(30,2)))\\\r\n      .withColumn(\u0027ActualTIBasePercent\u0027, when(((~col(\u0027calcActualTiPercent\u0027).isin(*cc.actualLogText)) \u0026 (col(\u0027UseActualTI\u0027) \u003d\u003d True)\\\r\n                                             \u0026 (~col(\u0027calcActualTiPercent\u0027).isNull())), col(\u0027calcActualTiPercent\u0027))\\\r\n                  .otherwise(col(\u0027ActualTIBasePercent\u0027)).cast(DecimalType(30,2)))\\\r\n      .withColumn(\u0027RATIShopperPercent\u0027, when(~col(\u0027calcRaTiShopperPercent\u0027).isin(*ra.raLogText), col(\u0027calcRaTiShopperPercent\u0027)).otherwise(0))\r\n\r\n    #####*Calculate promo parameters*\r\n\r\n    @udf\r\n    def isNullCheck(value):\r\n      if value is None:\r\n        return 0\r\n      else:\r\n        return value\r\n\r\n    calcActualPromoDF \u003d calcActualPromoDF\\\r\n      .withColumn(\u0027isActualPromoBaseLineLSVChangedByDemand\u0027, when((~col(\u0027ActualPromoBaselineLSV\u0027).isNull()) \u0026 (col(\u0027ActualPromoBaselineLSV\u0027) !\u003d col(\u0027PlanPromoBaselineLSV\u0027)), True).otherwise(False))\\\r\n      .withColumn(\u0027isActualPromoLSVChangedByDemand\u0027, when((~col(\u0027ActualPromoLSVSO\u0027).isNull()) \u0026 (col(\u0027ActualPromoLSVSO\u0027) !\u003d 0), True).otherwise(False))\\\r\n      .withColumn(\u0027isActualPromoProstPromoEffectLSVChangedByDemand\u0027, when((~col(\u0027ActualPromoPostPromoEffectLSV\u0027).isNull()) \u0026 (col(\u0027ActualPromoPostPromoEffectLSV\u0027) !\u003d 0), True).otherwise(False))\\\r\n      .withColumn(\u0027kW1\u0027, col(\u0027promoClientPostPromoEffectW1\u0027) / (col(\u0027promoClientPostPromoEffectW1\u0027) + col(\u0027promoClientPostPromoEffectW2\u0027)))\\\r\n      .withColumn(\u0027kW2\u0027, col(\u0027promoClientPostPromoEffectW2\u0027) / (col(\u0027promoClientPostPromoEffectW1\u0027) + col(\u0027promoClientPostPromoEffectW2\u0027)))\\\r\n      .withColumn(\u0027TIBasePercent\u0027, when((col(\u0027UseActualTI\u0027) \u003d\u003d True) \u0026 (~col(\u0027ActualTIBasePercent\u0027).isNull()), col(\u0027ActualTIBasePercent\u0027))\r\n                                        .otherwise(col(\u0027PlanTIBasePercent\u0027)).cast(DecimalType(30,2)))\\\r\n      .withColumn(\u0027COGSPercent\u0027, when((col(\u0027UseActualCOGS\u0027) \u003d\u003d True) \u0026 (~col(\u0027ActualCOGSPercent\u0027).isNull()), col(\u0027ActualCOGSPercent\u0027))\r\n                                        .otherwise(col(\u0027PlanCOGSPercent\u0027)).cast(DecimalType(30,2)))\\\r\n      .withColumn(\u0027COGSTn\u0027, when((col(\u0027UseActualCOGS\u0027) \u003d\u003d True) \u0026 (~col(\u0027ActualCOGSTn\u0027).isNull()), col(\u0027ActualCOGSTn\u0027))\r\n                                        .otherwise(col(\u0027PlanCOGSTn\u0027)).cast(DecimalType(30,2)))\r\n\r\n    calcActualPromoDF \u003d calcActualPromoDF\\\r\n      .withColumn(\u0027ActualPromoLSV\u0027, when((col(\u0027IsOnInvoice\u0027) \u003d\u003d True), col(\u0027ActualPromoLSVSI\u0027))\\\r\n                                    .otherwise(when(col(\u0027isActualPromoLSVChangedByDemand\u0027) \u003d\u003d False, 0)\r\n                                               .otherwise(col(\u0027ActualPromoLSV\u0027))).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027SumInvoice\u0027, when((col(\u0027ManualInputSumInvoice\u0027) \u003d\u003d True), col(\u0027SumInvoice\u0027))\\\r\n                                .otherwise(col(\u0027ActualPromoLSVByCompensation\u0027) * col(\u0027MarsMechanicDiscount\u0027) / 100.0).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoTIShopper\u0027, col(\u0027SumInvoice\u0027))\\\r\n      .withColumn(\u0027ActualPromoCost\u0027, (isNullCheck(col(\u0027ActualPromoTIShopper\u0027)) + isNullCheck(col(\u0027ActualPromoTIMarketing\u0027))\\\r\n                                    + isNullCheck(col(\u0027ActualPromoBranding\u0027)) + isNullCheck(col(\u0027ActualPromoBTL\u0027))\\\r\n                                    + isNullCheck(col(\u0027ActualPromoCostProduction\u0027))).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoBaseTI\u0027, (isNullCheck(col(\u0027ActualPromoLSV\u0027)) * col(\u0027TIBasePercent\u0027) / 100).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoBaselineLSV\u0027, when((col(\u0027InOut\u0027) \u003d\u003d True), 1)\\\r\n                                    .otherwise(when(col(\u0027isActualPromoBaseLineLSVChangedByDemand\u0027) \u003d\u003d False, col(\u0027PlanPromoBaselineLSV\u0027))\r\n                                               .otherwise(col(\u0027ActualPromoBaselineLSV\u0027))).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoIncrementalLSV\u0027, when((col(\u0027InOut\u0027) \u003d\u003d False), isNullCheck(col(\u0027ActualPromoLSV\u0027)) - isNullCheck(col(\u0027ActualPromoBaselineLSV\u0027)))\\\r\n                                    .otherwise(when(isNullCheck(col(\u0027ActualPromoLSV\u0027)) - isNullCheck(col(\u0027ActualPromoBaselineLSV\u0027)) \u003c 0, 0)\r\n                                               .otherwise(col(\u0027ActualPromoLSV\u0027) - col(\u0027ActualPromoBaselineLSV\u0027))).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoPostPromoEffectLSV\u0027, when(col(\u0027InOut\u0027) \u003d\u003d False, when(col(\u0027IsOnInvoice\u0027) \u003d\u003d False, col(\u0027ActualPromoPostPromoEffectLSVW1\u0027) \\\r\n                                               + col(\u0027ActualPromoPostPromoEffectLSVW2\u0027)).otherwise(isNullCheck(col(\u0027ActualPromoLSVSO\u0027)) - isNullCheck(col(\u0027ActualPromoLSVSI\u0027))))\\\r\n                                                .otherwise(col(\u0027ActualPromoPostPromoEffectLSV\u0027)).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoPostPromoEffectLSVW1\u0027, when(((col(\u0027InOut\u0027) \u003d\u003d False) \u0026 (col(\u0027IsOnInvoice\u0027) \u003d\u003d True)),\\\r\n                                                        col(\u0027ActualPromoPostPromoEffectLSV\u0027) * col(\u0027kW1\u0027))\\\r\n                                                  .otherwise(col(\u0027ActualPromoPostPromoEffectLSVW1\u0027)).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoPostPromoEffectLSVW2\u0027, when(((col(\u0027InOut\u0027) \u003d\u003d False) \u0026 (col(\u0027IsOnInvoice\u0027) \u003d\u003d True)),\\\r\n                                                        col(\u0027ActualPromoPostPromoEffectLSV\u0027) * col(\u0027kW2\u0027))\\\r\n                                                  .otherwise(col(\u0027ActualPromoPostPromoEffectLSVW2\u0027)).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoNetIncrementalLSV\u0027, when(col(\u0027InOut\u0027) \u003d\u003d False, isNullCheck(col(\u0027ActualPromoIncrementalLSV\u0027))\\\r\n                                                   + isNullCheck(col(\u0027ActualPromoPostPromoEffectLSV\u0027)))\\\r\n                                                  .otherwise(isNullCheck(col(\u0027ActualPromoIncrementalLSV\u0027))).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoUpliftPercent\u0027, when(col(\u0027InOut\u0027) \u003d\u003d False, \r\n                                                     when(col(\u0027ActualPromoBaselineLSV\u0027) !\u003d 0, col(\u0027ActualPromoIncrementalLSV\u0027) / col(\u0027ActualPromoBaselineLSV\u0027) * 100.0)\\\r\n                                                     .otherwise(0))\\\r\n                                                .otherwise(None).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoNetUpliftPercent\u0027, when(col(\u0027InOut\u0027) \u003d\u003d False, \r\n                                                     when(col(\u0027ActualPromoBaselineLSV\u0027) !\u003d 0, col(\u0027ActualPromoNetIncrementalLSV\u0027) / col(\u0027ActualPromoBaselineLSV\u0027) * 100.0)\\\r\n                                                     .otherwise(0))\\\r\n                                                .otherwise(None).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoIncrementalBaseTI\u0027, (col(\u0027ActualPromoIncrementalLSV\u0027) * col(\u0027TIBasePercent\u0027) / 100).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoNetIncrementalBaseTI\u0027, (col(\u0027ActualPromoNetIncrementalLSV\u0027) * col(\u0027TIBasePercent\u0027) / 100.0).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoIncrementalCOGS\u0027, (col(\u0027ActualPromoIncrementalLSV\u0027) * col(\u0027COGSPercent\u0027) / 100).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoNetIncrementalCOGS\u0027, (col(\u0027ActualPromoNetIncrementalLSV\u0027) * col(\u0027COGSPercent\u0027) / 100.0).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoNetLSV\u0027, (isNullCheck(col(\u0027ActualPromoBaselineLSV\u0027)) + isNullCheck(col(\u0027ActualPromoNetIncrementalLSV\u0027))).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoNetBaseTI\u0027, (col(\u0027ActualPromoNetLSV\u0027) * col(\u0027TIBasePercent\u0027) / 100.0).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoTotalCost\u0027, (isNullCheck(col(\u0027ActualPromoCost\u0027)) + isNullCheck(col(\u0027ActualPromoBaseTI\u0027))).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoIncrementalNSV\u0027, (isNullCheck(col(\u0027ActualPromoIncrementalLSV\u0027)) - isNullCheck(col(\u0027ActualPromoTIShopper\u0027))\\\r\n                                              - isNullCheck(col(\u0027ActualPromoTIMarketing\u0027)) - isNullCheck(col(\u0027ActualPromoIncrementalBaseTI\u0027))).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoNetIncrementalNSV\u0027, (isNullCheck(col(\u0027ActualPromoNetIncrementalLSV\u0027)) - isNullCheck(col(\u0027ActualPromoTIShopper\u0027))\\\r\n                                                 - isNullCheck(col(\u0027ActualPromoTIMarketing\u0027)) - isNullCheck(col(\u0027ActualPromoNetIncrementalBaseTI\u0027))).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoNetNSV\u0027, (isNullCheck(col(\u0027ActualPromoNetLSV\u0027)) - isNullCheck(col(\u0027ActualPromoTIShopper\u0027))\\\r\n                                      - isNullCheck(col(\u0027ActualPromoTIMarketing\u0027)) - isNullCheck(col(\u0027ActualPromoNetBaseTI\u0027))).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoNetIncrementalMACLSV\u0027, (isNullCheck(col(\u0027ActualPromoNetIncrementalNSV\u0027)) - isNullCheck(col(\u0027ActualPromoNetIncrementalCOGS\u0027))).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoBaselineBaseTI\u0027, (isNullCheck(col(\u0027ActualPromoBaselineLSV\u0027)) * col(\u0027TIBasePercent\u0027) / 100.0).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoNSV\u0027, (isNullCheck(col(\u0027ActualPromoLSV\u0027)) - isNullCheck(col(\u0027ActualPromoTIShopper\u0027))\\\r\n                                   - isNullCheck(col(\u0027ActualPromoTIMarketing\u0027)) - isNullCheck(col(\u0027ActualPromoBaseTI\u0027))).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoIncrementalMACLSV\u0027, (isNullCheck(col(\u0027ActualPromoIncrementalNSV\u0027)) - isNullCheck(col(\u0027ActualPromoIncrementalCOGS\u0027))).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoIncrementalEarningsLSV\u0027, (isNullCheck(col(\u0027ActualPromoIncrementalMACLSV\u0027)) - isNullCheck(col(\u0027ActualPromoBranding\u0027))\\\r\n                                                   - isNullCheck(col(\u0027ActualPromoBTL\u0027)) - isNullCheck(col(\u0027ActualPromoCostProduction\u0027))).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoNetIncrementalEarningsLSV\u0027, (isNullCheck(col(\u0027ActualPromoNetIncrementalMACLSV\u0027)) - isNullCheck(col(\u0027ActualPromoBranding\u0027))\\\r\n                                                      - isNullCheck(col(\u0027ActualPromoBTL\u0027)) - isNullCheck(col(\u0027ActualPromoCostProduction\u0027))).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoROIPercentLSV\u0027, when(col(\u0027ActualPromoCost\u0027) !\u003d 0, (col(\u0027ActualPromoIncrementalEarningsLSV\u0027) / col(\u0027ActualPromoCost\u0027) + 1) * 100.0)\\\r\n                                              .otherwise(0).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoNetROIPercentLSV\u0027, when(col(\u0027ActualPromoCost\u0027) !\u003d 0, (col(\u0027ActualPromoNetIncrementalEarningsLSV\u0027) / col(\u0027ActualPromoCost\u0027) + 1) * 100.0)\\\r\n                                              .otherwise(0).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualAddTIShopper\u0027, (isNullCheck(col(\u0027ActualPromoTIShopper\u0027)) - isNullCheck(col(\u0027ActualPromoNetIncrementalLSV\u0027)) * col(\u0027RATIShopperPercent\u0027) / 100)\\\r\n                  .cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualAddTIMarketing\u0027, (isNullCheck(col(\u0027ActualPromoTIMarketing\u0027)) - (isNullCheck(col(\u0027PlanPromoTIMarketing\u0027))\\\r\n                                                                            - isNullCheck(col(\u0027PlanAddTIMarketingApproved\u0027)))).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualAddTIMarketing\u0027, when(col(\u0027ActualAddTIMarketing\u0027) \u003c 0, 0).otherwise(col(\u0027ActualAddTIMarketing\u0027)))\\\r\n      .withColumn(\u0027ActualPromoVolumeSI\u0027, when(col(\u0027InOut\u0027) \u003d\u003d False, isNullCheck(col(\u0027ActualPromoVolumeByCompensation\u0027))).otherwise(0).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoVolume\u0027,  when(((col(\u0027IsOnInvoice\u0027) \u003d\u003d True) \u0026 (col(\u0027InOut\u0027) \u003d\u003d \u0027False\u0027)), col(\u0027ActualPromoVolumeSI\u0027)).otherwise(col(\u0027ActualPromoVolume\u0027)).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoIncrementalVolume\u0027, (col(\u0027ActualPromoVolume\u0027) - col(\u0027ActualPromoBaselineVolume\u0027)).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoNetIncrementalVolume\u0027, (col(\u0027ActualPromoIncrementalVolume\u0027) + col(\u0027ActualPromoPostPromoEffectVolume\u0027)).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoIncrementalCOGSTn\u0027, (col(\u0027ActualPromoIncrementalVolume\u0027) * col(\u0027COGSTn\u0027)).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoNetIncrementalCOGSTn\u0027, (col(\u0027ActualPromoNetIncrementalVolume\u0027) * col(\u0027COGSTn\u0027)).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoNetIncrementalMAC\u0027, when(col(\u0027IsLSVBased\u0027) \u003d\u003d False, isNullCheck(col(\u0027ActualPromoNetIncrementalNSV\u0027)) - isNullCheck(col(\u0027ActualPromoNetIncrementalCOGSTn\u0027)))\\\r\n                                              .otherwise(col(\u0027ActualPromoNetIncrementalMACLSV\u0027))\\\r\n                                              .cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoIncrementalMAC\u0027, when(col(\u0027IsLSVBased\u0027) \u003d\u003d False, isNullCheck(col(\u0027ActualPromoIncrementalNSV\u0027)) - isNullCheck(col(\u0027ActualPromoIncrementalCOGSTn\u0027)))\\\r\n                                              .otherwise(col(\u0027ActualPromoIncrementalMACLSV\u0027))\\\r\n                                              .cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoIncrementalEarnings\u0027, when(col(\u0027IsLSVBased\u0027) \u003d\u003d False, isNullCheck(col(\u0027ActualPromoIncrementalMAC\u0027)) - isNullCheck(col(\u0027ActualPromoBranding\u0027))\\\r\n                                                 - isNullCheck(col(\u0027ActualPromoBTL\u0027)) - isNullCheck(col(\u0027ActualPromoCostProduction\u0027)))\\\r\n                                                   .otherwise(col(\u0027ActualPromoIncrementalEarningsLSV\u0027))\\\r\n                                                   .cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoNetIncrementalEarnings\u0027, when(col(\u0027IsLSVBased\u0027) \u003d\u003d False, isNullCheck(col(\u0027ActualPromoNetIncrementalMAC\u0027)) - isNullCheck(col(\u0027ActualPromoBranding\u0027))\\\r\n                                                 - isNullCheck(col(\u0027ActualPromoBTL\u0027)) - isNullCheck(col(\u0027ActualPromoCostProduction\u0027)))\\\r\n                                                   .otherwise(col(\u0027ActualPromoNetIncrementalEarningsLSV\u0027))\\\r\n                                                   .cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoROIPercent\u0027, when(col(\u0027IsLSVBased\u0027) \u003d\u003d False, when(col(\"ActualPromoCost\") !\u003d 0, (col(\u0027ActualPromoIncrementalEarnings\u0027) / col(\u0027ActualPromoCost\u0027) + 1) * 100.0)\\\r\n                                              .otherwise(0)).otherwise(col(\u0027ActualPromoROIPercentLSV\u0027)).cast(DecimalType(30,6)))\\\r\n      .withColumn(\u0027ActualPromoNetROIPercent\u0027, when(col(\u0027IsLSVBased\u0027) \u003d\u003d False, when(col(\"ActualPromoCost\") !\u003d 0, (col(\u0027ActualPromoNetIncrementalEarnings\u0027) / col(\u0027ActualPromoCost\u0027) + 1) * 100.0)\\\r\n                                              .otherwise(0)).otherwise(col(\u0027ActualPromoNetROIPercentLSV\u0027)).cast(DecimalType(30,6)))\r\n\r\n    if \"MasterPromoId\" in promoDF.schema.fieldNames():\r\n      inExchangeCalcPromoDF \u003d promoDF\\\r\n        .select(\\\r\n                col(\u0027MasterPromoId\u0027).alias(\u0027MasterPromo\u0027)\r\n                ,col(\u0027PlanPromoTIShopper\u0027)\r\n                ,col(\u0027PlanPromoNetIncrementalLSV\u0027)\r\n               )\\\r\n        .groupBy(\u0027MasterPromo\u0027)\\\r\n        .agg(sum(\u0027PlanPromoTIShopper\u0027).alias(\u0027sumPlanPromoTIShopper\u0027),\r\n             sum(\u0027PlanPromoNetIncrementalLSV\u0027).alias(\u0027sumPlanPromoNetIncrementalLSV\u0027))\r\n\r\n      calcActualPromoDF \u003d calcActualPromoDF\\\r\n        .join(inExchangeCalcPromoDF, inExchangeCalcPromoDF.MasterPromo \u003d\u003d calcActualPromoDF.Id, \u0027left\u0027)\\\r\n        .select(\\\r\n                 calcActualPromoDF[\u0027*\u0027]\r\n                ,col(\u0027sumPlanPromoTIShopper\u0027)\r\n                ,col(\u0027sumPlanPromoNetIncrementalLSV\u0027)\r\n               )\r\n\r\n      calcActualPromoDF \u003d calcActualPromoDF\\\r\n        .withColumn(\u0027ActualAddTIShopper\u0027, (isNullCheck(col(\u0027ActualPromoTIShopper\u0027)) - isNullCheck(col(\u0027sumPlanPromoTIShopper\u0027)) - (isNullCheck(col(\u0027ActualPromoNetIncrementalLSV\u0027)) - isNullCheck(col(\u0027sumPlanPromoNetIncrementalLSV\u0027))) * col(\u0027RATIShopperPercent\u0027) / 100)\\\r\n                    .cast(DecimalType(30,6)))\\\r\n        .drop(\u0027sumPlanPromoTIShopper\u0027, \u0027sumPlanPromoNetIncrementalLSV\u0027)\r\n\r\n    #####*Get result*\r\n\r\n    print(\u0027Actual promo parameters calculation completed!\u0027)\r\n    \r\n    return calcActualPromoDF,logCOGS,logTI,logCOGSTn,logActualCOGS,logActualTI,logActualCOGSTn",
      "user": "anonymous",
      "dateUpdated": "2022-09-23 08:45:41.468",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660560576430_2078367617",
      "id": "paragraph_1660560576430_2078367617",
      "dateCreated": "2022-08-15 10:49:36.430",
      "status": "READY"
    }
  ],
  "name": "JUPITER/PROMO_PARAMETERS_CALCULATION/ACTUAL_PROMO_PARAMS_CALCULATION_PROCESS",
  "id": "2HA2ZC7BB",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}