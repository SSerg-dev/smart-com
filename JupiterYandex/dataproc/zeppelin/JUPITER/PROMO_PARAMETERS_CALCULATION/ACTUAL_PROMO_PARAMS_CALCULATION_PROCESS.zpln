{
  "paragraphs": [
    {
      "text": "%md\n####Notebook \"ACTUAL_PROMO_PARAMS_CALCULATION_PROCESS\". \n####*Calculate actual promo parameters*.\n###### *Developer: [LLC Smart-Com](http://smartcom.software/), andrey.philushkin@effem.com*",
      "user": "anonymous",
      "dateUpdated": "2023-07-06T12:30:05+0000",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>####Notebook &ldquo;ACTUAL_PROMO_PARAMS_CALCULATION_PROCESS&rdquo;. </p>\n<p>####*Calculate actual promo parameters*.</p>\n<h6>*Developer: <a href=\"http://smartcom.software/\">LLC Smart-Com</a>, <a href=\"mailto:&#x61;&#x6e;&#100;&#x72;&#101;&#121;.&#112;&#x68;&#x69;l&#x75;&#115;&#104;&#107;&#x69;&#110;@&#x65;&#102;&#102;&#x65;&#109;&#x2e;&#99;&#111;&#109;&#x2a;\">&#x61;&#x6e;&#100;&#x72;&#101;&#121;.&#112;&#x68;&#x69;l&#x75;&#115;&#104;&#107;&#x69;&#110;@&#x65;&#102;&#102;&#x65;&#109;&#x2e;&#99;&#111;&#109;&#x2a;</a></h6>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1688646605725_1764763738",
      "id": "20220815-090327_63030900",
      "dateCreated": "2023-07-06T12:30:05+0000",
      "status": "READY",
      "focus": true,
      "$$hashKey": "object:58"
    },
    {
      "text": "%pyspark\nfrom pyspark.sql import SQLContext, DataFrame, Row, Window\nfrom pyspark.sql import SparkSession\nfrom pyspark.context import SparkContext\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport pyspark.sql.functions as F\nimport pandas as pd\nimport datetime, time\nimport os\nimport json",
      "user": "anonymous",
      "dateUpdated": "2023-07-06T12:30:05+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1688646605726_1472681937",
      "id": "20220815-090327_1171898177",
      "dateCreated": "2023-07-06T12:30:05+0000",
      "status": "READY",
      "$$hashKey": "object:59"
    },
    {
      "text": "%pyspark\r\ndef run(clientTreeDF,cogsDF,brandTechDF,cogsTnDF,tiDF,ratiShopperDF,calcActualPromoDF,promoDF,actualCogsDF,actualCogsTnDF,actualTiDF):\r\n    sc = SparkContext.getOrCreate()\r\n    spark = SparkSession(sc)\r\n\r\n    #####*Set COGS&TI Percent*\r\n\r\n    activeClientTreeList = clientTreeDF.where(col('EndDate').isNull()).collect()\r\n\r\n    cogsClientDF = cogsDF\\\r\n      .join(clientTreeDF, clientTreeDF.Id == cogsDF.ClientTreeId, 'inner')\\\r\n      .join(brandTechDF, brandTechDF.Id == cogsDF.BrandTechId, 'inner')\\\r\n      .select(\\\r\n               cogsDF.StartDate.alias('cogsStartDate')\r\n              ,cogsDF.EndDate.alias('cogsEndDate')\r\n              ,cogsDF.LSVpercent\r\n              ,clientTreeDF.ObjectId.alias('cogsClientTreeObjectId')\r\n              ,brandTechDF.BrandsegTechsub.alias('cbtName')\r\n             )\r\n\r\n    cogsClientList = cogsClientDF.collect()\r\n\r\n    cogsClientTnDF = cogsTnDF\\\r\n      .join(clientTreeDF, clientTreeDF.Id == cogsTnDF.ClientTreeId, 'inner')\\\r\n      .join(brandTechDF, brandTechDF.Id == cogsTnDF.BrandTechId, 'inner')\\\r\n      .select(\\\r\n               cogsTnDF.StartDate.alias('cogsStartDate')\r\n              ,cogsTnDF.EndDate.alias('cogsEndDate')\r\n              ,cogsTnDF.TonCost\r\n              ,clientTreeDF.ObjectId.alias('cogsClientTreeObjectId')\r\n              ,brandTechDF.BrandsegTechsub.alias('cbtName')\r\n             )\r\n\r\n    cogsTnClientList = cogsClientTnDF.collect()\r\n\r\n    tiClientNullBtDF = tiDF\\\r\n      .join(clientTreeDF, clientTreeDF.Id == tiDF.ClientTreeId, 'inner')\\\r\n      .select(\\\r\n               tiDF.StartDate.alias('tiStartDate')\r\n              ,tiDF.EndDate.alias('tiEndDate')\r\n              ,tiDF.SizePercent\r\n              ,clientTreeDF.ObjectId.alias('tiClientTreeObjectId')\r\n             )\\\r\n      .withColumn('tibtName', lit(None).cast(StringType()))\r\n\r\n    tiClientNotNullBtDF = tiDF\\\r\n      .join(clientTreeDF, clientTreeDF.Id == tiDF.ClientTreeId, 'inner')\\\r\n      .join(brandTechDF, brandTechDF.Id == tiDF.BrandTechId, 'inner')\\\r\n      .select(\\\r\n               tiDF.StartDate.alias('tiStartDate')\r\n              ,tiDF.EndDate.alias('tiEndDate')\r\n              ,tiDF.SizePercent\r\n              ,clientTreeDF.ObjectId.alias('tiClientTreeObjectId')\r\n              ,brandTechDF.BrandsegTechsub.alias('tibtName')\r\n             )\r\n\r\n    tiClientList = tiClientNullBtDF.union(tiClientNotNullBtDF).collect()\r\n\r\n    ratiShopperList = ratiShopperDF.collect()\r\n\r\n    actualCogsClientDF = actualCogsDF\\\r\n      .join(clientTreeDF, clientTreeDF.Id == actualCogsDF.ClientTreeId, 'inner')\\\r\n      .join(brandTechDF, brandTechDF.Id == actualCogsDF.BrandTechId, 'inner')\\\r\n      .select(\\\r\n               actualCogsDF.StartDate.alias('cogsStartDate')\r\n              ,actualCogsDF.EndDate.alias('cogsEndDate')\r\n              ,actualCogsDF.LSVpercent\r\n              ,clientTreeDF.ObjectId.alias('cogsClientTreeObjectId')\r\n              ,brandTechDF.BrandsegTechsub.alias('cbtName')\r\n             )\r\n\r\n    actualCogsClientList = actualCogsClientDF.collect()\r\n\r\n    actualCogsTnClientDF = actualCogsTnDF\\\r\n      .join(clientTreeDF, clientTreeDF.Id == actualCogsTnDF.ClientTreeId, 'inner')\\\r\n      .join(brandTechDF, brandTechDF.Id == actualCogsTnDF.BrandTechId, 'inner')\\\r\n      .select(\\\r\n               actualCogsTnDF.StartDate.alias('cogsStartDate')\r\n              ,actualCogsTnDF.EndDate.alias('cogsEndDate')\r\n              ,actualCogsTnDF.TonCost\r\n              ,clientTreeDF.ObjectId.alias('cogsClientTreeObjectId')\r\n              ,brandTechDF.BrandsegTechsub.alias('cbtName')\r\n             )\r\n\r\n    actualCogsTnClientList = actualCogsTnClientDF.collect()\r\n\r\n    actualTiClientNullBtDF = actualTiDF\\\r\n      .join(clientTreeDF, clientTreeDF.Id == actualTiDF.ClientTreeId, 'inner')\\\r\n      .select(\\\r\n               actualTiDF.StartDate.alias('tiStartDate')\r\n              ,actualTiDF.EndDate.alias('tiEndDate')\r\n              ,actualTiDF.SizePercent\r\n              ,clientTreeDF.ObjectId.alias('tiClientTreeObjectId')\r\n             )\\\r\n      .withColumn('tibtName', lit(None).cast(StringType()))\r\n\r\n    actualTiClientNotNullBtDF = actualTiDF\\\r\n      .join(clientTreeDF, clientTreeDF.Id == actualTiDF.ClientTreeId, 'inner')\\\r\n      .join(brandTechDF, brandTechDF.Id == actualTiDF.BrandTechId, 'inner')\\\r\n      .select(\\\r\n               actualTiDF.StartDate.alias('tiStartDate')\r\n              ,actualTiDF.EndDate.alias('tiEndDate')\r\n              ,actualTiDF.SizePercent\r\n              ,clientTreeDF.ObjectId.alias('tiClientTreeObjectId')\r\n              ,brandTechDF.BrandsegTechsub.alias('tibtName')\r\n             )\r\n\r\n    actualTiClientList = actualTiClientNullBtDF.union(actualTiClientNotNullBtDF).collect()\r\n\r\n    import COGS_TI_CALCULATION as cc\r\n\r\n    import RA_TI_SHOPPER_CALCULATION as ra\r\n\r\n    calcActualPromoDF = calcActualPromoDF\\\r\n      .withColumn('calcCogsPercent', when(col('UseActualCOGS') == False, lit(cc.getCogsPercent(activeClientTreeList,cogsClientList)(col('ClientTreeId'), col('promoBrandTechName'), col('DispatchesStart'))))\\\r\n                 .otherwise(None))\\\r\n      .withColumn('calcCogsTn', when(col('UseActualCOGS') == False, lit(cc.getCogsTnPercent(activeClientTreeList,cogsTnClientList)(col('ClientTreeId'), col('promoBrandTechName'), col('DispatchesStart'))))\\\r\n                 .otherwise(None))\\\r\n      .withColumn('calcTiPercent', when(col('UseActualTI') == False, lit(cc.getTiPercent(activeClientTreeList,tiClientList)(col('ClientTreeId'), col('promoBrandTechName'), col('StartDate'))))\\\r\n                 .otherwise(None))\\\r\n      .withColumn('calcActualCogsPercent', when(col('UseActualCOGS') == True,lit(cc.getActualCogsPercent(activeClientTreeList,actualCogsClientList)(col('ClientTreeId'), col('promoBrandTechName'), col('DispatchesStart'))))\\\r\n                 .otherwise(None))\\\r\n      .withColumn('calcActualCogsTn', when(col('UseActualCOGS') == True,lit(cc.getActualCogsTnPercent(activeClientTreeList,actualCogsTnClientList)(col('ClientTreeId'), col('promoBrandTechName'), col('DispatchesStart'))))\\\r\n                 .otherwise(None))\\\r\n      .withColumn('calcActualTiPercent', when(col('UseActualTI') == True, lit(cc.getActualTiPercent(activeClientTreeList,actualTiClientList)(col('ClientTreeId'), col('promoBrandTechName'), col('StartDate'))))\\\r\n                 .otherwise(None))\\\r\n      .withColumn('calcRaTiShopperPercent', lit(ra.getRaTiShopperPercent(activeClientTreeList,ratiShopperList)(col('ClientTreeKeyId'), col('BudgetYear'))))\r\n\r\n    logCOGS = calcActualPromoDF\\\r\n      .select(\\\r\n               col('Number').alias('promoNumber')\\\r\n              ,col('calcCogsPercent').alias('COGSMessage')\r\n             )\\\r\n      .where(col('calcCogsPercent').isin(*cc.logText))\r\n\r\n    logCOGSTn = calcActualPromoDF\\\r\n      .select(\\\r\n               col('Number').alias('promoNumber')\\\r\n              ,col('calcCogsTn').alias('COGSTnMessage')\r\n             )\\\r\n      .where(col('calcCogsTn').isin(*cc.logTnText))\r\n\r\n    logTI = calcActualPromoDF\\\r\n      .select(\\\r\n               col('Number').alias('promoNumber')\\\r\n              ,col('calcTiPercent').alias('TIMessage')\r\n             )\\\r\n      .where(col('calcTiPercent').isin(*cc.logText))\r\n\r\n    logActualCOGS = calcActualPromoDF\\\r\n      .select(\\\r\n               col('Number').alias('promoNumber')\\\r\n              ,col('calcActualCogsPercent').alias('ActualCOGSMessage')\r\n             )\\\r\n      .where(col('calcActualCogsPercent').isin(*cc.actualLogText))\r\n\r\n    logActualCOGSTn = calcActualPromoDF\\\r\n      .select(\\\r\n               col('Number').alias('promoNumber')\\\r\n              ,col('calcActualCogsTn').alias('ActualCOGSTnMessage')\r\n             )\\\r\n      .where(col('calcActualCogsTn').isin(*cc.actualLogText))\r\n\r\n    logActualTI = calcActualPromoDF\\\r\n      .select(\\\r\n               col('Number').alias('promoNumber')\\\r\n              ,col('calcActualTiPercent').alias('ActualTIMessage')\r\n             )\\\r\n      .where(col('calcActualTiPercent').isin(*cc.actualLogText))\r\n\r\n    logRATIShopper = calcActualPromoDF\\\r\n      .select(\\\r\n               col('Number').alias('promoNumber')\\\r\n              ,col('calcRaTiShopperPercent').alias('TIMessage')\r\n             )\\\r\n      .where(col('calcRaTiShopperPercent').isin(*ra.raLogText))\r\n\r\n    calcActualPromoDF = calcActualPromoDF\\\r\n      .withColumn('PlanCOGSPercent', when(((~col('calcCogsPercent').isin(*cc.logText)) & (~col('calcCogsPercent').isNull())), col('calcCogsPercent'))\\\r\n                  .otherwise(col('PlanCOGSPercent')))\\\r\n      .withColumn('PlanCOGSTn', when(((~col('calcCogsTn').isin(*cc.logTnText)) & (~col('calcCogsTn').isNull())), col('calcCogsTn'))\\\r\n                  .otherwise(col('PlanCOGSTn')))\\\r\n      .withColumn('PlanTIBasePercent', when(((~col('calcTiPercent').isin(*cc.logText)) & (~col('calcTiPercent').isNull())), col('calcTiPercent'))\\\r\n                  .otherwise(col('PlanTIBasePercent')))\\\r\n      .withColumn('ActualCOGSPercent', when(((~col('calcActualCogsPercent').isin(*cc.actualLogText)) & (col('UseActualCOGS') == True)\\\r\n                                             & (~col('calcActualCogsPercent').isNull())), col('calcActualCogsPercent'))\\\r\n                  .otherwise(col('ActualCOGSPercent')).cast(DecimalType(30,2)))\\\r\n      .withColumn('ActualCOGSTn', when(((~col('calcActualCogsTn').isin(*cc.actualLogText)) & (col('UseActualCOGS') == True)\\\r\n                                             & (~col('calcActualCogsTn').isNull())), col('calcActualCogsTn'))\\\r\n                  .otherwise(col('ActualCOGSTn')).cast(DecimalType(30,2)))\\\r\n      .withColumn('ActualTIBasePercent', when(((~col('calcActualTiPercent').isin(*cc.actualLogText)) & (col('UseActualTI') == True)\\\r\n                                             & (~col('calcActualTiPercent').isNull())), col('calcActualTiPercent'))\\\r\n                  .otherwise(col('ActualTIBasePercent')).cast(DecimalType(30,2)))\\\r\n      .withColumn('RATIShopperPercent', when(~col('calcRaTiShopperPercent').isin(*ra.raLogText), col('calcRaTiShopperPercent')).otherwise(0))\r\n\r\n    #####*Calculate promo parameters*\r\n\r\n    @udf\r\n    def isNullCheck(value):\r\n      if value is None:\r\n        return 0\r\n      else:\r\n        return value\r\n\r\n    calcActualPromoDF = calcActualPromoDF\\\r\n      .withColumn('isActualPromoBaseLineLSVChangedByDemand', when((~col('ActualPromoBaselineLSV').isNull()) & (col('ActualPromoBaselineLSV') != col('PlanPromoBaselineLSV')), True).otherwise(False))\\\r\n      .withColumn('isActualPromoLSVChangedByDemand', when((~col('ActualPromoLSVSO').isNull()) & (col('ActualPromoLSVSO') != 0), True).otherwise(False))\\\r\n      .withColumn('isActualPromoProstPromoEffectLSVChangedByDemand', when((~col('ActualPromoPostPromoEffectLSV').isNull()) & (col('ActualPromoPostPromoEffectLSV') != 0), True).otherwise(False))\\\r\n      .withColumn('TIBasePercent', when((col('UseActualTI') == True) & (~col('ActualTIBasePercent').isNull()), col('ActualTIBasePercent'))\r\n                                        .otherwise(col('PlanTIBasePercent')).cast(DecimalType(30,2)))\\\r\n      .withColumn('COGSPercent', when((col('UseActualCOGS') == True) & (~col('ActualCOGSPercent').isNull()), col('ActualCOGSPercent'))\r\n                                        .otherwise(col('PlanCOGSPercent')).cast(DecimalType(30,2)))\\\r\n      .withColumn('COGSTn', when((col('UseActualCOGS') == True) & (~col('ActualCOGSTn').isNull()), col('ActualCOGSTn'))\r\n                                        .otherwise(col('PlanCOGSTn')).cast(DecimalType(30,2)))\r\n\r\n    calcActualPromoDF = calcActualPromoDF\\\r\n      .withColumn('ActualPromoLSV', when((col('IsOnInvoice') == True), col('ActualPromoLSVSI'))\\\r\n                                    .otherwise(when(col('isActualPromoLSVChangedByDemand') == False, 0)\r\n                                               .otherwise(col('ActualPromoLSV'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('SumInvoice', when((col('ManualInputSumInvoice') == True), col('SumInvoice'))\\\r\n                                .otherwise(col('ActualPromoLSVByCompensation') * col('MarsMechanicDiscount') / 100.0).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoTIShopper', col('SumInvoice'))\\\r\n      .withColumn('ActualPromoCost', (isNullCheck(col('ActualPromoTIShopper')) + isNullCheck(col('ActualPromoTIMarketing'))\\\r\n                                    + isNullCheck(col('ActualPromoBranding')) + isNullCheck(col('ActualPromoBTL'))\\\r\n                                    + isNullCheck(col('ActualPromoCostProduction'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoBaseTI', (isNullCheck(col('ActualPromoLSV')) * col('TIBasePercent') / 100).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoBaselineLSV', when((col('InOut') == True), 1)\\\r\n                                    .otherwise(when(col('isActualPromoBaseLineLSVChangedByDemand') == False, col('PlanPromoBaselineLSV'))\r\n                                               .otherwise(col('ActualPromoBaselineLSV'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoIncrementalLSV', when((col('InOut') == False), isNullCheck(col('ActualPromoLSV')) - isNullCheck(col('ActualPromoBaselineLSV')))\\\r\n                                    .otherwise(when(isNullCheck(col('ActualPromoLSV')) - isNullCheck(col('ActualPromoBaselineLSV')) < 0, 0)\r\n                                               .otherwise(col('ActualPromoLSV') - col('ActualPromoBaselineLSV'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoPostPromoEffectLSV', when(col('InOut') == False, when(col('IsOnInvoice') == False, col('ActualPromoPostPromoEffectLSVW1') \\\r\n                                               + col('ActualPromoPostPromoEffectLSVW2')).otherwise(isNullCheck(col('ActualPromoLSVSO')) - isNullCheck(col('ActualPromoLSVSI'))))\\\r\n                                                .otherwise(col('ActualPromoPostPromoEffectLSV')).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoNetIncrementalLSV', when(col('InOut') == False, isNullCheck(col('ActualPromoIncrementalLSV'))\\\r\n                                                   + isNullCheck(col('ActualPromoPostPromoEffectLSV')))\\\r\n                                                  .otherwise(isNullCheck(col('ActualPromoIncrementalLSV'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoUpliftPercent', when(col('InOut') == False, \r\n                                                     when(col('ActualPromoBaselineLSV') != 0, col('ActualPromoIncrementalLSV') / col('ActualPromoBaselineLSV') * 100.0)\\\r\n                                                     .otherwise(0))\\\r\n                                                .otherwise(None).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoNetUpliftPercent', when(col('InOut') == False, \r\n                                                     when(col('ActualPromoBaselineLSV') != 0, col('ActualPromoNetIncrementalLSV') / col('ActualPromoBaselineLSV') * 100.0)\\\r\n                                                     .otherwise(0))\\\r\n                                                .otherwise(None).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoIncrementalBaseTI', (col('ActualPromoIncrementalLSV') * col('TIBasePercent') / 100).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoNetIncrementalBaseTI', (col('ActualPromoNetIncrementalLSV') * col('TIBasePercent') / 100.0).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoIncrementalCOGS', (col('ActualPromoIncrementalLSV') * col('COGSPercent') / 100).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoNetIncrementalCOGS', (col('ActualPromoNetIncrementalLSV') * col('COGSPercent') / 100.0).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoNetLSV', (isNullCheck(col('ActualPromoBaselineLSV')) + isNullCheck(col('ActualPromoNetIncrementalLSV'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoNetBaseTI', (col('ActualPromoNetLSV') * col('TIBasePercent') / 100.0).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoTotalCost', (isNullCheck(col('ActualPromoCost')) + isNullCheck(col('ActualPromoBaseTI'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoIncrementalNSV', (isNullCheck(col('ActualPromoIncrementalLSV')) - isNullCheck(col('ActualPromoTIShopper'))\\\r\n                                              - isNullCheck(col('ActualPromoTIMarketing')) - isNullCheck(col('ActualPromoIncrementalBaseTI'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoNetIncrementalNSV', (isNullCheck(col('ActualPromoNetIncrementalLSV')) - isNullCheck(col('ActualPromoTIShopper'))\\\r\n                                                 - isNullCheck(col('ActualPromoTIMarketing')) - isNullCheck(col('ActualPromoNetIncrementalBaseTI'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoNetNSV', (isNullCheck(col('ActualPromoNetLSV')) - isNullCheck(col('ActualPromoTIShopper'))\\\r\n                                      - isNullCheck(col('ActualPromoTIMarketing')) - isNullCheck(col('ActualPromoNetBaseTI'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoNetIncrementalMACLSV', (isNullCheck(col('ActualPromoNetIncrementalNSV')) - isNullCheck(col('ActualPromoNetIncrementalCOGS'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoBaselineBaseTI', (isNullCheck(col('ActualPromoBaselineLSV')) * col('TIBasePercent') / 100.0).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoNSV', (isNullCheck(col('ActualPromoLSV')) - isNullCheck(col('ActualPromoTIShopper'))\\\r\n                                   - isNullCheck(col('ActualPromoTIMarketing')) - isNullCheck(col('ActualPromoBaseTI'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoIncrementalMACLSV', (isNullCheck(col('ActualPromoIncrementalNSV')) - isNullCheck(col('ActualPromoIncrementalCOGS'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoIncrementalEarningsLSV', (isNullCheck(col('ActualPromoIncrementalMACLSV')) - isNullCheck(col('ActualPromoBranding'))\\\r\n                                                   - isNullCheck(col('ActualPromoBTL')) - isNullCheck(col('ActualPromoCostProduction'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoNetIncrementalEarningsLSV', (isNullCheck(col('ActualPromoNetIncrementalMACLSV')) - isNullCheck(col('ActualPromoBranding'))\\\r\n                                                      - isNullCheck(col('ActualPromoBTL')) - isNullCheck(col('ActualPromoCostProduction'))).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoROIPercentLSV', when(col('ActualPromoCost') != 0, (col('ActualPromoIncrementalEarningsLSV') / col('ActualPromoCost') + 1) * 100.0)\\\r\n                                              .otherwise(0).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoNetROIPercentLSV', when(col('ActualPromoCost') != 0, (col('ActualPromoNetIncrementalEarningsLSV') / col('ActualPromoCost') + 1) * 100.0)\\\r\n                                              .otherwise(0).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualAddTIShopper', (isNullCheck(col('ActualPromoTIShopper')) - isNullCheck(col('ActualPromoNetIncrementalLSV')) * col('RATIShopperPercent') / 100)\\\r\n                  .cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualAddTIMarketing', (isNullCheck(col('ActualPromoTIMarketing')) - (isNullCheck(col('PlanPromoTIMarketing'))\\\r\n                                                                            - isNullCheck(col('PlanAddTIMarketingApproved')))).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualAddTIMarketing', when(col('ActualAddTIMarketing') < 0, 0).otherwise(col('ActualAddTIMarketing')))\\\r\n      .withColumn('ActualPromoVolumeSI', when(col('InOut') == False, isNullCheck(col('ActualPromoVolumeByCompensation'))).otherwise(0).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoVolume',  when(((col('IsOnInvoice') == True) & (col('InOut') == 'False')), col('ActualPromoVolumeSI')).otherwise(col('ActualPromoVolume')).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoIncrementalVolume', (col('ActualPromoVolume') - col('ActualPromoBaselineVolume')).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoNetIncrementalVolume', (col('ActualPromoIncrementalVolume') + col('ActualPromoPostPromoEffectVolume')).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoIncrementalCOGSTn', (col('ActualPromoIncrementalVolume') * col('COGSTn')).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoNetIncrementalCOGSTn', (col('ActualPromoNetIncrementalVolume') * col('COGSTn')).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoNetIncrementalMAC', when(col('IsLSVBased') == False, isNullCheck(col('ActualPromoNetIncrementalNSV')) - isNullCheck(col('ActualPromoNetIncrementalCOGSTn')))\\\r\n                                              .otherwise(col('ActualPromoNetIncrementalMACLSV'))\\\r\n                                              .cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoIncrementalMAC', when(col('IsLSVBased') == False, isNullCheck(col('ActualPromoIncrementalNSV')) - isNullCheck(col('ActualPromoIncrementalCOGSTn')))\\\r\n                                              .otherwise(col('ActualPromoIncrementalMACLSV'))\\\r\n                                              .cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoIncrementalEarnings', when(col('IsLSVBased') == False, isNullCheck(col('ActualPromoIncrementalMAC')) - isNullCheck(col('ActualPromoBranding'))\\\r\n                                                 - isNullCheck(col('ActualPromoBTL')) - isNullCheck(col('ActualPromoCostProduction')))\\\r\n                                                   .otherwise(col('ActualPromoIncrementalEarningsLSV'))\\\r\n                                                   .cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoNetIncrementalEarnings', when(col('IsLSVBased') == False, isNullCheck(col('ActualPromoNetIncrementalMAC')) - isNullCheck(col('ActualPromoBranding'))\\\r\n                                                 - isNullCheck(col('ActualPromoBTL')) - isNullCheck(col('ActualPromoCostProduction')))\\\r\n                                                   .otherwise(col('ActualPromoNetIncrementalEarningsLSV'))\\\r\n                                                   .cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoROIPercent', when(col('IsLSVBased') == False, when(col(\"ActualPromoCost\") != 0, (col('ActualPromoIncrementalEarnings') / col('ActualPromoCost') + 1) * 100.0)\\\r\n                                              .otherwise(0)).otherwise(col('ActualPromoROIPercentLSV')).cast(DecimalType(30,6)))\\\r\n      .withColumn('ActualPromoNetROIPercent', when(col('IsLSVBased') == False, when(col(\"ActualPromoCost\") != 0, (col('ActualPromoNetIncrementalEarnings') / col('ActualPromoCost') + 1) * 100.0)\\\r\n                                              .otherwise(0)).otherwise(col('ActualPromoNetROIPercentLSV')).cast(DecimalType(30,6)))\r\n\r\n    if \"MasterPromoId\" in promoDF.schema.fieldNames():\r\n      inExchangeCalcPromoDF = promoDF\\\r\n        .select(\\\r\n                col('MasterPromoId').alias('MasterPromo')\r\n                ,col('PlanPromoTIShopper')\r\n                ,col('PlanPromoNetIncrementalLSV')\r\n               )\\\r\n        .groupBy('MasterPromo')\\\r\n        .agg(sum('PlanPromoTIShopper').alias('sumPlanPromoTIShopper'),\r\n             sum('PlanPromoNetIncrementalLSV').alias('sumPlanPromoNetIncrementalLSV'))\r\n\r\n      calcActualPromoDF = calcActualPromoDF\\\r\n        .join(inExchangeCalcPromoDF, inExchangeCalcPromoDF.MasterPromo == calcActualPromoDF.Id, 'left')\\\r\n        .select(\\\r\n                 calcActualPromoDF['*']\r\n                ,col('sumPlanPromoTIShopper')\r\n                ,col('sumPlanPromoNetIncrementalLSV')\r\n               )\r\n\r\n      calcActualPromoDF = calcActualPromoDF\\\r\n        .withColumn('ActualAddTIShopper', (isNullCheck(col('ActualPromoTIShopper')) - isNullCheck(col('sumPlanPromoTIShopper')) - (isNullCheck(col('ActualPromoNetIncrementalLSV')) - isNullCheck(col('sumPlanPromoNetIncrementalLSV'))) * col('RATIShopperPercent') / 100)\\\r\n                    .cast(DecimalType(30,6)))\\\r\n        .drop('sumPlanPromoTIShopper', 'sumPlanPromoNetIncrementalLSV')\r\n\r\n    #####*Get result*\r\n\r\n    print('Actual promo parameters calculation completed!')\r\n    \r\n    return calcActualPromoDF,logCOGS,logTI,logCOGSTn,logActualCOGS,logActualTI,logActualCOGSTn",
      "user": "anonymous",
      "dateUpdated": "2023-07-08T19:51:18+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1688646605726_709973891",
      "id": "paragraph_1660560576430_2078367617",
      "dateCreated": "2023-07-06T12:30:05+0000",
      "status": "READY",
      "$$hashKey": "object:60"
    }
  ],
  "name": "JUPITER/PROMO_PARAMETERS_CALCULATION/ACTUAL_PROMO_PARAMS_CALCULATION_PROCESS",
  "id": "2J569W9D2",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/JUPITER/PROMO_PARAMETERS_CALCULATION/ACTUAL_PROMO_PARAMS_CALCULATION_PROCESS"
}