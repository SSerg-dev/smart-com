{
  "paragraphs": [
    {
      "text": "%md\n####Notebook \"PLAN_PROMO_PARAMS_CALCULATION_PROCESS\". \n####*Calculate plan promo parameters*.\n###### *Developer: [LLC Smart-Com](http://smartcom.software/), andrey.philushkin@effem.com*",
      "user": "anonymous",
      "dateUpdated": "2023-07-06T12:30:07+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>####Notebook &ldquo;PLAN_PROMO_PARAMS_CALCULATION_PROCESS&rdquo;.<br />\n####<em>Calculate plan promo parameters</em>.</p>\n<h6><em>Developer: <a href=\"http://smartcom.software/\">LLC Smart-Com</a>, <a href=\"mailto:andrey.philushkin@effem.com\">andrey.philushkin@effem.com</a></em></h6>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1688646607424_2051252731",
      "id": "20220812-100311_1313680705",
      "dateCreated": "2023-07-06T12:30:07+0000",
      "status": "READY",
      "focus": true,
      "$$hashKey": "object:58"
    },
    {
      "text": "%pyspark\nfrom pyspark.sql import SQLContext, DataFrame, Row, Window\nfrom pyspark.sql import SparkSession\nfrom pyspark.context import SparkContext\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport pyspark.sql.functions as F\nimport pandas as pd\nimport datetime, time\nimport os\nimport json",
      "user": "anonymous",
      "dateUpdated": "2023-07-06T12:30:07+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1688646607424_1909378714",
      "id": "paragraph_1660298954076_420544830",
      "dateCreated": "2023-07-06T12:30:07+0000",
      "status": "READY",
      "$$hashKey": "object:59"
    },
    {
      "text": "%pyspark\ndef run(clientTreeDF,cogsDF,brandTechDF,cogsTnDF,tiDF,ratiShopperDF,calcPlanPromoDF,promoDF):\n    sc = SparkContext.getOrCreate();\n    spark = SparkSession(sc)\n\n    #####*Set COGS&TI percent*\n\n    activeClientTreeList = clientTreeDF.where(col('EndDate').isNull()).collect()\n\n    cogsClientDF = cogsDF\\\n      .join(clientTreeDF, clientTreeDF.Id == cogsDF.ClientTreeId, 'inner')\\\n      .join(brandTechDF, brandTechDF.Id == cogsDF.BrandTechId, 'inner')\\\n      .select(\\\n               cogsDF.StartDate.alias('cogsStartDate')\n              ,cogsDF.EndDate.alias('cogsEndDate')\n              ,cogsDF.LSVpercent\n              ,clientTreeDF.ObjectId.alias('cogsClientTreeObjectId')\n              ,brandTechDF.BrandsegTechsub.alias('cbtName')\n             )\n\n    cogsClientList = cogsClientDF.collect()\n\n    cogsTnClientDF = cogsTnDF\\\n      .join(clientTreeDF, clientTreeDF.Id == cogsTnDF.ClientTreeId, 'inner')\\\n      .join(brandTechDF, brandTechDF.Id == cogsTnDF.BrandTechId, 'inner')\\\n      .select(\\\n               cogsTnDF.StartDate.alias('cogsStartDate')\n              ,cogsTnDF.EndDate.alias('cogsEndDate')\n              ,cogsTnDF.TonCost\n              ,clientTreeDF.ObjectId.alias('cogsClientTreeObjectId')\n              ,brandTechDF.BrandsegTechsub.alias('cbtName')\n             )\n\n    cogsTnClientList = cogsTnClientDF.collect()\n\n    cogsTnClientDF = cogsTnDF\\\n      .join(clientTreeDF, clientTreeDF.Id == cogsTnDF.ClientTreeId, 'inner')\\\n      .join(brandTechDF, brandTechDF.Id == cogsTnDF.BrandTechId, 'inner')\\\n      .select(\\\n               cogsTnDF.StartDate.alias('cogsStartDate')\n              ,cogsTnDF.EndDate.alias('cogsEndDate')\n              ,cogsTnDF.TonCost\n              ,clientTreeDF.ObjectId.alias('cogsClientTreeObjectId')\n              ,brandTechDF.BrandsegTechsub.alias('cbtName')\n             )\n\n    cogsTnClientList = cogsTnClientDF.collect()\n\n    tiClientNullBtDF = tiDF\\\n      .join(clientTreeDF, clientTreeDF.Id == tiDF.ClientTreeId, 'inner')\\\n      .select(\\\n               tiDF.StartDate.alias('tiStartDate')\n              ,tiDF.EndDate.alias('tiEndDate')\n              ,tiDF.SizePercent\n              ,clientTreeDF.ObjectId.alias('tiClientTreeObjectId')\n             )\\\n      .withColumn('tibtName', lit(None).cast(StringType()))\n\n    tiClientNotNullBtDF = tiDF\\\n      .join(clientTreeDF, clientTreeDF.Id == tiDF.ClientTreeId, 'inner')\\\n      .join(brandTechDF, brandTechDF.Id == tiDF.BrandTechId, 'inner')\\\n      .select(\\\n               tiDF.StartDate.alias('tiStartDate')\n              ,tiDF.EndDate.alias('tiEndDate')\n              ,tiDF.SizePercent\n              ,clientTreeDF.ObjectId.alias('tiClientTreeObjectId')\n              ,brandTechDF.BrandsegTechsub.alias('tibtName')\n             )\n\n    tiClientList = tiClientNullBtDF.union(tiClientNotNullBtDF).collect()\n\n    ratiShopperList = ratiShopperDF.collect()\n\n    import COGS_TI_CALCULATION as cc\n\n    import RA_TI_SHOPPER_CALCULATION as ra\n\n    calcPlanPromoDF = calcPlanPromoDF\\\n      .withColumn('calcCogsPercent', lit(cc.getCogsPercent(activeClientTreeList,cogsClientList)(col('ClientTreeId'), col('promoBrandTechName'), col('DispatchesStart'))))\\\n      .withColumn('calcCogsTn', lit(cc.getCogsTnPercent(activeClientTreeList,cogsTnClientList)(col('ClientTreeId'), col('promoBrandTechName'), col('DispatchesStart'))))\\\n      .withColumn('calcTiPercent', lit(cc.getTiPercent(activeClientTreeList,tiClientList)(col('ClientTreeId'), col('promoBrandTechName'), col('StartDate'))))\\\n      .withColumn('calcRaTiShopperPercent', lit(ra.getRaTiShopperPercent(activeClientTreeList,ratiShopperList)(col('ClientTreeKeyId'), col('BudgetYear'))))\n\n    logCOGS = calcPlanPromoDF\\\n      .select(\\\n               col('Number').alias('promoNumber')\\\n              ,col('calcCogsPercent').alias('COGSMessage')\n             )\\\n      .where(col('calcCogsPercent').isin(*cc.logText))\n\n    logCOGSTn = calcPlanPromoDF\\\n      .select(\\\n               col('Number').alias('promoNumber')\\\n              ,col('calcCogsTn').alias('COGSTnMessage')\n             )\\\n      .where(col('calcCogsTn').isin(*cc.logText))\n\n    logTI = calcPlanPromoDF\\\n      .select(\\\n               col('Number').alias('promoNumber')\\\n              ,col('calcTiPercent').alias('TIMessage')\n             )\\\n      .where(col('calcTiPercent').isin(*cc.logText))\n\n    logRATIShopper = calcPlanPromoDF\\\n      .select(\\\n               col('Number').alias('promoNumber')\\\n              ,col('calcRaTiShopperPercent').alias('TIMessage')\n             )\\\n      .where(col('calcRaTiShopperPercent').isin(*ra.raLogText))\n\n    calcPlanPromoDF = calcPlanPromoDF\\\n      .withColumn('PlanCOGSPercent', when(~col('calcCogsPercent').isin(*cc.logText), col('calcCogsPercent')).otherwise(col('PlanCOGSPercent')))\\\n      .withColumn('PlanCOGSTn', when(~col('calcCogsTn').isin(*cc.logText), col('calcCogsTn')).otherwise(col('PlanCOGSTn')))\\\n      .withColumn('PlanTIBasePercent', when(~col('calcTiPercent').isin(*cc.logText), col('calcTiPercent')).otherwise(col('PlanTIBasePercent')))\\\n      .withColumn('RATIShopperPercent', when(~col('calcRaTiShopperPercent').isin(*ra.raLogText), col('calcRaTiShopperPercent')).otherwise(0))\n\n    #####*Calculate promo parameters*\n\n    @udf\n    def isNullCheck(value):\n      if value is None:\n        return 0\n      else:\n        return value\n\n    calcPlanPromoDF = calcPlanPromoDF\\\n      .withColumn('PlanPromoTIShopper', (col('PlanPromoLSV') * col('MarsMechanicDiscount') / 100).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoCost', (isNullCheck(col('PlanPromoTIShopper')) + isNullCheck(col('PlanPromoTIMarketing')) + isNullCheck(col('PlanPromoBranding'))\\\n                                  + isNullCheck(col('PlanPromoBTL')) + isNullCheck(col('PlanPromoCostProduction'))).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoIncrementalBaseTI', (col('PlanPromoIncrementalLSV') * col('PlanTIBasePercent') / 100).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoIncrementalCOGS', (col('PlanPromoIncrementalLSV') * col('PlanCOGSPercent') / 100).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoBaseTI', (col('PlanPromoLSV') * col('PlanTIBasePercent') / 100).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoTotalCost', (isNullCheck(col('PlanPromoCost')) + isNullCheck(col('PlanPromoBaseTI'))).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoPostPromoEffectLSV', when(col('InOut') == 'False', col('PlanPromoPostPromoEffectLSVW1') + col('PlanPromoPostPromoEffectLSVW2'))\\\n                                              .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoNetIncrementalLSV', (isNullCheck(col('PlanPromoIncrementalLSV')) + isNullCheck(col('PlanPromoPostPromoEffectLSV'))).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoNetLSV', (isNullCheck(col('PlanPromoBaselineLSV')) + isNullCheck(col('PlanPromoNetIncrementalLSV'))).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoNetIncrementalBaseTI', (col('PlanPromoNetIncrementalLSV') * col('PlanTIBasePercent') / 100.0).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoNetIncrementalCOGS', (col('PlanPromoNetIncrementalLSV') * col('PlanCOGSPercent') / 100.0).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoNetBaseTI', when(col('InOut') == 'False', col('PlanPromoNetLSV') * col('PlanTIBasePercent') / 100.0).otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoBaselineBaseTI', when(col('InOut') == 'False', col('PlanPromoBaselineLSV') * col('PlanTIBasePercent') / 100.0)\\\n                                              .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoNSV', (isNullCheck(col('PlanPromoLSV')) - isNullCheck(col('PlanPromoTIShopper'))\\\n                                 - isNullCheck(col('PlanPromoTIMarketing')) - isNullCheck(col('PlanPromoBaseTI'))).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoIncrementalNSV', (isNullCheck(col('PlanPromoIncrementalLSV')) - isNullCheck(col('PlanPromoTIShopper'))\\\n                                            - isNullCheck(col('PlanPromoTIMarketing')) - isNullCheck(col('PlanPromoIncrementalBaseTI'))).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoNetIncrementalNSV', (isNullCheck(col('PlanPromoNetIncrementalLSV')) - isNullCheck(col('PlanPromoTIShopper'))\\\n                                               - isNullCheck(col('PlanPromoTIMarketing')) - isNullCheck(col('PlanPromoNetIncrementalBaseTI'))).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoNetIncrementalMACLSV', (isNullCheck(col('PlanPromoNetIncrementalNSV'))\\\n                                               - isNullCheck(col('PlanPromoNetIncrementalCOGS'))).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoNetNSV', (isNullCheck(col('PlanPromoNetLSV')) - isNullCheck(col('PlanPromoTIShopper'))\\\n                                    - isNullCheck(col('PlanPromoTIMarketing')) - isNullCheck(col('PlanPromoNetBaseTI'))).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoIncrementalMACLSV', (isNullCheck(col('PlanPromoIncrementalNSV')) - isNullCheck(col('PlanPromoIncrementalCOGS'))).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoIncrementalEarningsLSV', (isNullCheck(col('PlanPromoIncrementalMACLSV')) - isNullCheck(col('PlanPromoBranding'))\\\n                                                 - isNullCheck(col('PlanPromoBTL')) - isNullCheck(col('PlanPromoCostProduction'))).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoNetIncrementalEarningsLSV', (isNullCheck(col('PlanPromoNetIncrementalMACLSV')) - isNullCheck(col('PlanPromoBranding'))\\\n                                                    - isNullCheck(col('PlanPromoBTL')) - isNullCheck(col('PlanPromoCostProduction'))).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoROIPercentLSV', when(col('PlanPromoCost') != 0, (col('PlanPromoIncrementalEarningsLSV') / col('PlanPromoCost') + 1) * 100.0)\\\n                                              .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoNetROIPercentLSV', when(col('PlanPromoCost') != 0, (col('PlanPromoNetIncrementalEarningsLSV') / col('PlanPromoCost') + 1) * 100.0)\\\n                                              .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoNetUpliftPercent', when(col('PlanPromoBaselineLSV') != 0, (col('PlanPromoNetIncrementalLSV') / col('PlanPromoBaselineLSV')) * 100.0)\\\n                                              .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('PlanAddTIShopperCalculated', (isNullCheck(col('PlanPromoTIShopper')) - isNullCheck(col('PlanPromoNetIncrementalLSV')) * col('RATIShopperPercent') / 100)\\\n                  .cast(DecimalType(30,6)))\\\n      .withColumn('PlanAddTIShopperApproved', when(col('LastApprovedDate').isNull(), col('PlanAddTIShopperCalculated')).otherwise(col('PlanAddTIShopperApproved')))\\\n      .withColumn('PlanPromoPostPromoEffectVolume',  when(col('InOut') == 'False', isNullCheck(col('PlanPromoPostPromoEffectVolumeW1')) + isNullCheck(col('PlanPromoPostPromoEffectVolumeW2'))).otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoNetIncrementalVolume', (col('PlanPromoIncrementalVolume') + col('PlanPromoPostPromoEffectVolume')).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoIncrementalCOGSTn', (col('PlanPromoIncrementalVolume') * col('PlanCOGSTn')).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoNetIncrementalCOGSTn', (col('PlanPromoNetIncrementalVolume') * col('PlanCOGSTn')).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoNetIncrementalMAC', when(col('IsLSVBased') == False, isNullCheck(col('PlanPromoNetIncrementalNSV')) - isNullCheck(col('PlanPromoNetIncrementalCOGSTn')))\\\n                                              .otherwise(col('PlanPromoNetIncrementalMACLSV'))\\\n                                              .cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoIncrementalMAC', when(col('IsLSVBased') == False, isNullCheck(col('PlanPromoIncrementalNSV')) - isNullCheck(col('PlanPromoIncrementalCOGSTn')))\\\n                                              .otherwise(col('PlanPromoIncrementalMACLSV'))\\\n                                              .cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoIncrementalEarnings', when(col('IsLSVBased') == False, (isNullCheck(col('PlanPromoIncrementalMAC')) - isNullCheck(col('PlanPromoBranding'))\\\n                                                 - isNullCheck(col('PlanPromoBTL')) - isNullCheck(col('PlanPromoCostProduction')))).otherwise(col('PlanPromoIncrementalEarningsLSV')).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoNetIncrementalEarnings', when(col('IsLSVBased') == False, (isNullCheck(col('PlanPromoNetIncrementalMAC')) - isNullCheck(col('PlanPromoBranding'))\\\n                                                 - isNullCheck(col('PlanPromoBTL')) - isNullCheck(col('PlanPromoCostProduction')))).otherwise(col('PlanPromoNetIncrementalEarningsLSV')).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoROIPercent', when(col('IsLSVBased') == False, when(col(\"PlanPromoCost\") != 0, (col('PlanPromoIncrementalEarnings') / col('PlanPromoCost') + 1) * 100.0)\\\n                                              .otherwise(0)).otherwise(col('PlanPromoROIPercentLSV')).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoNetROIPercent', when(col('IsLSVBased') == False, when(col(\"PlanPromoCost\") != 0, (col('PlanPromoNetIncrementalEarnings') / col('PlanPromoCost') + 1) * 100.0)\\\n                                              .otherwise(0)).otherwise(col('PlanPromoNetROIPercentLSV')).cast(DecimalType(30,6)))\n\n    if \"MasterPromoId\" in promoDF.schema.fieldNames():\n      inExchangeCalcPromoDF = promoDF\\\n        .select(\\\n                col('MasterPromoId').alias('MasterPromo')\n                ,col('PlanPromoTIShopper')\n                ,col('PlanPromoNetIncrementalLSV')\n               )\\\n        .groupBy('MasterPromo')\\\n        .agg(sum('PlanPromoTIShopper').alias('sumPlanPromoTIShopper'),\n             sum('PlanPromoNetIncrementalLSV').alias('sumPlanPromoNetIncrementalLSV'))\n\n      calcPlanPromoDF = calcPlanPromoDF\\\n        .join(inExchangeCalcPromoDF, inExchangeCalcPromoDF.MasterPromo == calcPlanPromoDF.Id, 'left')\\\n        .select(\\\n                 calcPlanPromoDF['*']\n                ,col('sumPlanPromoTIShopper')\n                ,col('sumPlanPromoNetIncrementalLSV')\n               )\n\n      calcPlanPromoDF = calcPlanPromoDF\\\n        .withColumn('PlanAddTIShopperCalculated', (isNullCheck(col('PlanPromoTIShopper')) - isNullCheck(col('sumPlanPromoTIShopper')) - (isNullCheck(col('PlanPromoNetIncrementalLSV')) - isNullCheck(col('sumPlanPromoNetIncrementalLSV'))) * col('RATIShopperPercent') / 100)\\\n                    .cast(DecimalType(30,6)))\\\n        .drop('sumPlanPromoTIShopper', 'sumPlanPromoNetIncrementalLSV')\n\n    #####*Get result*\n\n    # calcPlanPromoDF.toPandas().to_csv(OUTPUT_PLANPROMO_PATH, encoding='utf-8',index=False,sep = '\\u0001')\n    print('Plan promo parameters calculation completed!')\n    \n    return calcPlanPromoDF,logCOGS,logTI",
      "user": "anonymous",
      "dateUpdated": "2023-07-08T21:25:10+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1688646607424_1006903238",
      "id": "paragraph_1660298919950_1452976551",
      "dateCreated": "2023-07-06T12:30:07+0000",
      "status": "READY",
      "$$hashKey": "object:60"
    }
  ],
  "name": "JUPITER/PROMO_PARAMETERS_CALCULATION/PLAN_PROMO_PARAMS_CALCULATION_PROCESS",
  "id": "2J5JZ9QM9",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/JUPITER/PROMO_PARAMETERS_CALCULATION/PLAN_PROMO_PARAMS_CALCULATION_PROCESS"
}