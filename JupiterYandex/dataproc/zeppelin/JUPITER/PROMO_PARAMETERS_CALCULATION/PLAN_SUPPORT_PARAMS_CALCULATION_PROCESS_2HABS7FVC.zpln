{
  "paragraphs": [
    {
      "text": "%md\n####Notebook \"PLAN_SUPPORT_PARAMS_CALCULATION_PROCESS\". \n####*Calculate costs and BTL plan support parameters*.\n###### *Developer: [LLC Smart-Com](http://smartcom.software/), andrey.philushkin@effem.com*",
      "user": "anonymous",
      "dateUpdated": "2022-08-12 10:04:42.951",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e####Notebook \u0026ldquo;PLAN_SUPPORT_PARAMS_CALCULATION_PROCESS\u0026rdquo;. \u003c/p\u003e\n\u003cp\u003e####*Calculate costs and BTL plan support parameters*.\u003c/p\u003e\n\u003ch6\u003e*Developer: \u003ca href\u003d\"http://smartcom.software/\"\u003eLLC Smart-Com\u003c/a\u003e, \u003ca href\u003d\"mailto:\u0026#97;n\u0026#x64;\u0026#114;e\u0026#x79;\u0026#x2e;p\u0026#104;\u0026#105;\u0026#108;u\u0026#115;\u0026#x68;k\u0026#x69;\u0026#x6e;@ef\u0026#x66;\u0026#x65;\u0026#109;.\u0026#99;\u0026#x6f;\u0026#109;\u0026#42;\"\u003e\u0026#97;n\u0026#x64;\u0026#114;e\u0026#x79;\u0026#x2e;p\u0026#104;\u0026#105;\u0026#108;u\u0026#115;\u0026#x68;k\u0026#x69;\u0026#x6e;@ef\u0026#x66;\u0026#x65;\u0026#109;.\u0026#99;\u0026#x6f;\u0026#109;\u0026#42;\u003c/a\u003e\u003c/h6\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660298682951_1978843564",
      "id": "20220812-100249_652393020",
      "dateCreated": "2022-08-12 10:04:42.951",
      "status": "READY"
    },
    {
      "text": "%pyspark\nfrom pyspark.sql import SQLContext, DataFrame, Row, Window\nfrom pyspark.sql import SparkSession\nfrom pyspark.context import SparkContext\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport pyspark.sql.functions as F\nimport pandas as pd\nimport datetime, time\nimport os\nimport json",
      "user": "anonymous",
      "dateUpdated": "2022-08-12 10:14:54.575",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660299264674_1126066541",
      "id": "paragraph_1660299264674_1126066541",
      "dateCreated": "2022-08-12 10:14:24.675",
      "status": "READY"
    },
    {
      "text": "%pyspark\r\ndef run(allPromoSupportDF,activePromoSupportPromoDF,calcPlanSupportPromoDF,allBtlDF,budgetItemDF,budgetSubItemDF,promoSupportPromoCols,btlPromoDF):\r\n    sc \u003d SparkContext.getOrCreate();\r\n    spark \u003d SparkSession(sc)\r\n    ####*Calculate Costs*\r\n\r\n    #####*Separate promo by closed and not closed. Get sum PlanPromoLSV and closed promo budget*\r\n\r\n    # allPromoSupportDF \u003d promoSupportDF\\\r\n    #   .select(\\\r\n    #            promoSupportDF.Id.alias(\u0027psId\u0027)\r\n    #           ,promoSupportDF.BudgetSubItemId\r\n    #           ,promoSupportDF.Number.alias(\u0027promoSupportNumber\u0027)\r\n    #           ,promoSupportDF.PlanCostTE.cast(DecimalType(30,6))\r\n    #           ,promoSupportDF.PlanProdCost.cast(DecimalType(30,6))\r\n    #          )\r\n\r\n    allCalcPlanPromoSupportDF \u003d allPromoSupportDF\\\r\n      .join(activePromoSupportPromoDF, activePromoSupportPromoDF.PromoSupportId \u003d\u003d allPromoSupportDF.psId, \u0027inner\u0027)\\\r\n      .join(calcPlanSupportPromoDF, calcPlanSupportPromoDF.Id \u003d\u003d activePromoSupportPromoDF.PromoId, \u0027inner\u0027)\\\r\n      .select(\\\r\n               calcPlanSupportPromoDF[\u0027*\u0027]\r\n              ,allPromoSupportDF[\u0027*\u0027]\r\n              ,activePromoSupportPromoDF[\u0027*\u0027]\r\n             )\\\r\n      .withColumn(\u0027pspId\u0027, activePromoSupportPromoDF.Id)\\\r\n      .withColumn(\u0027pspDisabled\u0027, activePromoSupportPromoDF.Disabled)\\\r\n      .withColumn(\u0027pspDeletedDate\u0027, activePromoSupportPromoDF.DeletedDate)\\\r\n      .withColumn(\u0027pspTPMmode\u0027, activePromoSupportPromoDF.TPMmode)\\\r\n      .drop(activePromoSupportPromoDF.Id)\\\r\n      .drop(activePromoSupportPromoDF.Disabled)\\\r\n      .drop(activePromoSupportPromoDF.DeletedDate)\\\r\n      .drop(activePromoSupportPromoDF.TPMmode)\\\r\n      .dropDuplicates()\r\n    \r\n    allCalcPlanPromoSupportCurrentDF \u003d allCalcPlanPromoSupportDF.where(col(\u0027TPMmode\u0027) \u003d\u003d 0)  \r\n\r\n    notClosedSumWindow \u003d Window.partitionBy(\u0027psId\u0027).orderBy(col(\u0027isPromoNotClosed\u0027).desc())\r\n    closedSumWindow \u003d Window.partitionBy(\u0027psId\u0027).orderBy(col(\u0027isPromoClosed\u0027).desc())\r\n\r\n    sumNotClosedGroup \u003d allCalcPlanPromoSupportCurrentDF\\\r\n      .groupBy([(col(\u0027promoStatusSystemName\u0027) !\u003d \u0027Closed\u0027).alias(\u0027isPromoNotClosed\u0027), \u0027psId\u0027])\\\r\n      .agg(sum(\u0027PlanPromoLSV\u0027).alias(\u0027sumPromoLSV\u0027))\\\r\n      .withColumn(\u0027Row_Number\u0027, row_number().over(notClosedSumWindow))\\\r\n      .where(col(\u0027Row_Number\u0027) \u003d\u003d 1).drop(\u0027Row_Number\u0027)\r\n\r\n    # sumNotClosedGroup.show()\r\n\r\n    sumClosedGroup \u003d allCalcPlanPromoSupportCurrentDF\\\r\n      .groupBy([(col(\u0027promoStatusSystemName\u0027) \u003d\u003d \u0027Closed\u0027).alias(\u0027isPromoClosed\u0027), \u0027psId\u0027])\\\r\n      .agg(sum(\u0027FactCalculation\u0027).alias(\u0027_closedBudgetMarketingTi\u0027), sum(\u0027FactCostProd\u0027).alias(\u0027_closedBudgetCostProd\u0027))\\\r\n      .withColumn(\u0027Row_Number\u0027, row_number().over(closedSumWindow))\\\r\n      .where(col(\u0027Row_Number\u0027) \u003d\u003d 1).drop(\u0027Row_Number\u0027)\r\n\r\n    sumClosedGroup \u003d sumClosedGroup\\\r\n      .select(\\\r\n               sumClosedGroup.psId\r\n              ,sumClosedGroup.isPromoClosed\r\n              ,sumClosedGroup._closedBudgetMarketingTi\r\n              ,sumClosedGroup._closedBudgetCostProd\r\n             )\\\r\n      .withColumn(\u0027closedBudgetMarketingTi\u0027, when(col(\u0027isPromoClosed\u0027) \u003d\u003d \u0027true\u0027, col(\u0027_closedBudgetMarketingTi\u0027)).otherwise(0))\\\r\n      .withColumn(\u0027closedBudgetCostProd\u0027, when(col(\u0027isPromoClosed\u0027) \u003d\u003d \u0027true\u0027, col(\u0027_closedBudgetCostProd\u0027)).otherwise(0))\r\n\r\n    # sumClosedGroup.show()\r\n\r\n    allCalcPlanPromoSupportCurrentDF \u003d allCalcPlanPromoSupportCurrentDF\\\r\n      .join(sumNotClosedGroup, \u0027psId\u0027, \u0027left\u0027)\\\r\n      .join(sumClosedGroup, \u0027psId\u0027, \u0027left\u0027)\\\r\n      .drop(\u0027isPromoNotClosed\u0027,\u0027isPromoClosed\u0027,\u0027_closedBudgetMarketingTi\u0027,\u0027_closedBudgetCostProd\u0027)\r\n\r\n    notClosedCalcPlanPromoSupportDF \u003d allCalcPlanPromoSupportCurrentDF\\\r\n      .where(col(\u0027promoStatusSystemName\u0027) !\u003d \u0027Closed\u0027)\r\n\r\n    closedCalcPlanPromoSupportDF \u003d allCalcPlanPromoSupportCurrentDF\\\r\n      .where(col(\u0027promoStatusSystemName\u0027) \u003d\u003d \u0027Closed\u0027)\r\n\r\n    # RS\r\n    allCalcPlanPromoSupportRSDF \u003d allCalcPlanPromoSupportDF.where(col(\u0027TPMmode\u0027) \u003d\u003d 1)\r\n\r\n    notClosedSumWindow \u003d Window.partitionBy(\u0027psId\u0027).orderBy(col(\u0027isPromoNotClosed\u0027).desc())\r\n    closedSumWindow \u003d Window.partitionBy(\u0027psId\u0027).orderBy(col(\u0027isPromoClosed\u0027).desc())\r\n\r\n    sumNotClosedGroup \u003d allCalcPlanPromoSupportRSDF\\\r\n      .groupBy([(col(\u0027promoStatusSystemName\u0027) !\u003d \u0027Closed\u0027).alias(\u0027isPromoNotClosed\u0027), \u0027psId\u0027])\\\r\n      .agg(sum(\u0027PlanPromoLSV\u0027).alias(\u0027sumPromoLSV\u0027))\\\r\n      .withColumn(\u0027Row_Number\u0027, row_number().over(notClosedSumWindow))\\\r\n      .where(col(\u0027Row_Number\u0027) \u003d\u003d 1).drop(\u0027Row_Number\u0027)\r\n\r\n    # sumNotClosedGroup.show()\r\n\r\n    sumClosedGroup \u003d allCalcPlanPromoSupportRSDF\\\r\n      .groupBy([(col(\u0027promoStatusSystemName\u0027) \u003d\u003d \u0027Closed\u0027).alias(\u0027isPromoClosed\u0027), \u0027psId\u0027])\\\r\n      .agg(sum(\u0027FactCalculation\u0027).alias(\u0027_closedBudgetMarketingTi\u0027), sum(\u0027FactCostProd\u0027).alias(\u0027_closedBudgetCostProd\u0027))\\\r\n      .withColumn(\u0027Row_Number\u0027, row_number().over(closedSumWindow))\\\r\n      .where(col(\u0027Row_Number\u0027) \u003d\u003d 1).drop(\u0027Row_Number\u0027)\r\n\r\n    sumClosedGroup \u003d sumClosedGroup\\\r\n      .select(\\\r\n           sumClosedGroup.psId\r\n          ,sumClosedGroup.isPromoClosed\r\n          ,sumClosedGroup._closedBudgetMarketingTi\r\n          ,sumClosedGroup._closedBudgetCostProd\r\n            )\\\r\n      .withColumn(\u0027closedBudgetMarketingTi\u0027, when(col(\u0027isPromoClosed\u0027) \u003d\u003d \u0027true\u0027, col(\u0027_closedBudgetMarketingTi\u0027)).otherwise(0))\\\r\n      .withColumn(\u0027closedBudgetCostProd\u0027, when(col(\u0027isPromoClosed\u0027) \u003d\u003d \u0027true\u0027, col(\u0027_closedBudgetCostProd\u0027)).otherwise(0))\r\n\r\n    # sumClosedGroup.show()\r\n\r\n    allCalcPlanPromoSupportRSDF \u003d allCalcPlanPromoSupportRSDF\\\r\n      .join(sumNotClosedGroup, \u0027psId\u0027, \u0027left\u0027)\\\r\n      .join(sumClosedGroup, \u0027psId\u0027, \u0027left\u0027)\\\r\n      .drop(\u0027isPromoNotClosed\u0027,\u0027isPromoClosed\u0027,\u0027_closedBudgetMarketingTi\u0027,\u0027_closedBudgetCostProd\u0027)\r\n\r\n    notClosedCalcPlanPromoSupportRSDF \u003d allCalcPlanPromoSupportRSDF\\\r\n      .where(col(\u0027promoStatusSystemName\u0027) !\u003d \u0027Closed\u0027)\r\n\r\n    closedCalcPlanPromoSupportRSDF \u003d allCalcPlanPromoSupportRSDF\\\r\n      .where(col(\u0027promoStatusSystemName\u0027) \u003d\u003d \u0027Closed\u0027)\r\n\r\n\r\n    # Current\r\n\r\n    notClosedCalcPlanPromoSupportDF \u003d notClosedCalcPlanPromoSupportDF\\\r\n      .withColumn(\u0027kPlan\u0027, when(((col(\u0027sumPromoLSV\u0027) !\u003d 0) \u0026 (col(\u0027PlanPromoLSV\u0027).isNotNull())), col(\u0027PlanPromoLSV\u0027) / col(\u0027sumPromoLSV\u0027)).otherwise(0))\\\r\n      .withColumn(\u0027PlanCalculation\u0027, when(col(\u0027onlyFinishedClosed\u0027) \u003d\u003d True, col(\u0027PlanCalculation\u0027))\\\r\n                  .otherwise((col(\u0027PlanCostTE\u0027) - col(\u0027closedBudgetMarketingTi\u0027)) * col(\u0027kPlan\u0027)).cast(DecimalType(30,2)))\\\r\n      .withColumn(\u0027PlanCostProd\u0027, when(col(\u0027onlyFinishedClosed\u0027) \u003d\u003d True, col(\u0027PlanCostProd\u0027))\\\r\n                  .otherwise((col(\u0027PlanProdCost\u0027) - col(\u0027closedBudgetCostProd\u0027)) * col(\u0027kPlan\u0027)).cast(DecimalType(30,2)))\r\n\r\n    notClosedCalcPlanPromoSupportDF \u003d notClosedCalcPlanPromoSupportDF\\\r\n      .join(budgetSubItemDF, budgetSubItemDF.Id \u003d\u003d notClosedCalcPlanPromoSupportDF.BudgetSubItemId, \u0027left\u0027)\\\r\n      .join(budgetItemDF, budgetItemDF.Id \u003d\u003d budgetSubItemDF.BudgetItemId, \u0027left\u0027)\\\r\n      .select(\\\r\n               notClosedCalcPlanPromoSupportDF[\u0027*\u0027]\r\n              ,budgetItemDF.Name.alias(\u0027BudgetName\u0027)\r\n             )\r\n    # RS\r\n    notClosedCalcPlanPromoSupportRSDF \u003d notClosedCalcPlanPromoSupportRSDF\\\r\n      .withColumn(\u0027kPlan\u0027, when(((col(\u0027sumPromoLSV\u0027) !\u003d 0) \u0026 (col(\u0027PlanPromoLSV\u0027).isNotNull())), col(\u0027PlanPromoLSV\u0027) / col(\u0027sumPromoLSV\u0027)).otherwise(0))\\\r\n      .withColumn(\u0027PlanCalculation\u0027, when(col(\u0027onlyFinishedClosed\u0027) \u003d\u003d True, col(\u0027PlanCalculation\u0027))\\\r\n              .otherwise((col(\u0027PlanCostTE\u0027) - col(\u0027closedBudgetMarketingTi\u0027)) * col(\u0027kPlan\u0027)).cast(DecimalType(30,2)))\\\r\n      .withColumn(\u0027PlanCostProd\u0027, when(col(\u0027onlyFinishedClosed\u0027) \u003d\u003d True, col(\u0027PlanCostProd\u0027))\\\r\n              .otherwise((col(\u0027PlanProdCost\u0027) - col(\u0027closedBudgetCostProd\u0027)) * col(\u0027kPlan\u0027)).cast(DecimalType(30,2)))\r\n\r\n    notClosedCalcPlanPromoSupportRSDF \u003d notClosedCalcPlanPromoSupportRSDF\\\r\n      .join(budgetSubItemDF, budgetSubItemDF.Id \u003d\u003d notClosedCalcPlanPromoSupportRSDF.BudgetSubItemId, \u0027left\u0027)\\\r\n      .join(budgetItemDF, budgetItemDF.Id \u003d\u003d budgetSubItemDF.BudgetItemId, \u0027left\u0027)\\\r\n      .select(\\\r\n           notClosedCalcPlanPromoSupportRSDF[\u0027*\u0027]\r\n          ,budgetItemDF.Name.alias(\u0027BudgetName\u0027)\r\n             )\r\n\r\n    xsitesDF \u003d notClosedCalcPlanPromoSupportDF.where(col(\u0027BudgetName\u0027) \u003d\u003d \u0027X-sites\u0027).select(\u0027Id\u0027,\u0027PlanCalculation\u0027,\u0027PlanCostProd\u0027)\r\n    catalogDF \u003d notClosedCalcPlanPromoSupportDF.where(col(\u0027BudgetName\u0027) \u003d\u003d \u0027Catalog\u0027).select(\u0027Id\u0027,\u0027PlanCalculation\u0027,\u0027PlanCostProd\u0027)\r\n    posmDF \u003d notClosedCalcPlanPromoSupportDF.where(col(\u0027BudgetName\u0027) \u003d\u003d \u0027POSM\u0027).select(\u0027Id\u0027,\u0027PlanCalculation\u0027,\u0027PlanCostProd\u0027)\r\n    tiMarketCostProdDF \u003d notClosedCalcPlanPromoSupportDF.select(\u0027Id\u0027,\u0027PlanCalculation\u0027,\u0027PlanCostProd\u0027)\r\n    \r\n    xsitesRSDF \u003d notClosedCalcPlanPromoSupportRSDF.where(col(\u0027BudgetName\u0027) \u003d\u003d \u0027X-sites\u0027).select(\u0027Id\u0027,\u0027PlanCalculation\u0027,\u0027PlanCostProd\u0027)\r\n    catalogRSDF \u003d notClosedCalcPlanPromoSupportRSDF.where(col(\u0027BudgetName\u0027) \u003d\u003d \u0027Catalog\u0027).select(\u0027Id\u0027,\u0027PlanCalculation\u0027,\u0027PlanCostProd\u0027)\r\n    posmRSDF \u003d notClosedCalcPlanPromoSupportRSDF.where(col(\u0027BudgetName\u0027) \u003d\u003d \u0027POSM\u0027).select(\u0027Id\u0027,\u0027PlanCalculation\u0027,\u0027PlanCostProd\u0027)\r\n    tiMarketCostProdRSDF \u003d notClosedCalcPlanPromoSupportRSDF.select(\u0027Id\u0027,\u0027PlanCalculation\u0027,\u0027PlanCostProd\u0027)\r\n\r\n\r\n    supportSchema \u003d StructType([\r\n      StructField(\"Id\", StringType(), True),\r\n      StructField(\"planSupportParameter\", DecimalType(30,2), True),\r\n      StructField(\"planCostProdParameter\", DecimalType(30,2), True)\r\n    ])\r\n\r\n    xsitesList \u003d xsitesDF\\\r\n      .groupBy(\u0027Id\u0027)\\\r\n      .agg(sum(\u0027PlanCalculation\u0027).alias(\u0027calcPlanPromoXSites\u0027)\\\r\n          ,sum(\u0027PlanCostProd\u0027).alias(\u0027calcPlanPromoCostProdXSites\u0027))\\\r\n      .collect()\r\n    xsitesDF \u003d spark.createDataFrame(xsitesList, supportSchema)\r\n    \r\n    xsitesRSList \u003d xsitesRSDF\\\r\n      .groupBy(\u0027Id\u0027)\\\r\n      .agg(sum(\u0027PlanCalculation\u0027).alias(\u0027calcPlanPromoXSites\u0027)\\\r\n       ,sum(\u0027PlanCostProd\u0027).alias(\u0027calcPlanPromoCostProdXSites\u0027))\\\r\n      .collect()\r\n    xsitesRSDF \u003d spark.createDataFrame(xsitesRSList, supportSchema)\r\n\r\n    # xsitesDF.show()\r\n\r\n    catalogList \u003d catalogDF\\\r\n      .groupBy(\u0027Id\u0027)\\\r\n      .agg(sum(\u0027PlanCalculation\u0027).alias(\u0027calcPlanPromoCatalogue\u0027)\\\r\n          ,sum(\u0027PlanCostProd\u0027).alias(\u0027calcPlanPromoCostProdCatalogue\u0027))\\\r\n      .collect()\r\n    catalogDF \u003d spark.createDataFrame(catalogList, supportSchema)\r\n    \r\n    catalogRSList \u003d catalogRSDF\\\r\n      .groupBy(\u0027Id\u0027)\\\r\n      .agg(sum(\u0027PlanCalculation\u0027).alias(\u0027calcPlanPromoCatalogue\u0027)\\\r\n       ,sum(\u0027PlanCostProd\u0027).alias(\u0027calcPlanPromoCostProdCatalogue\u0027))\\\r\n      .collect()\r\n    catalogRSDF \u003d spark.createDataFrame(catalogRSList, supportSchema)\r\n\r\n    posmList \u003d posmDF\\\r\n      .groupBy(\u0027Id\u0027)\\\r\n      .agg(sum(\u0027PlanCalculation\u0027).alias(\u0027calcPlanPromoPOSMInClient\u0027)\\\r\n          ,sum(\u0027PlanCostProd\u0027).alias(\u0027calcPlanPromoCostProdPOSMInClient\u0027))\\\r\n      .collect()\r\n    posmDF \u003d spark.createDataFrame(posmList, supportSchema)\r\n    \r\n    posmRSList \u003d posmRSDF\\\r\n     .groupBy(\u0027Id\u0027)\\\r\n     .agg(sum(\u0027PlanCalculation\u0027).alias(\u0027calcPlanPromoPOSMInClient\u0027)\\\r\n       ,sum(\u0027PlanCostProd\u0027).alias(\u0027calcPlanPromoCostProdPOSMInClient\u0027))\\\r\n     .collect()\r\n    posmRSDF \u003d spark.createDataFrame(posmRSList, supportSchema)\r\n\r\n    tiMarketCostProdList \u003d tiMarketCostProdDF\\\r\n      .groupBy(\u0027Id\u0027)\\\r\n      .agg(sum(\u0027PlanCalculation\u0027).alias(\u0027calcPlanPromoTIMarketing\u0027)\\\r\n          ,sum(\u0027PlanCostProd\u0027).alias(\u0027calcPlanPromoCostProduction\u0027))\\\r\n      .collect()\r\n    tiMarketCostProdDF \u003d spark.createDataFrame(tiMarketCostProdList, supportSchema)\r\n    \r\n    tiMarketCostProdRSList \u003d tiMarketCostProdRSDF\\\r\n      .groupBy(\u0027Id\u0027)\\\r\n      .agg(sum(\u0027PlanCalculation\u0027).alias(\u0027calcPlanPromoTIMarketing\u0027)\\\r\n       ,sum(\u0027PlanCostProd\u0027).alias(\u0027calcPlanPromoCostProduction\u0027))\\\r\n      .collect()\r\n    tiMarketCostProdRSDF \u003d spark.createDataFrame(tiMarketCostProdRSList, supportSchema)\r\n\r\n\r\n    notClosedPromoSupportDF \u003d notClosedCalcPlanPromoSupportDF\\\r\n      .drop(\u0027Id\u0027, \u0027Disabled\u0027, \u0027DeletedDate\u0027)\\\r\n      .withColumn(\u0027Id\u0027, col(\u0027pspId\u0027))\\\r\n      .withColumn(\u0027Disabled\u0027, col(\u0027pspDisabled\u0027))\\\r\n      .withColumn(\u0027DeletedDate\u0027, col(\u0027pspDeletedDate\u0027))\r\n\r\n    closedPromoSupportDF \u003d closedCalcPlanPromoSupportDF\\\r\n      .drop(\u0027Id\u0027, \u0027Disabled\u0027, \u0027DeletedDate\u0027)\\\r\n      .withColumn(\u0027Id\u0027, col(\u0027pspId\u0027))\\\r\n      .withColumn(\u0027Disabled\u0027, col(\u0027pspDisabled\u0027))\\\r\n      .withColumn(\u0027DeletedDate\u0027, col(\u0027pspDeletedDate\u0027))\r\n\r\n    notClosedPromoSupportDF \u003d notClosedPromoSupportDF.select(promoSupportPromoCols)\r\n    closedPromoSupportDF \u003d closedPromoSupportDF.select(promoSupportPromoCols)\r\n    #RS\r\n\r\n    notClosedPromoSupportRSDF \u003d notClosedCalcPlanPromoSupportRSDF\\\r\n      .drop(\u0027Id\u0027, \u0027Disabled\u0027, \u0027DeletedDate\u0027)\\\r\n      .withColumn(\u0027Id\u0027, col(\u0027pspId\u0027))\\\r\n      .withColumn(\u0027Disabled\u0027, col(\u0027pspDisabled\u0027))\\\r\n      .withColumn(\u0027DeletedDate\u0027, col(\u0027pspDeletedDate\u0027))\r\n\r\n    closedPromoSupportRSDF \u003d closedCalcPlanPromoSupportRSDF\\\r\n      .drop(\u0027Id\u0027, \u0027Disabled\u0027, \u0027DeletedDate\u0027)\\\r\n      .withColumn(\u0027Id\u0027, col(\u0027pspId\u0027))\\\r\n      .withColumn(\u0027Disabled\u0027, col(\u0027pspDisabled\u0027))\\\r\n      .withColumn(\u0027DeletedDate\u0027, col(\u0027pspDeletedDate\u0027))\r\n  \r\n    notClosedPromoSupportRSDF \u003d notClosedPromoSupportRSDF.select(promoSupportPromoCols)\r\n    closedPromoSupportRSDF \u003d closedPromoSupportRSDF.select(promoSupportPromoCols)\r\n\r\n    allCalcPlanPromoSupportPromoDF \u003d notClosedPromoSupportDF.union(closedPromoSupportDF)\r\n    allCalcPlanPromoSupportPromoRSDF \u003d notClosedPromoSupportRSDF.union(closedPromoSupportRSDF)\r\n\r\n    allCalcPlanPromoSupportPromoDF \u003d allCalcPlanPromoSupportPromoDF.union(allCalcPlanPromoSupportPromoRSDF)\r\n\r\n\r\n    allCalcPlanPromoSupportPromoIdsDF \u003d allCalcPlanPromoSupportPromoDF.select(col(\u0027Id\u0027))\r\n    notCalcPlanPromoSupportPromoDF \u003d activePromoSupportPromoDF.join(allCalcPlanPromoSupportPromoIdsDF, \u0027Id\u0027, \u0027left_anti\u0027).select(activePromoSupportPromoDF[\u0027*\u0027])\r\n\r\n    allPromoSupportPromoDF \u003d allCalcPlanPromoSupportPromoDF.union(notCalcPlanPromoSupportPromoDF)\r\n\r\n    # print(notClosedPromoSupportDF.count())\r\n    # print(closedPromoSupportDF.count())\r\n    # print(allCalcPlanPromoSupportPromoDF.count())\r\n\r\n    # print(notCalcPlanPromoSupportPromoDF.count())\r\n    # print(allPromoSupportPromoDF.count())\r\n\r\n    ####*Calculate BTL*\r\n\r\n    #####*Separate promo by closed and not closed. Get sum PlanPromoLSV and closed promo btl*\r\n\r\n    # allBtlDF \u003d btlDF\\\r\n    #   .select(\\\r\n    #            btlDF.Id.alias(\u0027bId\u0027)\r\n    #           ,btlDF.Number.alias(\u0027btlNumber\u0027)\r\n    #           ,btlDF.PlanBTLTotal.cast(DecimalType(30,6))\r\n    #          )\r\n\r\n    allCalcPlanBtlDF \u003d allBtlDF\\\r\n      .join(btlPromoDF, btlPromoDF.BTLId \u003d\u003d allBtlDF.bId, \u0027inner\u0027)\\\r\n      .join(calcPlanSupportPromoDF, calcPlanSupportPromoDF.Id \u003d\u003d btlPromoDF.PromoId, \u0027inner\u0027)\\\r\n      .select(\\\r\n               calcPlanSupportPromoDF[\u0027*\u0027]\r\n              ,allBtlDF[\u0027*\u0027]\r\n              ,btlPromoDF.Id.alias(\u0027bpId\u0027)\r\n             )\\\r\n      .dropDuplicates()\r\n\r\n    notClosedSumWindowBtl \u003d Window.partitionBy(\u0027bId\u0027).orderBy(col(\u0027isPromoNotClosed\u0027).desc())\r\n    closedSumWindowBtl \u003d Window.partitionBy(\u0027bId\u0027).orderBy(col(\u0027isPromoClosed\u0027).desc())\r\n\r\n    sumNotClosedGroupBtl \u003d allCalcPlanBtlDF\\\r\n      .groupBy([(col(\u0027promoStatusSystemName\u0027) !\u003d \u0027Closed\u0027).alias(\u0027isPromoNotClosed\u0027), \u0027bId\u0027])\\\r\n      .agg(sum(\u0027PlanPromoLSV\u0027).alias(\u0027sumPromoLSV\u0027))\\\r\n      .withColumn(\u0027Row_Number\u0027, row_number().over(notClosedSumWindowBtl))\\\r\n      .where(col(\u0027Row_Number\u0027) \u003d\u003d 1).drop(\u0027Row_Number\u0027)\r\n\r\n    sumClosedGroupBtl \u003d allCalcPlanBtlDF\\\r\n      .groupBy([(col(\u0027promoStatusSystemName\u0027) \u003d\u003d \u0027Closed\u0027).alias(\u0027isPromoClosed\u0027), \u0027bId\u0027])\\\r\n      .agg(sum(\u0027ActualPromoBTL\u0027).alias(\u0027_closedBudgetBTL\u0027))\\\r\n      .withColumn(\u0027Row_Number\u0027, row_number().over(closedSumWindowBtl))\\\r\n      .where(col(\u0027Row_Number\u0027) \u003d\u003d 1).drop(\u0027Row_Number\u0027)\r\n\r\n    sumClosedGroupBtl \u003d sumClosedGroupBtl\\\r\n      .select(\\\r\n               sumClosedGroupBtl.bId\r\n              ,sumClosedGroupBtl.isPromoClosed\r\n              ,sumClosedGroupBtl._closedBudgetBTL\r\n             )\\\r\n      .withColumn(\u0027closedBudgetBTL\u0027, when(col(\u0027isPromoClosed\u0027) \u003d\u003d \u0027true\u0027, col(\u0027_closedBudgetBTL\u0027)).otherwise(0))\r\n\r\n    allCalcPlanBtlDF \u003d allCalcPlanBtlDF\\\r\n      .join(sumNotClosedGroupBtl, \u0027bId\u0027, \u0027left\u0027)\\\r\n      .join(sumClosedGroupBtl, \u0027bId\u0027, \u0027left\u0027)\\\r\n      .drop(\u0027isPromoNotClosed\u0027,\u0027isPromoClosed\u0027,\u0027_closedBudgetBTL\u0027)\r\n\r\n    #####*Calculate BTL budgets*\r\n\r\n    allCalcPlanBtlDF \u003d allCalcPlanBtlDF\\\r\n      .withColumn(\u0027kPlan\u0027, when(((col(\u0027sumPromoLSV\u0027) !\u003d 0) \u0026 (col(\u0027PlanPromoLSV\u0027).isNotNull())), col(\u0027PlanPromoLSV\u0027) / col(\u0027sumPromoLSV\u0027)).otherwise(0))\\\r\n      .withColumn(\u0027PlanPromoBTL\u0027, when((col(\u0027promoStatusSystemName\u0027) !\u003d \u0027Closed\u0027) \u0026 (col(\u0027onlyFinishedClosed\u0027) \u003d\u003d False),\\\r\n                                 ((col(\u0027PlanBTLTotal\u0027) - col(\u0027closedBudgetBTL\u0027)) * col(\u0027kPlan\u0027))).otherwise(col(\u0027PlanPromoBTL\u0027)).cast(DecimalType(30,2)))\r\n\r\n    btlSchema \u003d StructType([\r\n      StructField(\"Id\", StringType(), True),\r\n      StructField(\"planBtlParameter\", DecimalType(30,2), True)\r\n    ])\r\n\r\n    promoBtlList \u003d allCalcPlanBtlDF.select(col(\u0027Id\u0027), col(\u0027PlanPromoBTL\u0027).alias(\u0027calcPlanPromoBTL\u0027)).collect()\r\n    promoBtlDF \u003d spark.createDataFrame(promoBtlList, btlSchema)\r\n\r\n    #####*Get result*\r\n\r\n    cols \u003d calcPlanSupportPromoDF.columns\r\n\r\n    calcPlanSupportPromoDF \u003d calcPlanSupportPromoDF\\\r\n      .join(xsitesDF, \u0027Id\u0027, \u0027left\u0027)\\\r\n      .withColumn(\u0027PlanPromoXSites\u0027, when(col(\u0027planSupportParameter\u0027).isNull(), col(\u0027PlanPromoXSites\u0027)).otherwise(col(\u0027planSupportParameter\u0027)))\\\r\n      .withColumn(\u0027PlanPromoCostProdXSites\u0027, when(col(\u0027planCostProdParameter\u0027).isNull(), col(\u0027PlanPromoCostProdXSites\u0027)).otherwise(col(\u0027planCostProdParameter\u0027)))\\\r\n      .select(cols)\r\n\r\n    calcPlanSupportPromoDF \u003d calcPlanSupportPromoDF\\\r\n      .join(xsitesRSDF, \u0027Id\u0027, \u0027left\u0027)\\\r\n      .withColumn(\u0027PlanPromoXSites\u0027, when(col(\u0027planSupportParameter\u0027).isNull(), col(\u0027PlanPromoXSites\u0027)).otherwise(col(\u0027planSupportParameter\u0027)))\\\r\n      .withColumn(\u0027PlanPromoCostProdXSites\u0027, when(col(\u0027planCostProdParameter\u0027).isNull(), col(\u0027PlanPromoCostProdXSites\u0027)).otherwise(col(\u0027planCostProdParameter\u0027)))\\\r\n      .select(cols)\r\n\r\n    calcPlanSupportPromoDF \u003d calcPlanSupportPromoDF\\\r\n      .join(catalogDF, \u0027Id\u0027, \u0027left\u0027)\\\r\n      .withColumn(\u0027PlanPromoCatalogue\u0027, when(col(\u0027planSupportParameter\u0027).isNull(), col(\u0027PlanPromoCatalogue\u0027)).otherwise(col(\u0027planSupportParameter\u0027)))\\\r\n      .withColumn(\u0027PlanPromoCostProdCatalogue\u0027, when(col(\u0027planCostProdParameter\u0027).isNull(), col(\u0027PlanPromoCostProdCatalogue\u0027)).otherwise(col(\u0027planCostProdParameter\u0027)))\\\r\n      .select(cols)\r\n\r\n    calcPlanSupportPromoDF \u003d calcPlanSupportPromoDF\\\r\n      .join(catalogRSDF, \u0027Id\u0027, \u0027left\u0027)\\\r\n      .withColumn(\u0027PlanPromoCatalogue\u0027, when(col(\u0027planSupportParameter\u0027).isNull(), col(\u0027PlanPromoCatalogue\u0027)).otherwise(col(\u0027planSupportParameter\u0027)))\\\r\n      .withColumn(\u0027PlanPromoCostProdCatalogue\u0027, when(col(\u0027planCostProdParameter\u0027).isNull(), col(\u0027PlanPromoCostProdCatalogue\u0027)).otherwise(col(\u0027planCostProdParameter\u0027)))\\\r\n      .select(cols)\r\n\r\n    calcPlanSupportPromoDF \u003d calcPlanSupportPromoDF\\\r\n      .join(posmDF, \u0027Id\u0027, \u0027left\u0027)\\\r\n      .withColumn(\u0027PlanPromoPOSMInClient\u0027, when(col(\u0027planSupportParameter\u0027).isNull(), col(\u0027PlanPromoPOSMInClient\u0027)).otherwise(col(\u0027planSupportParameter\u0027)))\\\r\n      .withColumn(\u0027PlanPromoCostProdPOSMInClient\u0027, when(col(\u0027planCostProdParameter\u0027).isNull(), col(\u0027PlanPromoCostProdPOSMInClient\u0027)).otherwise(col(\u0027planCostProdParameter\u0027)))\\\r\n      .select(cols)\r\n\r\n    calcPlanSupportPromoDF \u003d calcPlanSupportPromoDF\\\r\n      .join(posmRSDF, \u0027Id\u0027, \u0027left\u0027)\\\r\n      .withColumn(\u0027PlanPromoPOSMInClient\u0027, when(col(\u0027planSupportParameter\u0027).isNull(), col(\u0027PlanPromoPOSMInClient\u0027)).otherwise(col(\u0027planSupportParameter\u0027)))\\\r\n      .withColumn(\u0027PlanPromoCostProdPOSMInClient\u0027, when(col(\u0027planCostProdParameter\u0027).isNull(), col(\u0027PlanPromoCostProdPOSMInClient\u0027)).otherwise(col(\u0027planCostProdParameter\u0027)))\\\r\n      .select(cols)\r\n\r\n    calcPlanSupportPromoDF \u003d calcPlanSupportPromoDF\\\r\n      .join(tiMarketCostProdDF, \u0027Id\u0027, \u0027left\u0027)\\\r\n      .withColumn(\u0027PlanPromoTIMarketing\u0027, when(col(\u0027planSupportParameter\u0027).isNull(), col(\u0027PlanPromoTIMarketing\u0027)).otherwise(col(\u0027planSupportParameter\u0027)))\\\r\n      .withColumn(\u0027PlanPromoCostProduction\u0027, when(col(\u0027planCostProdParameter\u0027).isNull(), col(\u0027PlanPromoCostProduction\u0027)).otherwise(col(\u0027planCostProdParameter\u0027)))\\\r\n      .select(cols)\r\n\r\n    calcPlanSupportPromoDF \u003d calcPlanSupportPromoDF\\\r\n      .join(tiMarketCostProdRSDF, \u0027Id\u0027, \u0027left\u0027)\\\r\n      .withColumn(\u0027PlanPromoTIMarketing\u0027, when(col(\u0027planSupportParameter\u0027).isNull(), col(\u0027PlanPromoTIMarketing\u0027)).otherwise(col(\u0027planSupportParameter\u0027)))\\\r\n      .withColumn(\u0027PlanPromoCostProduction\u0027, when(col(\u0027planCostProdParameter\u0027).isNull(), col(\u0027PlanPromoCostProduction\u0027)).otherwise(col(\u0027planCostProdParameter\u0027)))\\\r\n      .select(cols)\r\n\r\n    calcPlanSupportPromoDF \u003d calcPlanSupportPromoDF\\\r\n      .join(promoBtlDF, \u0027Id\u0027, \u0027left\u0027)\\\r\n      .withColumn(\u0027PlanPromoBTL\u0027, when(col(\u0027planBtlParameter\u0027).isNull(), col(\u0027PlanPromoBTL\u0027)).otherwise(col(\u0027planBtlParameter\u0027)))\\\r\n      .select(cols)\r\n\r\n    print(\u0027Plan support parameters calculation completed!\u0027)\r\n    \r\n    return calcPlanSupportPromoDF,allPromoSupportPromoDF",
      "user": "anonymous",
      "dateUpdated": "2022-09-30 12:32:58.797",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660299262437_604569911",
      "id": "paragraph_1660299262437_604569911",
      "dateCreated": "2022-08-12 10:14:22.437",
      "status": "READY"
    }
  ],
  "name": "PLAN_SUPPORT_PARAMS_CALCULATION_PROCESS",
  "id": "2HABS7FVC",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}