{
  "paragraphs": [
    {
      "text": "%md\n####Notebook \"PROMO_FILTERING_FOR_RECALCULATION\". \n####*Get promoes filtering by changes incidents*.\n###### *Developer: [LLC Smart-Com](http://smartcom.software/), andrey.philushkin@effem.com*",
      "user": "anonymous",
      "dateUpdated": "2023-08-23T10:33:48+0000",
      "progress": 0,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>####Notebook &ldquo;PROMO_FILTERING_FOR_RECALCULATION&rdquo;.<br />\n####<em>Get promoes filtering by changes incidents</em>.</p>\n<h6><em>Developer: <a href=\"http://smartcom.software/\">LLC Smart-Com</a>, <a href=\"mailto:andrey.philushkin@effem.com\">andrey.philushkin@effem.com</a></em></h6>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742663_864436935",
      "id": "20220810-113330_1807397363",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "dateStarted": "2023-08-23T10:33:48+0000",
      "dateFinished": "2023-08-23T10:33:51+0000",
      "status": "FINISHED",
      "focus": true,
      "$$hashKey": "object:37166"
    },
    {
      "text": "%pyspark\ndef is_notebook() -> bool:\n    try:\n        shell = get_ipython().__class__.__name__\n        if shell == 'ZMQInteractiveShell':\n            return True   # Jupyter notebook or qtconsole\n        elif shell == 'TerminalInteractiveShell':\n            return False  # Terminal running IPython\n        else:\n            return False  # Other type (?)\n    except NameError:\n        return False      # Probably standard Python interpreter",
      "user": "anonymous",
      "dateUpdated": "2023-08-23T10:33:51+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_33350725",
      "id": "paragraph_1660132597099_1824680518",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "dateStarted": "2023-08-23T10:33:51+0000",
      "dateFinished": "2023-08-23T10:34:28+0000",
      "status": "FINISHED",
      "$$hashKey": "object:37167"
    },
    {
      "text": "%pyspark\nfrom pyspark.sql import SQLContext, DataFrame, Row, Window\nfrom pyspark.sql import SparkSession\nfrom pyspark.context import SparkContext\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport pyspark.sql.functions as F\nimport pandas as pd\nimport datetime, time\nimport os\nimport json\nimport subprocess\n",
      "user": "anonymous",
      "dateUpdated": "2023-08-23T10:34:28+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_1063608953",
      "id": "20220810-113330_500009667",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "dateStarted": "2023-08-23T10:34:28+0000",
      "dateFinished": "2023-08-23T10:34:30+0000",
      "status": "FINISHED",
      "$$hashKey": "object:37168"
    },
    {
      "text": "%pyspark\ndatesDimSchema = StructType([\n  StructField(\"OriginalDate\", DateType(), False),\n  StructField(\"MarsYear\", IntegerType(), False),\n  StructField(\"MarsPeriod\", IntegerType(), False),\n  StructField(\"MarsWeek\",  IntegerType(), False),\n  StructField(\"MarsDay\", IntegerType(),  False),\n  StructField(\"MarsPeriodName\", StringType(), False),\n  StructField(\"MarsPeriodFullName\",  StringType(), False),\n  StructField(\"MarsWeekName\", StringType(),  False),\n  StructField(\"MarsWeekFullName\", StringType(), False),\n  StructField(\"MarsDayName\", StringType(), False),\n  StructField(\"MarsDayFullName\",  StringType(), False),\n  StructField(\"CalendarYear\", IntegerType(),  False),\n  StructField(\"CalendarMonth\", IntegerType(), False),\n  StructField(\"CalendarDay\", IntegerType(), False),\n  StructField(\"CalendarDayOfYear\",  IntegerType(), False),\n  StructField(\"CalendarMonthName\", StringType(),  False),\n  StructField(\"CalendarMonthFullName\", StringType(), False),\n  StructField(\"CalendarYearWeek\", IntegerType(), False),\n  StructField(\"CalendarWeek\",  IntegerType(), False)\n])\n\ninputLogMessageSchema = StructType([\n  StructField(\"logMessage\", StringType(), False)\n])",
      "user": "anonymous",
      "dateUpdated": "2023-08-23T10:34:30+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_595543588",
      "id": "20220810-113330_677056882",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "dateStarted": "2023-08-23T10:34:30+0000",
      "dateFinished": "2023-08-23T10:34:30+0000",
      "status": "FINISHED",
      "$$hashKey": "object:37169"
    },
    {
      "title": "Set notebook args(for testing purposes only)",
      "text": "%pyspark\nif is_notebook():\n sys.argv=['','{\"MaintenancePathPrefix\": '\n '\"/JUPITER/RAW/#MAINTENANCE/2023-08-23_manual__2023-08-23T08%3A44%3A28.142273%2B00%3A00_\", '\n '\"ProcessDate\": \"2023-08-23\", \"Schema\": \"Jupiter\", \"HandlerId\": '\n '\"47fa610c-7508-480b-bbaa-715c56da7360\"}']\n \n sc.addPyFile(\"hdfs:///SRC/SHARED/EXTRACT_SETTING.py\")\n sc.addPyFile(\"hdfs:///SRC/SHARED/SUPPORT_FUNCTIONS.py\")",
      "user": "anonymous",
      "dateUpdated": "2023-08-23T10:34:30+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_1120557327",
      "id": "paragraph_1660132953861_1696933688",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "dateStarted": "2023-08-23T10:34:30+0000",
      "dateFinished": "2023-08-23T10:34:31+0000",
      "status": "FINISHED",
      "$$hashKey": "object:37170"
    },
    {
      "text": "%pyspark\nspark = SparkSession.builder.appName('Jupiter - PySpark').getOrCreate()\nsc = SparkContext.getOrCreate();\n\nimport EXTRACT_SETTING as es\n\nSETTING_RAW_DIR = es.SETTING_RAW_DIR\nDATE_DIR=es.DATE_DIR\n\nEXTRACT_ENTITIES_AUTO_PATH = f'{es.HDFS_PREFIX}{es.MAINTENANCE_PATH_PREFIX}EXTRACT_ENTITIES_AUTO.csv'\nprocessDate=es.processDate\npipelineRunId=es.pipelineRunId\nhandlerId=es.input_params.get(\"HandlerId\")\n\nprint(f'EXTRACT_ENTITIES_AUTO_PATH={EXTRACT_ENTITIES_AUTO_PATH}')\n\nimport SUPPORT_FUNCTIONS as sp",
      "user": "anonymous",
      "dateUpdated": "2023-08-23T10:34:31+0000",
      "progress": 100,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "INPUT_PARAMS={\"MaintenancePathPrefix\": \"/JUPITER/RAW/#MAINTENANCE/2023-08-23_manual__2023-08-23T08%3A44%3A28.142273%2B00%3A00_\", \"ProcessDate\": \"2023-08-23\", \"Schema\": \"Jupiter\", \"HandlerId\": \"47fa610c-7508-480b-bbaa-715c56da7360\"}\nSETTINGS_PATH=hdfs:///JUPITER/RAW/#MAINTENANCE/2023-08-23_manual__2023-08-23T08%3A44%3A28.142273%2B00%3A00_PARAMETERS.csv\nhdfs:///JUPITER/RAW/#MAINTENANCE/2023-08-23_manual__2023-08-23T08%3A44%3A28.142273%2B00%3A00_PARAMETERS.csv\n\nprocessDate: 2023-08-23\npipelineRunId: manual__2023-08-23T08%3A44%3A28.142273%2B00%3A00\npipelineSubfolderName: None\n\nSETTING_RAW_DIR: hdfs:///JUPITER/RAW\nSETTING_PROCESS_DIR: hdfs:///JUPITER/PROCESS\nSETTING_OUTPUT_DIR: hdfs:///JUPITER/OUTPUT\nMAINTENANCE_PATH_PREFIX: /JUPITER/RAW/#MAINTENANCE/2023-08-23_manual__2023-08-23T08%3A44%3A28.142273%2B00%3A00_\nSYSTEM_NAME: JUPITER\nSETTING_BRANCH_NAME: \nOther settings - list \"systemParametersDF\" data frame\nEXTRACT_ENTITIES_AUTO_PATH=hdfs:///JUPITER/RAW/#MAINTENANCE/2023-08-23_manual__2023-08-23T08%3A44%3A28.142273%2B00%3A00_EXTRACT_ENTITIES_AUTO.csv\nDefined functions:\ngetFilesList(path) - list files recursively\n    path - root path\ngetShowString(df, n=20, truncate=True, vertical=False) - prints Spark DataFrame\ngetSchemasMap(schemas_dir) - creates dictionanry with Spark Schemas, schemas_dir - directory with json files with schemas\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=0",
              "$$hashKey": "object:39036"
            },
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=1",
              "$$hashKey": "object:39037"
            },
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=2",
              "$$hashKey": "object:39038"
            },
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=3",
              "$$hashKey": "object:39039"
            },
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=4",
              "$$hashKey": "object:39040"
            },
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=5",
              "$$hashKey": "object:39041"
            },
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=6",
              "$$hashKey": "object:39042"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_1140937262",
      "id": "20220810-113330_824588436",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "dateStarted": "2023-08-23T10:34:31+0000",
      "dateFinished": "2023-08-23T10:34:41+0000",
      "status": "FINISHED",
      "$$hashKey": "object:37171"
    },
    {
      "text": "%pyspark\nschema = es.input_params.get(\"Schema\")",
      "user": "anonymous",
      "dateUpdated": "2023-08-23T10:34:41+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_2117869420",
      "id": "20220810-113330_449807321",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "dateStarted": "2023-08-23T10:34:41+0000",
      "dateFinished": "2023-08-23T10:34:41+0000",
      "status": "FINISHED",
      "$$hashKey": "object:37172"
    },
    {
      "text": "%pyspark\r\nDIRECTORY = SETTING_RAW_DIR + '/SOURCES/'\r\n\r\nPROMO_PATH = DIRECTORY + 'JUPITER/Promo'\r\nPROMOSTATUS_PATH = DIRECTORY + 'JUPITER/PromoStatus'\r\nPRODUCT_PATH = DIRECTORY + 'JUPITER/Product'\r\nBRANDTECH_PATH = DIRECTORY + 'JUPITER/BrandTech'\r\nPROMOPRODUCT_PATH = DIRECTORY + 'JUPITER/PromoProduct'\r\nCLIENTHIERARCHY_PATH = DIRECTORY + 'JUPITER/ClientTreeHierarchyView'\r\nPROMOPRODUCTTREE_PATH = DIRECTORY + 'JUPITER/PromoProductTree'\r\nCHANGESINCIDENTS_PATH = DIRECTORY + 'JUPITER/ChangesIncident'\r\nPRODUCTCHANGEINCIDENTS_PATH = DIRECTORY + 'JUPITER/ProductChangeIncident'\r\n\r\nDATESDIM_PATH = DIRECTORY + 'UNIVERSALCATALOG/MARS_UNIVERSAL_CALENDAR.csv'\r\n\r\nASSORTMENTMATRIX_PATH = DIRECTORY + 'JUPITER/AssortmentMatrix'\r\nPRICELIST_PATH = DIRECTORY + 'JUPITER/PriceList'\r\nBASELINE_PATH = DIRECTORY + 'JUPITER/BaseLine'\r\nINCREASEBASELINE_PATH = DIRECTORY + 'JUPITER/IncreaseBaseLine'\r\nSHARES_PATH = DIRECTORY + 'JUPITER/ClientTreeBrandTech'\r\nCLIENTTREE_PATH = DIRECTORY + 'JUPITER/ClientTree'\r\nPRODUCTTREE_PATH = DIRECTORY + 'JUPITER/ProductTree'\r\nINCREMENTAL_PATH = DIRECTORY + 'JUPITER/IncrementalPromo'\r\nCOGS_PATH = DIRECTORY + 'JUPITER/COGS'\r\nCOGSTN_PATH = DIRECTORY + 'JUPITER/PlanCOGSTn'\r\nTI_PATH = DIRECTORY + 'JUPITER/TradeInvestment'\r\nCORRECTION_PATH = DIRECTORY + 'JUPITER/PromoProductsCorrection'\r\nPLANPOSTPROMOEFFECT_PATH = DIRECTORY + 'JUPITER/PlanPostPromoEffect'\r\n\r\nBLOCKEDPROMO_OUTPUT_PATH = es.SETTING_PROCESS_DIR + '/BlockedPromo/BlockedPromo.parquet'\r\nBLOCKEDPROMO_OUTPUT_PATH_CSV = es.SETTING_PROCESS_DIR + '/BlockedPromo/BlockedPromo.CSV'\r\n\r\nBLOCKEDINCREASEPROMO_OUTPUT_PATH = es.SETTING_PROCESS_DIR + '/BlockedPromo/BlockedIncreasePromo.parquet'\r\nBLOCKEDINCREASEPROMO_OUTPUT_PATH_CSV = es.SETTING_PROCESS_DIR + '/BlockedPromo/BlockedIncreasePromo.CSV'\r\n\r\n\r\nCHANGESINCIDENTS_OUTPUT_PATH = es.SETTING_OUTPUT_DIR + '/ChangesIncident/ChangesIncident.CSV'\r\nPRODUCTCHANGEINCIDENTS_OUTPUT_PATH = es.SETTING_OUTPUT_DIR + '/ProductChangeIncident/ProductChangeIncident.CSV'\r\n\r\nINPUT_FILE_LOG_PATH = es.SETTING_PROCESS_DIR + '/Logs/' + handlerId + '.csv'\r\n# OUTPUT_LOG_PATH =  es.SETTING_PROCESS_DIR + '/Logs/'\r\n# OUTPUT_FILE_LOG_PATH = OUTPUT_LOG_PATH + handlerId + '.csv'\r\n# OUTPUT_TEMP_FILE_LOG_PATH = OUTPUT_LOG_PATH + handlerId + 'temp.csv'",
      "user": "anonymous",
      "dateUpdated": "2023-08-23T10:34:42+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_1757720937",
      "id": "20220810-113330_1797622225",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "dateStarted": "2023-08-23T10:34:42+0000",
      "dateFinished": "2023-08-23T10:34:42+0000",
      "status": "FINISHED",
      "$$hashKey": "object:37173"
    },
    {
      "title": "Load raw entities schemas from json files to map",
      "text": "%pyspark\nSCHEMAS_DIR=SETTING_RAW_DIR + '/SCHEMAS/'\nschemas_map = sp.getSchemasMap(SCHEMAS_DIR)",
      "user": "anonymous",
      "dateUpdated": "2023-08-23T10:34:42+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_884920035",
      "id": "paragraph_1660198152320_1236962199",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "dateStarted": "2023-08-23T10:34:42+0000",
      "dateFinished": "2023-08-23T10:34:43+0000",
      "status": "FINISHED",
      "$$hashKey": "object:37174"
    },
    {
      "text": "%pyspark\r\npromoDF = spark.read.csv(PROMO_PATH,sep=\"\\u0001\",header=True,schema=schemas_map[\"Promo\"])\\\r\n.withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\\\r\n.withColumn(\"InOut\",col(\"InOut\").cast(BooleanType()))\r\npromoStatusDF = spark.read.csv(PROMOSTATUS_PATH,sep=\"\\u0001\",header=True,schema=schemas_map[\"PromoStatus\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\nproductDF = spark.read.csv(PRODUCT_PATH,sep=\"\\u0001\",header=True,schema=schemas_map[\"Product\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\nbrandTechDF = spark.read.csv(BRANDTECH_PATH,sep=\"\\u0001\",header=True,schema=schemas_map[\"BrandTech\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\npromoProductDF = spark.read.csv(PROMOPRODUCT_PATH,sep=\"\\u0001\",header=True,schema=schemas_map[\"PromoProduct\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\nclientHierarchyDF = spark.read.csv(CLIENTHIERARCHY_PATH,sep=\"\\u0001\",header=True,schema=schemas_map[\"ClientTreeHierarchyView\"])\r\npromoProductTreeDF = spark.read.csv(PROMOPRODUCTTREE_PATH,sep=\"\\u0001\",header=True,schema=schemas_map[\"PromoProductTree\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\nchangesIncidentsDF = spark.read.csv(CHANGESINCIDENTS_PATH,sep=\"\\u0001\",header=True,schema=schemas_map[\"ChangesIncident\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\nproductChangeIncidentsDF = spark.read.csv(PRODUCTCHANGEINCIDENTS_PATH,sep=\"\\u0001\",header=True,schema=schemas_map[\"ProductChangeIncident\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\nassortmentMatrixDF = spark.read.csv(ASSORTMENTMATRIX_PATH,sep=\"\\u0001\",header=True,schema=schemas_map[\"AssortmentMatrix\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\npriceListDF = spark.read.csv(PRICELIST_PATH,sep=\"\\u0001\",header=True,schema=schemas_map[\"PriceList\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType())).withColumn(\"FuturePriceMarker\",col(\"FuturePriceMarker\").cast(BooleanType()))\r\nbaselineDF = spark.read.csv(BASELINE_PATH,sep=\"\\u0001\",header=True,schema=schemas_map[\"BaseLine\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\nincreaseBaselineDF = spark.read.csv(INCREASEBASELINE_PATH,sep=\"\\u0001\",header=True,schema=schemas_map[\"BaseLine\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\nsharesDF = spark.read.csv(SHARES_PATH,sep=\"\\u0001\",header=True,schema=schemas_map[\"ClientTreeBrandTech\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\nclientTreeDF = spark.read.csv(CLIENTTREE_PATH,sep=\"\\u0001\",header=True,schema=schemas_map[\"ClientTree\"])\r\nproductTreeDF = spark.read.csv(PRODUCTTREE_PATH,sep=\"\\u0001\",header=True,schema=schemas_map[\"ProductTree\"])\r\ncorrectionDF = spark.read.csv(CORRECTION_PATH,sep=\"\\u0001\",header=True,schema=schemas_map[\"PromoProductsCorrection\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\nplanPostPromoEffectDF = spark.read.csv(PLANPOSTPROMOEFFECT_PATH,sep=\"\\u0001\",header=True,schema=schemas_map[\"PlanPostPromoEffect\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\nincrementalDF = spark.read.csv(INCREMENTAL_PATH,sep=\"\\u0001\",header=True,schema=schemas_map[\"IncrementalPromo\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\ncogsDF = spark.read.csv(COGS_PATH,sep=\"\\u0001\",header=True,schema=schemas_map[\"COGS\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\ncogsTnDF = spark.read.csv(COGSTN_PATH,sep=\"\\u0001\",header=True,schema=schemas_map[\"PlanCOGSTn\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\ntiDF = spark.read.csv(TI_PATH,sep=\"\\u0001\",header=True,schema=schemas_map[\"TradeInvestment\"]).withColumn(\"Disabled\",col(\"Disabled\").cast(BooleanType()))\r\ndatesDF = spark.read.format(\"csv\").option(\"delimiter\",\"|\").option(\"header\",\"true\").schema(datesDimSchema).load(DATESDIM_PATH)",
      "user": "anonymous",
      "dateUpdated": "2023-08-23T10:34:43+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_1121454304",
      "id": "20220810-113330_453367110",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "dateStarted": "2023-08-23T10:34:43+0000",
      "dateFinished": "2023-08-23T10:34:44+0000",
      "status": "FINISHED",
      "$$hashKey": "object:37175"
    },
    {
      "text": "%pyspark\n",
      "user": "anonymous",
      "dateUpdated": "2023-08-23T10:34:44+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_1754549945",
      "id": "paragraph_1681635299029_1224991750",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "dateStarted": "2023-08-23T10:34:44+0000",
      "dateFinished": "2023-08-23T10:34:44+0000",
      "status": "FINISHED",
      "$$hashKey": "object:37176"
    },
    {
      "text": "%pyspark\ntry:\n#   dbutils.fs.ls(INPUT_FILE_LOG_PATH)\n inputLogMessageDF = spark.read.format(\"csv\").option(\"delimiter\",\"\\u0001\").option(\"header\",\"true\").load(INPUT_FILE_LOG_PATH)\n print('Log has been already made')\nexcept:\n inputLogMessageDF = spark.createDataFrame(sc.emptyRDD(), inputLogMessageSchema)\n print('Init log')\n  \n",
      "user": "anonymous",
      "dateUpdated": "2023-08-23T10:34:44+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Init log\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_862564464",
      "id": "20220810-113330_468171818",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "dateStarted": "2023-08-23T10:34:44+0000",
      "dateFinished": "2023-08-23T10:34:45+0000",
      "status": "FINISHED",
      "$$hashKey": "object:37177"
    },
    {
      "text": "%pyspark\nnotCheckPromoStatusList = ['Draft', 'Cancelled', 'Deleted', 'Closed', 'Started', 'Finished']\nactualCogsTiRecalculationPromoStatusList = ['Finished', 'Closed']\n\n#tpm modes for recalculation: Current, RS, RA\ncalcTPMmodes = [0, 1, 2]",
      "user": "anonymous",
      "dateUpdated": "2023-08-23T10:34:45+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_184450780",
      "id": "20220810-113330_2102408644",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "dateStarted": "2023-08-23T10:34:45+0000",
      "dateFinished": "2023-08-23T10:34:45+0000",
      "status": "FINISHED",
      "$$hashKey": "object:37178"
    },
    {
      "text": "%pyspark\npromoFilterDF = promoDF\\\n  .join(promoStatusDF, promoStatusDF.Id == promoDF.PromoStatusId, 'inner')\\\n  .select(\\\n           promoDF.Id\n          ,promoDF.Disabled\n          ,promoDF.TPMmode\n          ,promoDF.Number\n          ,promoDF.BrandTechId\n          ,promoDF.ClientTreeKeyId\n          ,promoDF.ClientTreeId\n          ,promoDF.InOut\n          ,date_add(to_date(promoDF.DispatchesStart, 'yyyy-MM-dd'), 1).alias('DispatchesStart')\n          ,date_add(to_date(promoDF.StartDate, 'yyyy-MM-dd'), 1).alias('StartDate')\n          ,date_add(to_date(promoDF.EndDate, 'yyyy-MM-dd'), 1).alias('EndDate')\n          ,promoStatusDF.SystemName.alias('promoStatusName')\n         )\\\n  .where((~col('promoStatusName').isin(*notCheckPromoStatusList)) & (col('Disabled') == 'False') & col('TPMmode').isin(*calcTPMmodes))\n\nactualCogsTiRecalculationPromoDF = promoDF\\\n  .join(promoStatusDF, promoStatusDF.Id == promoDF.PromoStatusId, 'inner')\\\n  .select(\\\n           promoDF.Id\n          ,promoDF.Disabled\n          ,promoDF.TPMmode\n          ,promoDF.Number\n          ,promoStatusDF.SystemName.alias('promoStatusName')\n         )\\\n  .where((col('promoStatusName').isin(*actualCogsTiRecalculationPromoStatusList)) & (col('Disabled') == 'False') & col('TPMmode').isin(*calcTPMmodes))\n\npromoFilterDF = promoFilterDF\\\n  .join(brandTechDF, brandTechDF.Id == promoFilterDF.BrandTechId, 'left')\\\n  .select(\\\n           promoFilterDF['*']\n          ,brandTechDF.BrandsegTechsub.alias('promoBrandTechName')\n         )\\\n\nactivePromoProductDF = promoProductDF.where((col('Disabled') == 'false') & col('TPMmode').isin(*calcTPMmodes))\nactiveClientTreeDF = clientTreeDF.where(col('EndDate').isNull())\n\nactiveClientTreeList = activeClientTreeDF.collect()",
      "user": "anonymous",
      "dateUpdated": "2023-08-25T05:07:45+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=7",
              "$$hashKey": "object:39418"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_755094720",
      "id": "20220810-113330_981221566",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "dateStarted": "2023-08-23T10:44:23+0000",
      "dateFinished": "2023-08-23T10:44:24+0000",
      "status": "FINISHED",
      "$$hashKey": "object:37179"
    },
    {
      "text": "%pyspark\nactiveChangesIncidentsDF = changesIncidentsDF\\\n  .withColumn('ItemId', upper(col('ItemId')))\\\n  .where(col('ProcessDate').isNull())\n\nprocessChangesIncidentsDF = changesIncidentsDF\\\n  .where(~col('ProcessDate').isNull())\\\n  .drop('#QCCount')\n\nassortmentMatrixCiIdsDF = activeChangesIncidentsDF.where(col('DirectoryName') == 'AssortmentMatrix').select(activeChangesIncidentsDF.ItemId.alias('Id'))\npriceListCiIdsDF = activeChangesIncidentsDF.where(col('DirectoryName') == 'PriceList').select(activeChangesIncidentsDF.ItemId.alias('Id'))\nbaselineCiIdsDF = activeChangesIncidentsDF.where(col('DirectoryName') == 'BaseLine').select(activeChangesIncidentsDF.ItemId.alias('Id'))\nincreaseBaselineCiIdsDF = activeChangesIncidentsDF.where(col('DirectoryName') == 'IncreaseBaseLine').select(activeChangesIncidentsDF.ItemId.alias('Id'))\nsharesCiIdsDF = activeChangesIncidentsDF.where(col('DirectoryName') == 'ClientTreeBrandTech').select(activeChangesIncidentsDF.ItemId.alias('Id'))\nclientTreeCiIdsDF = activeChangesIncidentsDF.where(col('DirectoryName') == 'ClientTree').select(activeChangesIncidentsDF.ItemId.alias('Id'))\nproductTreeCiIdsDF = activeChangesIncidentsDF.where(col('DirectoryName') == 'ProductTree').select(activeChangesIncidentsDF.ItemId.alias('Id'))\ncorrectionCiIdsDF = activeChangesIncidentsDF.where(col('DirectoryName') == 'PromoProductsCorrection').select(activeChangesIncidentsDF.ItemId.alias('Id'))\nincrementalCiIdsDF = activeChangesIncidentsDF.where(col('DirectoryName') == 'IncrementalPromo').select(activeChangesIncidentsDF.ItemId.alias('Id'))\ncogsCiIdsDF = activeChangesIncidentsDF.where(col('DirectoryName') == 'COGS').select(activeChangesIncidentsDF.ItemId.alias('Id'))\ncogsTnCiIdsDF = activeChangesIncidentsDF.where(col('DirectoryName') == 'PlanCOGSTn').select(activeChangesIncidentsDF.ItemId.alias('Id'))\ntiCiIdsDF = activeChangesIncidentsDF.where(col('DirectoryName') == 'TradeInvestment').select(activeChangesIncidentsDF.ItemId.alias('Id'))\nactualCogsCiIdsDF = activeChangesIncidentsDF.where(col('DirectoryName') == 'PromoActualCOGS').select(activeChangesIncidentsDF.ItemId.alias('Id'))\nactualCogsTnCiIdsDF = activeChangesIncidentsDF.where(col('DirectoryName') == 'PromoActualCOGSTn').select(activeChangesIncidentsDF.ItemId.alias('Id'))\nactualTiCiIdsDF = activeChangesIncidentsDF.where(col('DirectoryName') == 'PromoActualTradeInvestment').select(activeChangesIncidentsDF.ItemId.alias('Id'))\npromoScenarioIdsDF = activeChangesIncidentsDF.where(col('DirectoryName') == 'PromoScenario').select(activeChangesIncidentsDF.ItemId.alias('Id'))\nppeCiIdsDF = activeChangesIncidentsDF.where(col('DirectoryName') == 'PlanPostPromoEffect').select(activeChangesIncidentsDF.ItemId.alias('Id'))\n\nprint('total incidents count:', activeChangesIncidentsDF.count())\nprint('assortmentMatrix incidents count:', assortmentMatrixCiIdsDF.count())\nprint('priceList incidents count:', priceListCiIdsDF.count())\nprint('baseline incidents count:', baselineCiIdsDF.count())\nprint('increase baseline incidents count:', increaseBaselineCiIdsDF.count())\nprint('shares incidents count:', sharesCiIdsDF.count())\nprint('clientTree incidents count:', clientTreeCiIdsDF.count())\nprint('productTree incidents count:', productTreeCiIdsDF.count())\nprint('correction incidents count:', correctionCiIdsDF.count())\nprint('incremental incidents count:', incrementalCiIdsDF.count())\nprint('cogs incidents count:', cogsCiIdsDF.count())\nprint('cogstn incidents count:', cogsTnCiIdsDF.count())\nprint('ti incidents count:', tiCiIdsDF.count())\nprint('actual cogs incidents count:', actualCogsCiIdsDF.count())\nprint('actual cogstn incidents count:', actualCogsTnCiIdsDF.count())\nprint('actual ti incidents count:', actualTiCiIdsDF.count())\nprint('promo scenario incidents count:', promoScenarioIdsDF.count())\nprint('plan ppe incidents count:', ppeCiIdsDF.count())",
      "user": "anonymous",
      "dateUpdated": "2023-08-23T10:44:27+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "total incidents count: 1120\nassortmentMatrix incidents count: 3\npriceList incidents count: 1116\nbaseline incidents count: 0\nincrease baseline incidents count: 0\nshares incidents count: 0\nclientTree incidents count: 0\nproductTree incidents count: 0\ncorrection incidents count: 0\nincremental incidents count: 0\ncogs incidents count: 0\ncogstn incidents count: 0\nti incidents count: 0\nactual cogs incidents count: 0\nactual cogstn incidents count: 0\nactual ti incidents count: 0\npromo scenario incidents count: 0\nplan ppe incidents count: 1\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=8",
              "$$hashKey": "object:39476"
            },
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=9",
              "$$hashKey": "object:39477"
            },
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=10",
              "$$hashKey": "object:39478"
            },
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=11",
              "$$hashKey": "object:39479"
            },
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=12",
              "$$hashKey": "object:39480"
            },
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=13",
              "$$hashKey": "object:39481"
            },
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=14",
              "$$hashKey": "object:39482"
            },
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=15",
              "$$hashKey": "object:39483"
            },
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=16",
              "$$hashKey": "object:39484"
            },
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=17",
              "$$hashKey": "object:39485"
            },
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=18",
              "$$hashKey": "object:39486"
            },
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=19",
              "$$hashKey": "object:39487"
            },
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=20",
              "$$hashKey": "object:39488"
            },
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=21",
              "$$hashKey": "object:39489"
            },
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=22",
              "$$hashKey": "object:39490"
            },
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=23",
              "$$hashKey": "object:39491"
            },
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=24",
              "$$hashKey": "object:39492"
            },
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=25",
              "$$hashKey": "object:39493"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_1992024779",
      "id": "20220810-113330_258350418",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "dateStarted": "2023-08-23T10:44:27+0000",
      "dateFinished": "2023-08-23T10:44:31+0000",
      "status": "FINISHED",
      "$$hashKey": "object:37180"
    },
    {
      "text": "%pyspark\nactiveProductChangeIncidentsDF = productChangeIncidentsDF\\\n  .where(col('RecalculationProcessDate').isNull())\n\nprocessProductChangeIncidentsDF = productChangeIncidentsDF\\\n  .where(~col('RecalculationProcessDate').isNull())\\\n  .drop('#QCCount')\n\nprint('total product incidents count:', activeProductChangeIncidentsDF.count())",
      "user": "anonymous",
      "dateUpdated": "2023-08-23T10:44:37+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "total product incidents count: 10489\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "https://ui-c9q0pukbr2ivf12r83k8-rc1a-dataproc-c-jffofjwfk66ktxhi-38755.dataproc-ui.yandexcloud.net/jobs/job?id=26",
              "$$hashKey": "object:39619"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_42242859",
      "id": "20220810-113330_700905080",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "dateStarted": "2023-08-23T10:44:37+0000",
      "dateFinished": "2023-08-23T10:44:38+0000",
      "status": "FINISHED",
      "$$hashKey": "object:37181"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by assortment matrix  changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>#####<em>Get promo numbers filtered by assortment matrix  changes incidents</em></p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_1523520119",
      "id": "20220810-113330_1430522001",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37182"
    },
    {
      "text": "%pyspark\nassortmentMatrixCiDF = assortmentMatrixCiIdsDF\\\n  .join(assortmentMatrixDF, 'Id', 'inner')\\\n  .select(\\\n           assortmentMatrixDF.ClientTreeId\n          ,date_add(to_date(assortmentMatrixDF.StartDate, 'yyyy-MM-dd'), 1).alias('StartDate')\n          ,date_add(to_date(assortmentMatrixDF.EndDate, 'yyyy-MM-dd'), 1).alias('EndDate')\n         )\n\npromoByAssortmentMatrixCiDF = assortmentMatrixCiDF\\\n  .join(promoFilterDF,\n        [\\\n          assortmentMatrixCiDF.ClientTreeId == promoFilterDF.ClientTreeKeyId\n         ,assortmentMatrixCiDF.StartDate <= promoFilterDF.DispatchesStart\n         ,assortmentMatrixCiDF.EndDate >= promoFilterDF.DispatchesStart\n        ]\\\n        ,'inner')\\\n  .where(promoFilterDF.InOut == 'false')\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_1162299781",
      "id": "20220810-113330_224779063",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37183"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by pricelist changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>#####<em>Get promo numbers filtered by pricelist changes incidents</em></p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_1483248073",
      "id": "20220810-113330_852937540",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37184"
    },
    {
      "text": "%pyspark\npriceListCiDF = priceListCiIdsDF\\\n  .join(priceListDF, 'Id', 'inner')\\\n  .select(\\\n           priceListDF.ClientTreeId\n          ,priceListDF.FuturePriceMarker \n          ,date_add(to_date(priceListDF.StartDate, 'yyyy-MM-dd'), 1).alias('StartDate')\n          ,date_add(to_date(priceListDF.EndDate, 'yyyy-MM-dd'), 1).alias('EndDate')\n         )\n\npromoByPriceListCiDF = priceListCiDF\\\n  .where(priceListCiDF.FuturePriceMarker == 'false')\\\n  .join(promoFilterDF,\n        [\\\n          priceListCiDF.ClientTreeId == promoFilterDF.ClientTreeKeyId\n         ,priceListCiDF.StartDate <= promoFilterDF.DispatchesStart\n         ,priceListCiDF.EndDate >= promoFilterDF.DispatchesStart\n        ]\\\n        ,'inner')\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()\n\npromoByIncreasePriceListCiDF = priceListCiDF\\\n  .where(priceListCiDF.FuturePriceMarker == 'true')\\\n  .join(promoFilterDF,\n        [\\\n          priceListCiDF.ClientTreeId == promoFilterDF.ClientTreeKeyId\n         ,priceListCiDF.StartDate <= promoFilterDF.DispatchesStart\n         ,priceListCiDF.EndDate >= promoFilterDF.DispatchesStart\n        ]\\\n        ,'inner')\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_1021135933",
      "id": "20220810-113330_742235728",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37185"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by baseline changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>#####<em>Get promo numbers filtered by baseline changes incidents</em></p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_1050311065",
      "id": "20220810-113330_1506286534",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37186"
    },
    {
      "text": "%pyspark\n@udf\ndef getDemandCode(objectId):\n  c = [x for x in activeClientTreeList if x.ObjectId == objectId]\n  if len(c) == 0:\n    return ''\n  while (len(c) != 0) & (c[0].Type != 'root') & ((c[0].DemandCode == '') | (c[0].DemandCode is None)):\n    c = [x for x in activeClientTreeList if x.ObjectId == c[0].parentId]\n    if len(c) == 0: \n      break\n  if len(c) == 0:\n    return ''\n  else:\n    return c[0].DemandCode",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_28592985",
      "id": "20220810-113330_2060967851",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37187"
    },
    {
      "text": "%pyspark\nbaselineCiDF = baselineCiIdsDF\\\n  .join(baselineDF, 'Id', 'inner')\\\n  .select(\\\n           baselineDF.ProductId\n          ,baselineDF.DemandCode\n          ,date_add(to_date(baselineDF.StartDate, 'yyyy-MM-dd'), 1).alias('StartDate')\n         )\n\nincreaseBaselineCiDF = increaseBaselineCiIdsDF\\\n  .join(increaseBaselineDF, 'Id', 'inner')\\\n  .select(\\\n           increaseBaselineDF.ProductId\n          ,increaseBaselineDF.DemandCode\n          ,date_add(to_date(increaseBaselineDF.StartDate, 'yyyy-MM-dd'), 1).alias('StartDate')\n         )\n\n#baselineCiDF = baselineCiDF.union(increaseBaselineCiDF)\n\nbaselineCiDF = baselineCiDF\\\n  .join(datesDF, datesDF.OriginalDate == baselineCiDF.StartDate, 'inner')\\\n  .select(\\\n          baselineCiDF['*']\n         ,datesDF.MarsWeekFullName\n         )\n\nincreaseBaselineCiDF = increaseBaselineCiDF\\\n  .join(datesDF, datesDF.OriginalDate == increaseBaselineCiDF.StartDate, 'inner')\\\n  .select(\\\n          increaseBaselineCiDF['*']\n         ,datesDF.MarsWeekFullName\n         )\n\npromoDemandDF = promoFilterDF\\\n  .select(\\\n           col('Id').alias('promoId')\n          ,col('Number').alias('promoNumber')\n          ,col('BrandTechId').alias('promoBrandTechId')\n          ,promoFilterDF.StartDate.alias('promoStartDate')\n          ,promoFilterDF.EndDate.alias('promoEndDate')\n          ,promoFilterDF.DispatchesStart.alias('promoDispatchesStart')\n          ,col('ClientTreeKeyId').alias('promoClientTreeKeyId')\n          ,col('ClientTreeId').alias('promoClientTreeId')\n          ,col('InOut').alias('promoInOut')\n         )\n\npromoDemandDF = promoDemandDF\\\n  .withColumn('productDemandCode', lit(getDemandCode(col('promoClientTreeId'))))\n\ntempList = promoDemandDF.collect()\nnewPromoDemandDF = spark.createDataFrame(tempList, promoDemandDF.schema)\n\n# join with promoProduct to get ZREP\npromoProductDemandDF = newPromoDemandDF\\\n  .join(promoProductDF, promoProductDF.PromoId == newPromoDemandDF.promoId, 'inner')\\\n  .select(\\\n           newPromoDemandDF['*']\n          ,promoProductDF.ProductId\n         )\n\npromoSplittedByWeekDF = promoProductDemandDF\\\n  .join(datesDF, \n        [\\\n          datesDF.OriginalDate >= promoProductDemandDF.promoStartDate\n         ,datesDF.OriginalDate <= promoProductDemandDF.promoEndDate\n        ], \n        'inner')\\\n  .select(\\\n          promoProductDemandDF.promoId\n         ,promoProductDemandDF.promoNumber\n         ,promoProductDemandDF.promoStartDate\n         ,promoProductDemandDF.promoEndDate\n         ,promoProductDemandDF.productDemandCode\n         ,promoProductDemandDF.ProductId\n         ,promoProductDemandDF.promoInOut\n         ,datesDF.MarsWeekFullName\n         ,datesDF.MarsDay\n         )\n\ncols = promoSplittedByWeekDF.columns\ncols.remove('MarsDay')\n\npromoSplittedByWeekDF = promoSplittedByWeekDF\\\n  .groupBy(cols)\\\n  .agg(count('*').cast(DecimalType(30,6)).alias('promoDaysInWeek'))\n\npromoByBaselineCiDF = baselineCiDF\\\n  .join(promoSplittedByWeekDF,\n        [\\\n          promoSplittedByWeekDF.productDemandCode == baselineCiDF.DemandCode\n         ,promoSplittedByWeekDF.ProductId == baselineCiDF.ProductId\n         ,promoSplittedByWeekDF.MarsWeekFullName == baselineCiDF.MarsWeekFullName\n        ])\\\n  .where(promoSplittedByWeekDF.promoInOut == 'false')\\\n  .select(promoSplittedByWeekDF.promoId.alias('Id'), promoSplittedByWeekDF.promoNumber.alias('Number'))\\\n  .dropDuplicates()\n \npromoByIncreaseBaselineCiDF = increaseBaselineCiDF\\\n  .join(promoSplittedByWeekDF,\n        [\\\n          promoSplittedByWeekDF.productDemandCode == increaseBaselineCiDF.DemandCode\n         ,promoSplittedByWeekDF.ProductId == increaseBaselineCiDF.ProductId\n         ,promoSplittedByWeekDF.MarsWeekFullName == increaseBaselineCiDF.MarsWeekFullName\n        ])\\\n  .where(promoSplittedByWeekDF.promoInOut == 'false')\\\n  .select(promoSplittedByWeekDF.promoId.alias('Id'), promoSplittedByWeekDF.promoNumber.alias('Number'))\\\n  .dropDuplicates()",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_2132192489",
      "id": "20220810-113330_2120202078",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37188"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by shares changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>#####<em>Get promo numbers filtered by shares changes incidents</em></p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_433513852",
      "id": "20220810-113330_1045457371",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37189"
    },
    {
      "text": "%pyspark\nsharesCiDF = sharesCiIdsDF\\\n  .join(sharesDF, 'Id', 'inner')\\\n  .select(\\\n           sharesDF.ClientTreeId\n          ,sharesDF.BrandTechId\n         )\n\npromoBySharesCiDF = sharesCiDF\\\n  .join(promoFilterDF,\n        [\\\n          promoFilterDF.ClientTreeKeyId == sharesCiDF.ClientTreeId\n         ,promoFilterDF.BrandTechId == sharesCiDF.BrandTechId\n        ]\\\n        ,'inner')\\\n  .where(promoFilterDF.InOut == 'false')\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_218644596",
      "id": "20220810-113330_668943356",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37190"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by clienttree changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>#####<em>Get promo numbers filtered by clienttree changes incidents</em></p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_1918764149",
      "id": "20220810-113330_1664215595",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37191"
    },
    {
      "text": "%pyspark\nclientTreeCiDF = clientTreeCiIdsDF\\\n  .join(clientTreeDF, 'Id', 'inner')\\\n  .select(\\\n           clientTreeDF.ObjectId\n         )\n\npromoByClientTreeCiDF = clientTreeCiDF\\\n  .join(promoFilterDF,\n        [\\\n          promoFilterDF.ClientTreeId == clientTreeDF.ObjectId\n        ]\\\n        ,'inner')\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_937908843",
      "id": "20220810-113330_1616335956",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37192"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by producttree changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>#####<em>Get promo numbers filtered by producttree changes incidents</em></p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_1891713566",
      "id": "20220810-113330_1567946548",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37193"
    },
    {
      "text": "%pyspark\nproductTreeCiDF = productTreeCiIdsDF\\\n  .join(productTreeDF, 'Id', 'inner')\\\n  .select(\\\n           productTreeDF.ObjectId\n         )\n\npromoByProductTreeCiDF = productTreeCiDF\\\n  .join(promoProductTreeDF, promoProductTreeDF.ProductTreeObjectId == productTreeCiDF.ObjectId, 'inner')\\\n  .join(promoFilterDF, promoFilterDF.Id == promoProductTreeDF.PromoId, 'inner')\\\n  .where(promoFilterDF.InOut == 'false')\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_681098831",
      "id": "20220810-113330_6922181",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37194"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by plan post promo effect incidents*",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>#####<em>Get promo numbers filtered by plan post promo effect incidents</em></p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_979457052",
      "id": "paragraph_1688851788084_112909915",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37195"
    },
    {
      "text": "%pyspark\n\nppeCiDF = ppeCiIdsDF\\\n  .join(planPostPromoEffectDF, 'Id', 'inner')\\\n  .select(\\\n           planPostPromoEffectDF.ClientTreeId,\n           planPostPromoEffectDF.BrandTechId\n         )\n\npromoByPPECiDF = ppeCiDF\\\n    .join(promoFilterDF,\n            [\\\n              ppeCiDF.ClientTreeId == promoFilterDF.ClientTreeKeyId\n             ,ppeCiDF.BrandTechId == promoFilterDF.BrandTechId\n            ]\\\n            ,'inner')\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()\n",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_735393809",
      "id": "paragraph_1688851792270_468739231",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37196"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by correction changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>#####<em>Get promo numbers filtered by correction changes incidents</em></p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_1325433843",
      "id": "20220810-113330_1818582353",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37197"
    },
    {
      "text": "%pyspark\ncorrectionCiDF = correctionCiIdsDF\\\n  .join(correctionDF, 'Id', 'inner')\\\n  .select(\\\n           correctionDF.PromoProductId\n         )\n\npromoByCorrectionCiDF = correctionCiDF\\\n  .join(promoProductDF, promoProductDF.Id == correctionCiDF.PromoProductId, 'inner')\\\n  .join(promoFilterDF, promoFilterDF.Id == promoProductDF.PromoId, 'inner')\\\n  .where(promoFilterDF.InOut == 'false')\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_1519689217",
      "id": "20220810-113330_910836093",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37198"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by incremental changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>#####<em>Get promo numbers filtered by incremental changes incidents</em></p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_759513750",
      "id": "20220810-113330_1283317207",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37199"
    },
    {
      "text": "%pyspark\nincrementalCiDF = incrementalCiIdsDF\\\n  .join(incrementalDF, 'Id', 'inner')\\\n  .select(\\\n           incrementalDF.PromoId\n         )\n\npromoByIncrementalCiDF = incrementalCiDF\\\n  .join(promoFilterDF, promoFilterDF.Id == incrementalCiDF.PromoId, 'inner')\\\n  .where(promoFilterDF.InOut == 'true')\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_161618633",
      "id": "20220810-113330_2548778",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37200"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by cogs changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>#####<em>Get promo numbers filtered by cogs changes incidents</em></p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_264660748",
      "id": "20220810-113330_1181728426",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37201"
    },
    {
      "text": "%pyspark\ncogsDF = cogsDF\\\n  .withColumn('StartDate', date_add(to_date(cogsDF.StartDate, 'yyyy-MM-dd'), 1))\\\n  .withColumn('EndDate', date_add(to_date(cogsDF.EndDate, 'yyyy-MM-dd'), 1))\ncogsTnDF = cogsTnDF\\\n  .withColumn('StartDate', date_add(to_date(cogsTnDF.StartDate, 'yyyy-MM-dd'), 1))\\\n  .withColumn('EndDate', date_add(to_date(cogsTnDF.EndDate, 'yyyy-MM-dd'), 1))\n\ncogsClientDF = cogsDF\\\n  .join(clientTreeDF, clientTreeDF.Id == cogsDF.ClientTreeId, 'inner')\\\n  .join(brandTechDF, brandTechDF.Id == cogsDF.BrandTechId, 'inner')\\\n  .select(\\\n           cogsDF.Id\n          ,cogsDF.StartDate.alias('cogsStartDate')\n          ,cogsDF.EndDate.alias('cogsEndDate')\n          ,cogsDF.LSVpercent\n          ,clientTreeDF.ObjectId.alias('cogsClientTreeObjectId')\n          ,brandTechDF.BrandsegTechsub.alias('cbtName')\n         )\ncogsTnClientDF = cogsTnDF\\\n  .join(clientTreeDF, clientTreeDF.Id == cogsTnDF.ClientTreeId, 'inner')\\\n  .join(brandTechDF, brandTechDF.Id == cogsTnDF.BrandTechId, 'inner')\\\n  .select(\\\n           cogsTnDF.Id\n          ,cogsTnDF.StartDate.alias('cogsStartDate')\n          ,cogsTnDF.EndDate.alias('cogsEndDate')\n          ,cogsTnDF.TonCost\n          ,clientTreeDF.ObjectId.alias('cogsClientTreeObjectId')\n          ,brandTechDF.BrandsegTechsub.alias('cbtName')\n         )\n\ncogsClientList = cogsClientDF.collect()\ncogsCiIdsList = [row.Id for row in cogsCiIdsDF.collect()]\n\ncogsTnClientList = cogsTnClientDF.collect()\ncogsTnCiIdsList = [row.Id for row in cogsTnCiIdsDF.collect()]",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_929281219",
      "id": "20220810-113330_575295155",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37202"
    },
    {
      "text": "%pyspark\n@udf\ndef isPromoFilteredByGogs(objectId, brandTechName, dispatchesStart):\n  c = [x for x in activeClientTreeList if x.ObjectId == objectId]\n  cogs = []\n  while (len(cogs) == 0) & (len(c) != 0) & (c[0].Type != 'root'):\n    cogs = [x for x in cogsClientList if x.cogsClientTreeObjectId == c[0].ObjectId and x.cbtName == brandTechName\\\n                                         and x.cogsStartDate <= dispatchesStart and x.cogsEndDate >= dispatchesStart]\n    c = [x for x in activeClientTreeList if x.ObjectId == c[0].parentId]\n  \n  if len(cogs) == 0:\n    while (len(cogs) == 0) & (len(c) != 0) & (c[0].Type != 'root'):\n      cogs = [x for x in cogsClientList if x.cogsClientTreeObjectId == c[0].ObjectId and x.cbtName is None\\\n                                         and x.cogsStartDate <= dispatchesStart and x.cogsEndDate >= dispatchesStart]\n      c = [x for x in activeClientTreeList if x.ObjectId == c[0].parentId]\n      \n  isFiltered = False\n  \n  if len(cogs) == 0:\n    return False\n  else:\n    for item in cogs:\n      if item.Id in cogsCiIdsList:\n        isFiltered = True\n    return isFiltered",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_1858571814",
      "id": "20220810-113330_16493640",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37203"
    },
    {
      "text": "%pyspark\n@udf\ndef isPromoFilteredByCogsTn(objectId, brandTechName, dispatchesStart):\n  c = [x for x in activeClientTreeList if x.ObjectId == int(objectId)]\n  cogs = []\n  while (len(cogs) == 0) & (len(c) != 0) & (c[0].Type != 'root'):\n    cogs = [x for x in cogsTnClientList if x.cogsClientTreeObjectId == c[0].ObjectId and x.cbtName == brandTechName\\\n                                         and x.cogsStartDate <= dispatchesStart and x.cogsEndDate >= dispatchesStart]\n    c = [x for x in activeClientTreeList if x.ObjectId == c[0].parentId]\n  \n  if len(cogs) == 0:\n    while (len(cogs) == 0) & (len(c) != 0) & (c[0].Type != 'root'):\n      cogs = [x for x in cogsTnClientList if x.cogsClientTreeObjectId == c[0].ObjectId and x.cbtName is None\\\n                                         and x.cogsStartDate <= dispatchesStart and x.cogsEndDate >= dispatchesStart]\n      c = [x for x in activeClientTreeList if x.ObjectId == c[0].parentId]\n      \n  isFiltered = False\n  \n  if len(cogs) == 0:\n    return False\n  else:\n    for item in cogs:\n      if item.Id in cogsTnCiIdsList:\n        isFiltered = True\n    return isFiltered",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_1214347755",
      "id": "20220810-113330_936054729",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37204"
    },
    {
      "text": "%pyspark\npromoByCogsCiDF = promoFilterDF\\\n  .withColumn('isFilteredByGogs', lit(isPromoFilteredByGogs(col('ClientTreeId'), col('promoBrandTechName'), col('DispatchesStart'))))\\\n  .where(col('isFilteredByGogs') == True)\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()\n\npromoByCogsTnCiDF = promoFilterDF\\\n  .withColumn('isFilteredByGogs', lit(isPromoFilteredByCogsTn(col('ClientTreeId'), col('promoBrandTechName'), col('DispatchesStart'))))\\\n  .where(col('isFilteredByGogs') == True)\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_1556622171",
      "id": "20220810-113330_216690036",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37205"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by ti changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>#####<em>Get promo numbers filtered by ti changes incidents</em></p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_1814684133",
      "id": "20220810-113330_2082833804",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37206"
    },
    {
      "text": "%pyspark\ntiDF = tiDF\\\n  .withColumn('StartDate', date_add(to_date(tiDF.StartDate, 'yyyy-MM-dd'), 1))\\\n  .withColumn('EndDate', date_add(to_date(tiDF.EndDate, 'yyyy-MM-dd'), 1))\n\ntiClientNullBtDF = tiDF\\\n  .join(clientTreeDF, clientTreeDF.Id == tiDF.ClientTreeId, 'inner')\\\n  .select(\\\n           tiDF.Id\n          ,tiDF.StartDate.alias('tiStartDate')\n          ,tiDF.EndDate.alias('tiEndDate')\n          ,tiDF.SizePercent\n          ,clientTreeDF.ObjectId.alias('tiClientTreeObjectId')\n         )\\\n  .withColumn('tibtName', lit(None).cast(StringType()))\n\ntiClientNotNullBtDF = tiDF\\\n  .join(clientTreeDF, clientTreeDF.Id == tiDF.ClientTreeId, 'inner')\\\n  .join(brandTechDF, brandTechDF.Id == tiDF.BrandTechId, 'inner')\\\n  .select(\\\n           tiDF.Id\n          ,tiDF.StartDate.alias('tiStartDate')\n          ,tiDF.EndDate.alias('tiEndDate')\n          ,tiDF.SizePercent\n          ,clientTreeDF.ObjectId.alias('tiClientTreeObjectId')\n          ,brandTechDF.BrandsegTechsub.alias('tibtName')\n         )\n\ntiClientList = tiClientNullBtDF.union(tiClientNotNullBtDF).collect()\ntiCiIdsList = [row.Id for row in tiCiIdsDF.collect()]",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_147978541",
      "id": "20220810-113330_568455084",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37207"
    },
    {
      "text": "%pyspark\n@udf\ndef isPromoFilteredByTi(objectId, brandTechName, startDate):\n  c = [x for x in activeClientTreeList if x.ObjectId == objectId]\n  ti = []\n  while (len(ti) == 0) & (len(c) != 0) & (c[0].Type != 'root'):\n    ti = [x for x in tiClientList if x.tiClientTreeObjectId == c[0].ObjectId and (x.tibtName == brandTechName or x.tibtName is None)\\\n                                     and x.tiStartDate <= startDate and x.tiEndDate >= startDate]\n    c = [x for x in activeClientTreeList if x.ObjectId == c[0].parentId]\n    \n  isFiltered = False  \n    \n  if len(ti) == 0:\n    return False\n  else:\n    for item in ti:\n      if item.Id in tiCiIdsList:\n        isFiltered = True\n    return isFiltered",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_949306164",
      "id": "20220810-113330_1320880414",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37208"
    },
    {
      "text": "%pyspark\npromoByTiCiDF = promoFilterDF\\\n  .withColumn('isFilteredByTi', lit(isPromoFilteredByTi(col('ClientTreeId'), col('promoBrandTechName'), col('DispatchesStart'))))\\\n  .where(col('isFilteredByTi') == True)\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_89055190",
      "id": "20220810-113330_291851376",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37209"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by actual cogs changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>#####<em>Get promo numbers filtered by actual cogs changes incidents</em></p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_812587914",
      "id": "20220810-113330_1102881333",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37210"
    },
    {
      "text": "%pyspark\npromoByActualCogsCiDF = actualCogsTiRecalculationPromoDF\\\n  .join(actualCogsCiIdsDF, actualCogsCiIdsDF.Id == actualCogsTiRecalculationPromoDF.Id, 'inner')\\\n  .where(~actualCogsCiIdsDF.Id.isNull())\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()\n\npromoByActualCogsTnCiDF = actualCogsTiRecalculationPromoDF\\\n  .join(actualCogsTnCiIdsDF, actualCogsTnCiIdsDF.Id == actualCogsTiRecalculationPromoDF.Id, 'inner')\\\n  .where(~actualCogsTnCiIdsDF.Id.isNull())\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()\n\npromoByActualCogsCiDF.show()",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---+------+\n| Id|Number|\n+---+------+\n+---+------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_56899279",
      "id": "20220810-113330_1871620385",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37211"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by actual ti changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>#####<em>Get promo numbers filtered by actual ti changes incidents</em></p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_1604048912",
      "id": "20220810-113330_2045488695",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37212"
    },
    {
      "text": "%pyspark\npromoByActualTiCiDF = actualCogsTiRecalculationPromoDF\\\n  .join(actualTiCiIdsDF, actualTiCiIdsDF.Id == actualCogsTiRecalculationPromoDF.Id, 'inner')\\\n  .where(~actualTiCiIdsDF.Id.isNull())\\\n  .select(promoFilterDF.Id, promoFilterDF.Number)\\\n  .dropDuplicates()\n\npromoByActualTiCiDF.show()",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---+------+\n| Id|Number|\n+---+------+\n+---+------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742664_884186403",
      "id": "20220810-113330_1121352630",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37213"
    },
    {
      "text": "%md\n#####*Get promo numbers filtered by product changes incidents*",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>#####<em>Get promo numbers filtered by product changes incidents</em></p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742665_1534369452",
      "id": "20220810-113330_1717552339",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37214"
    },
    {
      "text": "%pyspark\npromoByProductCiDF = promoFilterDF\\\n  .join(promoProductTreeDF, promoProductTreeDF.PromoId == promoFilterDF.Id, 'inner')\\\n  .join(productTreeDF, productTreeDF.ObjectId == promoProductTreeDF.ProductTreeObjectId, 'inner')\\\n  .select(\\\n           promoFilterDF.Id.alias('promoId')\n          ,promoFilterDF.ClientTreeKeyId\n          ,promoFilterDF.DispatchesStart\n          ,promoFilterDF.Disabled.alias('pptDisabled')\n          ,promoFilterDF.Number.alias('pNumber')\n          ,productTreeDF.EndDate\n          ,promoFilterDF.InOut\n          ,lower(productTreeDF.FilterQuery).alias('FilterQuery')\n         )\\\n  .where((col('pptDisabled') == 'false') & (col('EndDate').isNull()))\n\ninoutPromoByProductCiDF = promoByProductCiDF.where(col('InOut') == 'true')\nnotInoutPromoByProductCiDF = promoByProductCiDF.where(col('InOut') == 'false')\n\nlowerCaseProductDF = productDF.select(*[lower(col(c)).name(c) for c in productDF.columns])\nlowerCaseProductDF = lowerCaseProductDF.toDF(*[c.lower() for c in lowerCaseProductDF.columns])",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742665_62673260",
      "id": "20220810-113330_2088943256",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37215"
    },
    {
      "text": "%pyspark\r\npromoByProductCiList = notInoutPromoByProductCiDF.collect()\r\n\r\nfilteredArray = []\r\nlowerCaseProductDF.registerTempTable(\"product\")\r\n\r\nfilteredProductSchema = StructType([\r\n  StructField(\"Id\", StringType(), False),\r\n  StructField(\"Number\", IntegerType(), False),\r\n  StructField(\"fPromoId\", StringType(), False),\r\n])\r\n\r\nfor i, item in enumerate(promoByProductCiList):\r\n#   print(i, item.pNumber, item.promoId)\r\n  productFilter = item.FilterQuery.replace('['+schema.lower()+'].[', '').replace('].[', '.').replace('[', '').replace(']', '').replace('*', 'id')\r\n  filteredIdsList = spark.sql(productFilter).collect()\r\n#   print(productFilter)\r\n#   print(filteredIdsList)\r\n  for productId in filteredIdsList:\r\n    filteredArray.append([productId[0], item.pNumber, item.promoId])\r\n    \r\nfilteredProductDF = spark.createDataFrame(filteredArray, filteredProductSchema)",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742665_1193112885",
      "id": "20220810-113330_1488727337",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37216"
    },
    {
      "text": "%pyspark\nprint(filteredProductDF.count())",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "158100\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742665_1126101009",
      "id": "20220810-113330_700900931",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37217"
    },
    {
      "text": "%pyspark\nactiveAssortmentMatrixDF = assortmentMatrixDF.where(col('Disabled') == 'false')\n\nfilteredProductDF = filteredProductDF.withColumn('Id', upper(filteredProductDF.Id))\n\ncols = filteredProductDF.columns\n\nresultFilteredProductDF = filteredProductDF\\\n  .join(activeAssortmentMatrixDF, activeAssortmentMatrixDF.ProductId == filteredProductDF.Id, 'inner')\\\n  .select(filteredProductDF['*'])\\\n  .dropDuplicates()",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742665_2037179293",
      "id": "20220810-113330_833079028",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37218"
    },
    {
      "text": "%pyspark\nprint(resultFilteredProductDF.count())",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "86127\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742665_994996695",
      "id": "20220810-113330_1480116262",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37219"
    },
    {
      "text": "%pyspark\nnotInoutPromoByProductCiDF = resultFilteredProductDF\\\n  .join(activeProductChangeIncidentsDF, activeProductChangeIncidentsDF.ProductId == resultFilteredProductDF.Id, 'inner')\\\n  .select(resultFilteredProductDF.fPromoId.alias('Id'), resultFilteredProductDF.Number)\\\n  .dropDuplicates()\n\ninoutPromoByProductCiDF = inoutPromoByProductCiDF\\\n  .join(activePromoProductDF, activePromoProductDF.PromoId == inoutPromoByProductCiDF.promoId, 'inner')\\\n  .join(activeProductChangeIncidentsDF, activeProductChangeIncidentsDF.ProductId == activePromoProductDF.ProductId, 'inner')\\\n  .select(inoutPromoByProductCiDF.promoId.alias('Id'), inoutPromoByProductCiDF.pNumber.alias('Number'))\\\n  .dropDuplicates()\n\npromoByProductCiDF = notInoutPromoByProductCiDF.union(inoutPromoByProductCiDF)",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742665_1776042496",
      "id": "20220810-113330_1632920429",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37220"
    },
    {
      "text": "%pyspark\ntitleMessage = '[INFO]: PROMO FILTERING'\ntitleLogMessageDF = spark.createDataFrame([(titleMessage,)], inputLogMessageSchema)\n\npromoNumbersByAssortmentMatrixCiDF = promoByAssortmentMatrixCiDF.select(col('Number')).withColumn('Title', lit('[INFO]: Promo filtered by Assortment matrix incidents: '))\npromoNumbersByAssortmentMatrixCiDF = promoNumbersByAssortmentMatrixCiDF\\\n  .groupBy('Title')\\\n  .agg(concat_ws(';', collect_list(col('Number'))).alias('Number'))\n\npromoNumbersByPriceListCiDF = promoByPriceListCiDF.select(col('Number')).withColumn('Title', lit('[INFO]: Promo filtered by Pricelist incidents: '))\npromoNumbersByPriceListCiDF = promoNumbersByPriceListCiDF\\\n  .groupBy('Title')\\\n  .agg(concat_ws(';', collect_list(col('Number'))).alias('Number'))\n\npromoNumbersByIncreasePriceListCiDF = promoByIncreasePriceListCiDF.select(col('Number')).withColumn('Title', lit('[INFO]: Promo filtered by Increase Pricelist incidents: '))\npromoNumbersByIncreasePriceListCiDF = promoNumbersByIncreasePriceListCiDF\\\n  .groupBy('Title')\\\n  .agg(concat_ws(';', collect_list(col('Number'))).alias('Number'))\n\npromoNumbersByBaselineCiDF = promoByBaselineCiDF.select(col('Number')).withColumn('Title', lit('[INFO]: Promo filtered by Baseline incidents: '))\npromoNumbersByBaselineCiDF = promoNumbersByBaselineCiDF\\\n  .groupBy('Title')\\\n  .agg(concat_ws(';', collect_list(col('Number'))).alias('Number'))\n  \npromoNumbersByIncreaseBaselineCiDF = promoByIncreaseBaselineCiDF.select(col('Number')).withColumn('Title', lit('[INFO]: Promo filtered by Increase Baseline incidents: '))\npromoNumbersByIncreaseBaselineCiDF = promoNumbersByIncreaseBaselineCiDF\\\n  .groupBy('Title')\\\n  .agg(concat_ws(';', collect_list(col('Number'))).alias('Number'))\n\npromoNumbersBySharesCiDF = promoBySharesCiDF.select(col('Number')).withColumn('Title', lit('[INFO]: Promo filtered by Shares incidents: '))\npromoNumbersBySharesCiDF = promoNumbersBySharesCiDF\\\n  .groupBy('Title')\\\n  .agg(concat_ws(';', collect_list(col('Number'))).alias('Number'))\n\npromoNumbersByClientTreeCiDF = promoByClientTreeCiDF.select(col('Number')).withColumn('Title', lit('[INFO]: Promo filtered by ClientTree incidents: '))\npromoNumbersByClientTreeCiDF = promoNumbersByClientTreeCiDF\\\n  .groupBy('Title')\\\n  .agg(concat_ws(';', collect_list(col('Number'))).alias('Number'))\n\npromoNumbersByProductTreeCiDF = promoByProductTreeCiDF.select(col('Number')).withColumn('Title', lit('[INFO]: Promo filtered by ProductTree incidents: '))\npromoNumbersByProductTreeCiDF = promoNumbersByProductTreeCiDF\\\n  .groupBy('Title')\\\n  .agg(concat_ws(';', collect_list(col('Number'))).alias('Number'))\n  \npromoNumbersByPpeCiDF = promoByPPECiDF.select(col('Number')).withColumn('Title', lit('[INFO]: Promo filtered by Plan Post Promo Effect incidents: '))\npromoNumbersByPpeCiDF = promoNumbersByPpeCiDF\\\n  .groupBy('Title')\\\n  .agg(concat_ws(';', collect_list(col('Number'))).alias('Number'))\n\npromoNumbersByCorrectionCiDF = promoByCorrectionCiDF.select(col('Number')).withColumn('Title', lit('[INFO]: Promo filtered by Correction incidents: '))\npromoNumbersByCorrectionCiDF = promoNumbersByCorrectionCiDF\\\n  .groupBy('Title')\\\n  .agg(concat_ws(';', collect_list(col('Number'))).alias('Number'))\n\npromoNumbersByIncrementalCiDF = promoByIncrementalCiDF.select(col('Number')).withColumn('Title', lit('[INFO]: Promo filtered by Incremental incidents: '))\npromoNumbersByIncrementalCiDF = promoNumbersByIncrementalCiDF\\\n  .groupBy('Title')\\\n  .agg(concat_ws(';', collect_list(col('Number'))).alias('Number'))\n\npromoNumbersByCogsCiDF = promoByCogsCiDF.select(col('Number')).withColumn('Title', lit('[INFO]: Promo filtered by COGS incidents: '))\npromoNumbersByCogsCiDF = promoNumbersByCogsCiDF\\\n  .groupBy('Title')\\\n  .agg(concat_ws(';', collect_list(col('Number'))).alias('Number'))\n\npromoNumbersByCogsTnCiDF = promoByCogsTnCiDF.select(col('Number')).withColumn('Title', lit('[INFO]: Promo filtered by COGSTn incidents: '))\npromoNumbersByCogsTnCiDF = promoNumbersByCogsTnCiDF\\\n  .groupBy('Title')\\\n  .agg(concat_ws(';', collect_list(col('Number'))).alias('Number'))\n\npromoNumbersByTiCiDF = promoByTiCiDF.select(col('Number')).withColumn('Title', lit('[INFO]: Promo filtered by TI incidents: '))\npromoNumbersByTiCiDF = promoNumbersByTiCiDF\\\n  .groupBy('Title')\\\n  .agg(concat_ws(';', collect_list(col('Number'))).alias('Number'))\n\npromoNumbersByActualCogsCiDF = promoByActualCogsCiDF.select(col('Number')).withColumn('Title', lit('[INFO]: Promo filtered by Actual COGS incidents: '))\npromoNumbersByActualCogsCiDF = promoNumbersByActualCogsCiDF\\\n  .groupBy('Title')\\\n  .agg(concat_ws(';', collect_list(col('Number'))).alias('Number'))\n\npromoNumbersByActualCogsTnCiDF = promoByActualCogsTnCiDF.select(col('Number')).withColumn('Title', lit('[INFO]: Promo filtered by Actual COGSTn incidents: '))\npromoNumbersByActualCogsTnCiDF = promoNumbersByActualCogsTnCiDF\\\n  .groupBy('Title')\\\n  .agg(concat_ws(';', collect_list(col('Number'))).alias('Number'))\n\npromoNumbersByActualTiCiDF = promoByActualTiCiDF.select(col('Number')).withColumn('Title', lit('[INFO]: Promo filtered by Actual TI incidents: '))\npromoNumbersByActualTiCiDF = promoNumbersByActualTiCiDF\\\n  .groupBy('Title')\\\n  .agg(concat_ws(';', collect_list(col('Number'))).alias('Number'))\n\npromoNumbersByProductCiDF = promoByProductCiDF.select(col('Number')).withColumn('Title', lit('[INFO]: Promo filtered by Product incidents: '))\npromoNumbersByProductCiDF = promoNumbersByProductCiDF\\\n  .groupBy('Title')\\\n  .agg(concat_ws(';', collect_list(col('Number'))).alias('Number'))\n\npromoNumbersFilteredByCiDF = promoNumbersByAssortmentMatrixCiDF\\\n  .union(promoNumbersByIncreasePriceListCiDF)\\\n  .union(promoNumbersByPriceListCiDF)\\\n  .union(promoNumbersByIncreaseBaselineCiDF)\\\n  .union(promoNumbersByBaselineCiDF)\\\n  .union(promoNumbersBySharesCiDF)\\\n  .union(promoNumbersByClientTreeCiDF)\\\n  .union(promoNumbersByProductTreeCiDF)\\\n  .union(promoNumbersByPpeCiDF)\\\n  .union(promoNumbersByCorrectionCiDF)\\\n  .union(promoNumbersByIncrementalCiDF)\\\n  .union(promoNumbersByCogsCiDF)\\\n  .union(promoNumbersByCogsTnCiDF)\\\n  .union(promoNumbersByTiCiDF)\\\n  .union(promoNumbersByActualCogsCiDF)\\\n  .union(promoNumbersByActualCogsTnCiDF)\\\n  .union(promoNumbersByActualTiCiDF)\\\n  .union(promoNumbersByProductCiDF)\n\nlogMessageDF = promoNumbersFilteredByCiDF\\\n  .withColumn('logMessage', concat(col('Title'), col('Number')))\\\n  .drop('Title', 'Number')\n\noutputLogMessageDF = inputLogMessageDF\\\n  .union(titleLogMessageDF)\\\n  .union(logMessageDF)\n\npromoByCiDF = promoByAssortmentMatrixCiDF\\\n  .union(promoByPriceListCiDF)\\\n  .union(promoByBaselineCiDF)\\\n  .union(promoBySharesCiDF)\\\n  .union(promoByClientTreeCiDF)\\\n  .union(promoByProductTreeCiDF)\\\n  .union(promoByPPECiDF)\\\n  .union(promoByCorrectionCiDF)\\\n  .union(promoByIncrementalCiDF)\\\n  .union(promoByCogsCiDF)\\\n  .union(promoByCogsTnCiDF)\\\n  .union(promoByTiCiDF)\\\n  .union(promoByActualCogsCiDF)\\\n  .union(promoByActualCogsTnCiDF)\\\n  .union(promoByActualTiCiDF)\\\n  .union(promoByProductCiDF)\n\nincreasePromoByCiDF = promoByIncreaseBaselineCiDF\\\n  .union(promoByIncreasePriceListCiDF)\n\nblockedPromoDF = promoByCiDF\\\n  .select(col('Id').alias('PromoId'))\\\n  .withColumn('HandlerId', lit(handlerId))\n\nblockedPromoDF = blockedPromoDF.dropDuplicates()\n\nblockedIncreasePromoDF = increasePromoByCiDF\\\n  .select(col('Id').alias('PromoId'))\\\n  .withColumn('HandlerId', lit(handlerId))\n\nblockedIncreasePromoDF = blockedIncreasePromoDF.dropDuplicates()\n\nactiveChangesIncidentsDF = activeChangesIncidentsDF\\\n  .withColumn('Disabled', lit(True))\\\n  .drop('#QCCount')\n\nactiveProductChangeIncidentsDF = activeProductChangeIncidentsDF\\\n  .withColumn('Disabled', lit(True))\\\n  .drop('#QCCount')\n\nresultChangesIncidentsDF = activeChangesIncidentsDF.union(processChangesIncidentsDF)\nresultProductChangeIncidentsDF = activeProductChangeIncidentsDF.union(processProductChangeIncidentsDF)\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742665_777698596",
      "id": "20220810-113330_1881250975",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37221"
    },
    {
      "title": "Save results",
      "text": "%pyspark\nblockedPromoDF.write.mode(\"overwrite\").parquet(BLOCKEDPROMO_OUTPUT_PATH)\nblockedPromoDF\\\n.repartition(1)\\\n.write.csv(BLOCKEDPROMO_OUTPUT_PATH_CSV,\nsep=\"\\u0001\",\nheader=True,\nmode=\"overwrite\",\nemptyValue=\"\"\n)\n\nblockedIncreasePromoDF.write.mode(\"overwrite\").parquet(BLOCKEDINCREASEPROMO_OUTPUT_PATH)\nblockedIncreasePromoDF\\\n.repartition(1)\\\n.write.csv(BLOCKEDINCREASEPROMO_OUTPUT_PATH_CSV,\nsep=\"\\u0001\",\nheader=True,\nmode=\"overwrite\",\nemptyValue=\"\"\n)\n\n\n#resultChangesIncidentsDF.write.mode(\"overwrite\").parquet(CHANGESINCIDENTS_OUTPUT_PATH)\n#resultProductChangeIncidentsDF.write.mode(\"overwrite\").parquet(PRODUCTCHANGEINCIDENTS_OUTPUT_PATH)\n\nresultChangesIncidentsDF=resultChangesIncidentsDF\\\n.na.fill({\"Disabled\":False})\\\n.withColumn(\"Disabled\",col(\"Disabled\").cast(IntegerType()))\n\nresultChangesIncidentsDF\\\n.repartition(1)\\\n.write.csv(CHANGESINCIDENTS_OUTPUT_PATH,\nsep=\"\\u0001\",\nheader=True,\nmode=\"overwrite\",\nemptyValue=\"\",\ntimestampFormat=\"yyyy-MM-dd HH:mm:ss\"\n)\n\nresultProductChangeIncidentsDF\\\n.repartition(1)\\\n.write.csv(PRODUCTCHANGEINCIDENTS_OUTPUT_PATH,\nsep=\"\\u0001\",\nheader=True,\nmode=\"overwrite\",\nemptyValue=\"\",\ntimestampFormat=\"yyyy-MM-dd HH:mm:ss\"\n)\n\n",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mPy4JJavaError\u001b[0m                             Traceback (most recent call last)\n\u001b[0;32m<ipython-input-361-68501b90a24b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mblockedPromoDF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"overwrite\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparquet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mBLOCKEDPROMO_OUTPUT_PATH\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mblockedPromoDF\u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mrepartition\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m .write.csv(BLOCKEDPROMO_OUTPUT_PATH_CSV,\n\u001b[1;32m      5\u001b[0m \u001b[0msep\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"\\u0001\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/usr/lib/spark/python/pyspark/sql/readwriter.py\u001b[0m in \u001b[0;36mparquet\u001b[0;34m(self, path, mode, partitionBy, compression)\u001b[0m\n\u001b[1;32m    937\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpartitionBy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpartitionBy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    938\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_set_opts\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcompression\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcompression\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 939\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jwrite\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparquet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    940\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    941\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0msince\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1.6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/usr/lib/spark/python/lib/py4j-0.10.9-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1302\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1303\u001b[0m         \u001b[0manswer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1304\u001b[0;31m         return_value = get_return_value(\n\u001b[0m\u001b[1;32m   1305\u001b[0m             answer, self.gateway_client, self.target_id, self.name)\n\u001b[1;32m   1306\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/usr/lib/spark/python/pyspark/sql/utils.py\u001b[0m in \u001b[0;36mdeco\u001b[0;34m(*a, **kw)\u001b[0m\n\u001b[1;32m    126\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdeco\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    127\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 128\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    129\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mpy4j\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprotocol\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPy4JJavaError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m             \u001b[0mconverted\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconvert_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjava_exception\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/usr/lib/spark/python/lib/py4j-0.10.9-src.zip/py4j/protocol.py\u001b[0m in \u001b[0;36mget_return_value\u001b[0;34m(answer, gateway_client, target_id, name)\u001b[0m\n\u001b[1;32m    324\u001b[0m             \u001b[0mvalue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mOUTPUT_CONVERTER\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0manswer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgateway_client\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    325\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0manswer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mREFERENCE_TYPE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 326\u001b[0;31m                 raise Py4JJavaError(\n\u001b[0m\u001b[1;32m    327\u001b[0m                     \u001b[0;34m\"An error occurred while calling {0}{1}{2}.\\n\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    328\u001b[0m                     format(target_id, \".\", name), value)\n\n\u001b[0;31mPy4JJavaError\u001b[0m: An error occurred while calling o14497.parquet.\n: org.apache.hadoop.security.AccessControlException: Permission denied: user=zeppelin, access=WRITE, inode=\"/JUPITER/PROCESS/BlockedPromo\":dataproc-agent:hadoop:drwxr-xr-x\n\tat org.apache.hadoop.hdfs.server.namenode.FSPermissionChecker.check(FSPermissionChecker.java:399)\n\tat org.apache.hadoop.hdfs.server.namenode.FSPermissionChecker.checkPermission(FSPermissionChecker.java:258)\n\tat org.apache.hadoop.hdfs.server.namenode.FSPermissionChecker.checkPermission(FSPermissionChecker.java:193)\n\tat org.apache.hadoop.hdfs.server.namenode.FSDirectory.checkPermission(FSDirectory.java:1896)\n\tat org.apache.hadoop.hdfs.server.namenode.FSDirDeleteOp.delete(FSDirDeleteOp.java:110)\n\tat org.apache.hadoop.hdfs.server.namenode.FSNamesystem.delete(FSNamesystem.java:3104)\n\tat org.apache.hadoop.hdfs.server.namenode.NameNodeRpcServer.delete(NameNodeRpcServer.java:1127)\n\tat org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolServerSideTranslatorPB.delete(ClientNamenodeProtocolServerSideTranslatorPB.java:708)\n\tat org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos$ClientNamenodeProtocol$2.callBlockingMethod(ClientNamenodeProtocolProtos.java)\n\tat org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:528)\n\tat org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1086)\n\tat org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1029)\n\tat org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:957)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat javax.security.auth.Subject.doAs(Subject.java:422)\n\tat org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1762)\n\tat org.apache.hadoop.ipc.Server$Handler.run(Server.java:2957)\n\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.apache.hadoop.ipc.RemoteException.instantiateException(RemoteException.java:121)\n\tat org.apache.hadoop.ipc.RemoteException.unwrapRemoteException(RemoteException.java:88)\n\tat org.apache.hadoop.hdfs.DFSClient.delete(DFSClient.java:1614)\n\tat org.apache.hadoop.hdfs.DistributedFileSystem$19.doCall(DistributedFileSystem.java:949)\n\tat org.apache.hadoop.hdfs.DistributedFileSystem$19.doCall(DistributedFileSystem.java:946)\n\tat org.apache.hadoop.fs.FileSystemLinkResolver.resolve(FileSystemLinkResolver.java:81)\n\tat org.apache.hadoop.hdfs.DistributedFileSystem.delete(DistributedFileSystem.java:956)\n\tat org.apache.spark.internal.io.FileCommitProtocol.deleteWithJob(FileCommitProtocol.scala:124)\n\tat org.apache.spark.sql.execution.datasources.InsertIntoHadoopFsRelationCommand.deleteMatchingPartitions(InsertIntoHadoopFsRelationCommand.scala:226)\n\tat org.apache.spark.sql.execution.datasources.InsertIntoHadoopFsRelationCommand.run(InsertIntoHadoopFsRelationCommand.scala:129)\n\tat org.apache.spark.sql.execution.command.DataWritingCommandExec.sideEffectResult$lzycompute(commands.scala:108)\n\tat org.apache.spark.sql.execution.command.DataWritingCommandExec.sideEffectResult(commands.scala:106)\n\tat org.apache.spark.sql.execution.command.DataWritingCommandExec.doExecute(commands.scala:131)\n\tat org.apache.spark.sql.execution.SparkPlan.$anonfun$execute$1(SparkPlan.scala:180)\n\tat org.apache.spark.sql.execution.SparkPlan.$anonfun$executeQuery$1(SparkPlan.scala:218)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\n\tat org.apache.spark.sql.execution.SparkPlan.executeQuery(SparkPlan.scala:215)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:176)\n\tat org.apache.spark.sql.execution.QueryExecution.toRdd$lzycompute(QueryExecution.scala:127)\n\tat org.apache.spark.sql.execution.QueryExecution.toRdd(QueryExecution.scala:126)\n\tat org.apache.spark.sql.DataFrameWriter.$anonfun$runCommand$1(DataFrameWriter.scala:962)\n\tat org.apache.spark.sql.execution.SQLExecution$.$anonfun$withNewExecutionId$5(SQLExecution.scala:100)\n\tat org.apache.spark.sql.execution.SQLExecution$.withSQLConfPropagated(SQLExecution.scala:160)\n\tat org.apache.spark.sql.execution.SQLExecution$.$anonfun$withNewExecutionId$1(SQLExecution.scala:87)\n\tat org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:767)\n\tat org.apache.spark.sql.execution.SQLExecution$.withNewExecutionId(SQLExecution.scala:64)\n\tat org.apache.spark.sql.DataFrameWriter.runCommand(DataFrameWriter.scala:962)\n\tat org.apache.spark.sql.DataFrameWriter.saveToV1Source(DataFrameWriter.scala:414)\n\tat org.apache.spark.sql.DataFrameWriter.save(DataFrameWriter.scala:398)\n\tat org.apache.spark.sql.DataFrameWriter.save(DataFrameWriter.scala:287)\n\tat org.apache.spark.sql.DataFrameWriter.parquet(DataFrameWriter.scala:847)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)\n\tat py4j.Gateway.invoke(Gateway.java:282)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:238)\n\tat java.lang.Thread.run(Thread.java:750)\nCaused by: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.security.AccessControlException): Permission denied: user=zeppelin, access=WRITE, inode=\"/JUPITER/PROCESS/BlockedPromo\":dataproc-agent:hadoop:drwxr-xr-x\n\tat org.apache.hadoop.hdfs.server.namenode.FSPermissionChecker.check(FSPermissionChecker.java:399)\n\tat org.apache.hadoop.hdfs.server.namenode.FSPermissionChecker.checkPermission(FSPermissionChecker.java:258)\n\tat org.apache.hadoop.hdfs.server.namenode.FSPermissionChecker.checkPermission(FSPermissionChecker.java:193)\n\tat org.apache.hadoop.hdfs.server.namenode.FSDirectory.checkPermission(FSDirectory.java:1896)\n\tat org.apache.hadoop.hdfs.server.namenode.FSDirDeleteOp.delete(FSDirDeleteOp.java:110)\n\tat org.apache.hadoop.hdfs.server.namenode.FSNamesystem.delete(FSNamesystem.java:3104)\n\tat org.apache.hadoop.hdfs.server.namenode.NameNodeRpcServer.delete(NameNodeRpcServer.java:1127)\n\tat org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolServerSideTranslatorPB.delete(ClientNamenodeProtocolServerSideTranslatorPB.java:708)\n\tat org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos$ClientNamenodeProtocol$2.callBlockingMethod(ClientNamenodeProtocolProtos.java)\n\tat org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:528)\n\tat org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1086)\n\tat org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1029)\n\tat org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:957)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat javax.security.auth.Subject.doAs(Subject.java:422)\n\tat org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1762)\n\tat org.apache.hadoop.ipc.Server$Handler.run(Server.java:2957)\n\n\tat org.apache.hadoop.ipc.Client.getRpcResponse(Client.java:1562)\n\tat org.apache.hadoop.ipc.Client.call(Client.java:1508)\n\tat org.apache.hadoop.ipc.Client.call(Client.java:1405)\n\tat org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:233)\n\tat org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:118)\n\tat com.sun.proxy.$Proxy17.delete(Unknown Source)\n\tat org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolTranslatorPB.delete(ClientNamenodeProtocolTranslatorPB.java:644)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.hadoop.io.retry.RetryInvocationHandler.invokeMethod(RetryInvocationHandler.java:422)\n\tat org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invokeMethod(RetryInvocationHandler.java:165)\n\tat org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invoke(RetryInvocationHandler.java:157)\n\tat org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invokeOnce(RetryInvocationHandler.java:95)\n\tat org.apache.hadoop.io.retry.RetryInvocationHandler.invoke(RetryInvocationHandler.java:359)\n\tat com.sun.proxy.$Proxy18.delete(Unknown Source)\n\tat org.apache.hadoop.hdfs.DFSClient.delete(DFSClient.java:1612)\n\t... 39 more\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742665_582278585",
      "id": "paragraph_1660216357449_1381238890",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37222"
    },
    {
      "text": "%pyspark\nsc.setCheckpointDir(\"tmp\")\n\noutputLogMessageDF\\\n.checkpoint(eager=True)\\\n.repartition(1)\\\n.write.csv(INPUT_FILE_LOG_PATH,\nsep=\"\\u0001\",\nheader=True,\nmode=\"overwrite\",\nemptyValue=\"\",\n)\n\n#subprocess.call([\"hadoop\", \"fs\", \"-mv\", OUTPUT_TEMP_FILE_LOG_PATH, OUTPUT_LOG_PATH])\n#subprocess.call([\"hadoop\", \"fs\", \"-rm\", \"-r\", OUTPUT_TEMP_FILE_LOG_PATH])",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684742665_1891801956",
      "id": "paragraph_1661163051034_1265806109",
      "dateCreated": "2023-08-22T06:12:22+0000",
      "status": "READY",
      "$$hashKey": "object:37223"
    }
  ],
  "name": "JUPITER/PROMO_PARAMETERS_CALCULATION/PROMO_FILTERING_FOR_RECALCULATION",
  "id": "2J7TWQPH2",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/JUPITER/PROMO_PARAMETERS_CALCULATION/PROMO_FILTERING_FOR_RECALCULATION"
}