{
  "paragraphs": [
    {
      "text": "%md\n####Notebook \"PLAN_PRODUCT_PARAMS_CALCULATION_PROCESS\". \n####*Calculate plan product parameters and plan promo baseline, incremental and LSV*.\n###### *Developer: [LLC Smart-Com](http://smartcom.software/), andrey.philushkin@effem.com*",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:21+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>####Notebook &ldquo;PLAN_PRODUCT_PARAMS_CALCULATION_PROCESS&rdquo;. </p>\n<p>####*Calculate plan product parameters and plan promo baseline, incremental and LSV*.</p>\n<h6>*Developer: <a href=\"http://smartcom.software/\">LLC Smart-Com</a>, <a href=\"mailto:&#x61;&#110;d&#114;ey.&#112;&#x68;&#x69;&#x6c;u&#x73;hk&#105;&#110;&#64;&#101;f&#102;&#101;&#109;&#x2e;&#x63;&#x6f;&#x6d;&#42;\">&#x61;&#110;d&#114;ey.&#112;&#x68;&#x69;&#x6c;u&#x73;hk&#105;&#110;&#64;&#101;f&#102;&#101;&#109;&#x2e;&#x63;&#x6f;&#x6d;&#42;</a></h6>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684741415_134558491",
      "id": "20220812-090849_1902034521",
      "dateCreated": "2023-08-22T06:12:21+0000",
      "status": "READY",
      "focus": true,
      "$$hashKey": "object:36144"
    },
    {
      "text": "%pyspark\nfrom pyspark.sql import SQLContext, DataFrame, Row, Window\nfrom pyspark.sql import SparkSession\nfrom pyspark.context import SparkContext\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport pyspark.sql.functions as F\nimport pandas as pd\nimport datetime, time\nimport os\nimport json",
      "user": "anonymous",
      "dateUpdated": "2023-08-22T06:12:21+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684741415_1063716493",
      "id": "paragraph_1660295518916_1352515283",
      "dateCreated": "2023-08-22T06:12:21+0000",
      "status": "READY",
      "$$hashKey": "object:36145"
    },
    {
      "text": "%pyspark\ndef run(calcPlanPromoProductDF,planParamsPriceListDF,planParamsBaselineDF,calcPlanPromoDF,allCalcPlanPromoDF,planParamsSharesDF,datesDF,planParamsCorrectionDF,planParamsIncrementalDF,planParametersStatuses,promoProductCols,planPostPromoEffectDF):\n    sc = SparkContext.getOrCreate();\n    spark = SparkSession(sc)\n    \n    byPriceStartDate = (Window.partitionBy('PromoId', 'ProductId').orderBy(col(\"priceStartDate\").desc()))\n\n    # calcPlanPromoProductDF = calcPlanPromoProductDF.drop('Price')\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\n      .join(planParamsPriceListDF, \n            [\\\n              planParamsPriceListDF.priceStartDate <= calcPlanPromoProductDF.promoDispatchesStart,\n              planParamsPriceListDF.priceEndDate >= calcPlanPromoProductDF.promoDispatchesStart,\n              planParamsPriceListDF.priceClientTreeId == calcPlanPromoProductDF.promoClientTreeKeyId,\n              planParamsPriceListDF.priceProductId == calcPlanPromoProductDF.ProductId\n            ], \n            'left')\\\n      .select(\\\n               calcPlanPromoProductDF['*']\n              ,planParamsPriceListDF.priceStartDate\n              ,planParamsPriceListDF.Price.alias('calcPrice')\n             )\\\n      .withColumn('Row_Number', row_number().over(byPriceStartDate))\\\n      .where(col('Row_Number') == 1).drop('Row_Number')\n\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\n      .withColumn('Price', col('calcPrice'))\\\n      .drop('calcPrice')\n\n    #product price logging\n    logPricePromoProductDF = calcPlanPromoProductDF\\\n      .select(\\\n               calcPlanPromoProductDF.promoNumber\n              ,calcPlanPromoProductDF.ZREP\n              ,calcPlanPromoProductDF.Price\n             )\\\n      .withColumn('NullPrice', when(calcPlanPromoProductDF.Price.isNull(), True).otherwise(None))\\\n      .withColumn('ZeroPrice', when(calcPlanPromoProductDF.Price == 0, True).otherwise(None))\n\n    logNullPricePromoDF = logPricePromoProductDF\\\n      .where(col('NullPrice') == True)\\\n      .groupBy('promoNumber')\\\n      .agg(concat_ws(';', collect_list(col('ZREP'))).alias('nullPriceMessage'))\n\n    logZeroPricePromoDF = logPricePromoProductDF\\\n      .where(col('ZeroPrice') == True)\\\n      .groupBy('promoNumber')\\\n      .agg(concat_ws(';', collect_list(col('ZREP'))).alias('zeroPriceMessage'))\n\n    logPricePromoDF = logNullPricePromoDF\\\n      .join(logZeroPricePromoDF, 'promoNumber', 'full')\n    #---\n\n    calcPlanPromoProductDF = calcPlanPromoProductDF.fillna(0, 'Price')\n\n    #####*Set product baseline*\n\n    # calcPlanPromoProductDF = calcPlanPromoProductDF.drop('PlanProductBaselineCaseQty')\n\n    # set product shares\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\n      .join(planParamsSharesDF,\n           [\\\n             planParamsSharesDF.BrandTechId == calcPlanPromoProductDF.promoBrandTechId\n            ,planParamsSharesDF.ClientTreeId == calcPlanPromoProductDF.promoClientTreeKeyId\n            ,planParamsSharesDF.ParentClientTreeDemandCode == calcPlanPromoProductDF.promoDemandCode\n           ],\n           'left')\\\n      .select(\\\n               calcPlanPromoProductDF['*']\n              ,planParamsSharesDF.Share.cast(DecimalType(30,6)).alias('productShare')\n             )\n\n    #product share logging\n    logSharePromoProductDF = calcPlanPromoProductDF\\\n      .select(\\\n               calcPlanPromoProductDF.promoNumber\n              ,calcPlanPromoProductDF.ZREP\n              ,calcPlanPromoProductDF.productShare\n             )\\\n      .withColumn('NullShare', when(calcPlanPromoProductDF.productShare.isNull(), True).otherwise(None))\\\n      .withColumn('ZeroShare', when(calcPlanPromoProductDF.productShare == 0, True).otherwise(None))\n\n    logNullSharePromoDF = logSharePromoProductDF\\\n      .where(col('NullShare') == True)\\\n      .groupBy('promoNumber')\\\n      .agg(concat_ws(';', collect_list(col('ZREP'))).alias('nullShareMessage'))\n\n    logZeroSharePromoDF = logSharePromoProductDF\\\n      .where(col('ZeroShare') == True)\\\n      .groupBy('promoNumber')\\\n      .agg(concat_ws(';', collect_list(col('ZREP'))).alias('zeroShareMessage'))\n\n    logSharePromoDF = logNullSharePromoDF\\\n      .join(logZeroSharePromoDF, 'promoNumber', 'full')\n\n    logPromoProductDF = logPricePromoDF\\\n      .join(logSharePromoDF, 'promoNumber', 'full')\n    # ---\n\n    calcPlanPromoProductDF = calcPlanPromoProductDF.fillna(0, 'productShare')\n    # ---\n\n    # split promo duration by weeks\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\n      .join(datesDF, \n            [\\\n              datesDF.OriginalDate >= calcPlanPromoProductDF.promoStartDate\n             ,datesDF.OriginalDate <= calcPlanPromoProductDF.promoEndDate\n            ], \n            'inner')\\\n      .select(\\\n              calcPlanPromoProductDF['*']\n             ,datesDF.MarsWeekFullName\n             ,datesDF.MarsDay\n             )\n\n    cols = calcPlanPromoProductDF.columns\n    cols.remove('MarsDay')\n\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\n      .groupBy(cols)\\\n      .agg(count('*').cast(DecimalType(30,6)).alias('promoDaysInWeek'))\n    #  ---\n    \n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\n      .join(planPostPromoEffectDF, \n           [\\\n             planPostPromoEffectDF.ClientTreeId == calcPlanPromoProductDF.promoClientTreeKeyId\n            ,planPostPromoEffectDF.BrandTechId == calcPlanPromoProductDF.promoBrandTechId\n            ,planPostPromoEffectDF.Size == calcPlanPromoProductDF.Size\n            ,calcPlanPromoProductDF.promoPromoDuration >= planPostPromoEffectDF.MinDuration\n            ,calcPlanPromoProductDF.promoPromoDuration <= planPostPromoEffectDF.MaxDuration\n            ,calcPlanPromoProductDF.promoMarsMechanicDiscount >= planPostPromoEffectDF.MinDiscount\n            ,calcPlanPromoProductDF.promoMarsMechanicDiscount <= planPostPromoEffectDF.MaxDiscount\n           ],\n           'left')\\\n      .select(\\\n              calcPlanPromoProductDF['*']\n             ,planPostPromoEffectDF.PlanPostPromoEffectW1\n             ,planPostPromoEffectDF.PlanPostPromoEffectW2\n             )\n\n    # set product baseline\n    planParamsBaselineDF = planParamsBaselineDF\\\n      .join(datesDF, planParamsBaselineDF.baselineStartDate == datesDF.OriginalDate, 'inner')\\\n      .select(\\\n              planParamsBaselineDF['*']\n             ,datesDF.MarsWeekFullName\n             )\n\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\n      .join(planParamsBaselineDF, \n           [\\\n             planParamsBaselineDF.baselineProductId == calcPlanPromoProductDF.ProductId\n            ,planParamsBaselineDF.baselineDemandCode == calcPlanPromoProductDF.promoDemandCode\n            ,planParamsBaselineDF.MarsWeekFullName == calcPlanPromoProductDF.MarsWeekFullName\n           ],\n           'left')\n\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\n      .fillna(0, ['SellInBaselineQTY', 'SellOutBaselineQTY'])\\\n      .drop('MarsWeekFullName')\n\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\n      .withColumn(\\\n                   'weeklyBaseline'\n                  ,when(col('promoIsOnInvoice') == 'True', ((col('SellInBaselineQTY') * col('promoDaysInWeek') / 7.0) * (col('productShare') / 100.0)).cast(DecimalType(30,6)))\n                       .otherwise(((col('SellOutBaselineQTY') * col('promoDaysInWeek') / 7.0) * (col('productShare') / 100.0)).cast(DecimalType(30,6)))\n                 )\\\n      .drop('baselineDemandCode', 'baselineProductId', 'baselineStartDate', 'promoDaysInWeek', 'SellInBaselineQTY', 'SellOutBaselineQTY')\n      \n    cols = calcPlanPromoProductDF.columns\n    cols.remove('weeklyBaseline')\n\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\n      .groupBy(cols)\\\n      .agg(sum('weeklyBaseline').cast(DecimalType(30,6)).alias('calcPlanProductBaselineCaseQty'))\n\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\n      .withColumn('PlanProductBaselineCaseQty', when(col('promoInOut') == 'False', col('calcPlanProductBaselineCaseQty').cast(DecimalType(30,6))).otherwise(None))\\\n      .drop('calcPlanProductBaselineCaseQty')\n\n    #product baseline qty logging\n    logBaselineQtyPromoProductDF = calcPlanPromoProductDF\\\n      .select(\\\n               calcPlanPromoProductDF.promoNumber\n              ,calcPlanPromoProductDF.ZREP\n              ,calcPlanPromoProductDF.PlanProductBaselineCaseQty\n             )\\\n      .withColumn('ZeroBaselineQty', when(calcPlanPromoProductDF.PlanProductBaselineCaseQty == 0, True).otherwise(None))\n\n    logZeroBaselineQtyPromoDF = logBaselineQtyPromoProductDF\\\n      .where(col('ZeroBaselineQty') == True)\\\n      .groupBy('promoNumber')\\\n      .agg(concat_ws(';', collect_list(col('ZREP'))).alias('zeroBaselineQtyMessage'))\n\n    logPromoProductDF = logPromoProductDF\\\n      .join(logZeroBaselineQtyPromoDF, 'promoNumber', 'full')\n    # ---\n\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\n      .withColumn('PlanProductBaselineLSV', when(col('promoInOut') == 'False', (col('PlanProductBaselineCaseQty') * col('Price')).cast(DecimalType(30,6))).otherwise(None))\n    #  ---\n\n    #####*Calculate plan product parameters*\n\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\n      .join(planParamsCorrectionDF, planParamsCorrectionDF.correctionPromoProductId == calcPlanPromoProductDF.Id, 'left')\\\n      .select(\\\n               calcPlanPromoProductDF['*']\n              ,when(planParamsCorrectionDF.correctionPlanProductUpliftPercentCorrected.isNull(), calcPlanPromoProductDF.PlanProductUpliftPercent)\\\n                    .otherwise(planParamsCorrectionDF.correctionPlanProductUpliftPercentCorrected).cast(DecimalType(30,6)).alias('productUpliftPercent')\n             )\n\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\n      .join(planParamsIncrementalDF, \n            [\\\n              planParamsIncrementalDF.incrementalPromoId == calcPlanPromoProductDF.PromoId\n             ,planParamsIncrementalDF.incrementalProductId == calcPlanPromoProductDF.ProductId\n            ]\n            ,'left')\\\n      .select(\\\n               calcPlanPromoProductDF['*']\n              ,planParamsIncrementalDF.PlanPromoIncrementalCases.cast(DecimalType(30,6))\n             )\n\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\n      .withColumn('PlanProductPostPromoEffectW1', when(col('PlanPostPromoEffectW1').isNull(), 0)\\\n                  .otherwise(col('PlanPostPromoEffectW1')).cast(DecimalType(30,6)))\\\n      .withColumn('PlanProductPostPromoEffectW2', when(col('PlanPostPromoEffectW2').isNull(), 0)\\\n                  .otherwise(col('PlanPostPromoEffectW2')).cast(DecimalType(30,6)))\n\n    calcPlanPromoProductDF = calcPlanPromoProductDF\\\n      .withColumn('PlanProductIncrementalLSV', when(col('promoInOut') == 'False', col('PlanProductBaselineLSV') * col('productUpliftPercent') / 100.0)\\\n                                                            .otherwise(col('PlanPromoIncrementalCases') * col('Price')).cast(DecimalType(30,6)))\\\n      .withColumn('PlanProductLSV', when(col('promoInOut') == 'False', col('PlanProductBaselineLSV') + col('PlanProductIncrementalLSV'))\\\n                                                            .otherwise(col('PlanProductIncrementalLSV')).cast(DecimalType(30,6)))\\\n      .withColumn('PlanProductPCPrice', (col('Price') / col('UOM_PC2Case')).cast(DecimalType(30,6)))\\\n      .withColumn('PlanProductIncrementalCaseQty', when(col('promoInOut') == 'False', col('PlanProductBaselineCaseQty') * col('productUpliftPercent') / 100.0)\\\n                                                          .otherwise(col('PlanPromoIncrementalCases')).cast(DecimalType(30,6)))\\\n      .withColumn('PlanProductCaseQty', when(col('promoInOut') == 'False', col('PlanProductBaselineCaseQty') + col('PlanProductIncrementalCaseQty'))\\\n                                                          .otherwise(col('PlanProductIncrementalCaseQty')).cast(DecimalType(30,6)))\\\n      .withColumn('PlanProductPCQty', (col('PlanProductCaseQty') * col('UOM_PC2Case')).cast(DecimalType(30,6)))\\\n      .withColumn('PlanProductCaseLSV', when(col('promoInOut') == 'False', col('PlanProductBaselineCaseQty') * col('Price'))\\\n                                              .otherwise(col('PlanProductCaseQty') * col('Price')).cast(DecimalType(30,6)))\\\n      .withColumn('PlanProductPCLSV', (col('PlanProductCaseLSV') / col('UOM_PC2Case')).cast(DecimalType(30,6)))\\\n      .withColumn('PlanProductPostPromoEffectQtyW1', when(col('promoInOut') == 'False', (col('PlanProductBaselineCaseQty') * col('PlanProductPostPromoEffectW1') / 100.0))\\\n                                                    .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('PlanProductPostPromoEffectQtyW1', when(col('PlanProductPostPromoEffectQtyW1').isNull(), 0)\\\n                  .otherwise(col('PlanProductPostPromoEffectQtyW1')).cast(DecimalType(30,6)))\\\n      .withColumn('PlanProductPostPromoEffectQtyW2', when(col('promoInOut') == 'False', (col('PlanProductBaselineCaseQty') * col('PlanProductPostPromoEffectW2') / 100.0))\\\n                                                    .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('PlanProductPostPromoEffectQtyW2', when(col('PlanProductPostPromoEffectQtyW2').isNull(), 0)\\\n                  .otherwise(col('PlanProductPostPromoEffectQtyW2')).cast(DecimalType(30,6)))\\\n      .withColumn('PlanProductPostPromoEffectQty', when(col('promoInOut') == 'False', col('PlanProductPostPromoEffectQtyW1') + col('PlanProductPostPromoEffectQtyW2'))\\\n                                                    .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('PlanProductPostPromoEffectLSVW1', when(col('promoInOut') == 'False', (col('PlanProductBaselineLSV') * col('PlanProductPostPromoEffectW1') / 100.0))\\\n                                                    .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('PlanProductPostPromoEffectLSVW1', when(col('PlanProductPostPromoEffectLSVW1').isNull(), 0)\\\n                  .otherwise(col('PlanProductPostPromoEffectLSVW1')).cast(DecimalType(30,6)))\\\n      .withColumn('PlanProductPostPromoEffectLSVW2', when(col('promoInOut') == 'False', (col('PlanProductBaselineLSV') * col('PlanProductPostPromoEffectW2') / 100.0))\\\n                                                    .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('PlanProductPostPromoEffectLSVW2', when(col('PlanProductPostPromoEffectLSVW2').isNull(), 0)\\\n                  .otherwise(col('PlanProductPostPromoEffectLSVW2')).cast(DecimalType(30,6)))\\\n      .withColumn('PlanProductPostPromoEffectLSV', when(col('promoInOut') == 'False', col('PlanProductPostPromoEffectLSVW1') + col('PlanProductPostPromoEffectLSVW2'))\\\n                                              .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('PlanProductBaselineVolume', (col('PlanProductBaselineCaseQty') * col('CaseVolume')).cast(DecimalType(30,6)))\\\n      .withColumn('PlanProductIncrementalVolume', when(col('promoInOut') == 'True', col('PlanProductIncrementalCaseQty') * col('CaseVolume'))\\\n                                                          .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('PlanProductPostPromoEffectVolumeW1', when(col('promoInOut') == 'False', col('PlanProductBaselineVolume') * col('PlanProductPostPromoEffectW1') / 100).otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('PlanProductPostPromoEffectVolumeW2', when(col('promoInOut') == 'False', col('PlanProductBaselineVolume') * col('PlanProductPostPromoEffectW2') / 100).otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('PlanProductPostPromoEffectVolume', when(col('promoInOut') == 'False', col('PlanProductPostPromoEffectVolumeW1') + col('PlanProductPostPromoEffectVolumeW2')).otherwise(0).cast(DecimalType(30,6)))\n\n    #####*Calculate PlanPromoIncrementalLSV, PlanPromoBaselineLSV, PlanPromoLSV*\n\n    sumPlanProductParamsList = calcPlanPromoProductDF\\\n      .select(\\\n               col('promoIdCol')\n              ,col('PlanProductIncrementalLSV')\n              ,col('PlanProductBaselineLSV')\n              ,col('PlanProductBaselineVolume')\n              ,col('PlanProductIncrementalVolume')\n              ,col('PlanProductLSV')\n              ,col('PlanProductPostPromoEffectLSVW1')\n              ,col('PlanProductPostPromoEffectLSVW2')\n              ,col('PlanProductPostPromoEffectVolumeW1')\n              ,col('PlanProductPostPromoEffectVolumeW2')\n             )\\\n      .groupBy('promoIdCol')\\\n      .agg(sum('PlanProductIncrementalLSV').alias('calcPlanPromoIncrementalLSV'),\n           sum('PlanProductBaselineLSV').alias('calcPlanPromoBaselineLSV'),\n           sum('PlanProductIncrementalVolume').alias('calcPlanProductIncrementalVolume'),\n           sum('PlanProductBaselineVolume').alias('calcPlanProductBaselineVolume'),\n           sum('PlanProductPostPromoEffectLSVW1').alias('calcPlanProductPostPromoEffectLSVW1'),\n           sum('PlanProductPostPromoEffectLSVW2').alias('calcPlanProductPostPromoEffectLSVW2'),\n           sum('PlanProductPostPromoEffectVolumeW1').alias('calcPlanProductPostPromoEffectVolumeW1'),\n           sum('PlanProductPostPromoEffectVolumeW2').alias('calcPlanProductPostPromoEffectVolumeW2'))\\\n      .withColumn('tempPlanPromoIncrementalLSV', when(col('calcPlanPromoIncrementalLSV').isNull(), 0).otherwise(col('calcPlanPromoIncrementalLSV')))\\\n      .withColumn('tempPlanPromoBaselineLSV', when(col('calcPlanPromoBaselineLSV').isNull(), 0).otherwise(col('calcPlanPromoBaselineLSV')))\\\n      .withColumn('calcPlanPromoLSV', col('tempPlanPromoIncrementalLSV') + col('tempPlanPromoBaselineLSV'))\\\n      .withColumn('calcPlanProductBaselineVolume', when(col('calcPlanProductBaselineVolume').isNull(), 0).otherwise(col('calcPlanProductBaselineVolume')))\\\n      .withColumn('calcPlanProductIncrementalVolume', when(col('calcPlanProductIncrementalVolume').isNull(), 0).otherwise(col('calcPlanProductIncrementalVolume')))\\\n      .withColumn('calcPlanProductPostPromoEffectLSVW1', when(col('calcPlanProductPostPromoEffectLSVW1').isNull(), 0).otherwise(col('calcPlanProductPostPromoEffectLSVW1')))\\\n      .withColumn('calcPlanProductPostPromoEffectLSVW2', when(col('calcPlanProductPostPromoEffectLSVW2').isNull(), 0).otherwise(col('calcPlanProductPostPromoEffectLSVW2')))\\\n      .withColumn('calcPlanProductPostPromoEffectVolumeW1', when(col('calcPlanProductPostPromoEffectVolumeW1').isNull(), 0).otherwise(col('calcPlanProductPostPromoEffectVolumeW1')))\\\n      .withColumn('calcPlanProductPostPromoEffectVolumeW2', when(col('calcPlanProductPostPromoEffectVolumeW2').isNull(), 0).otherwise(col('calcPlanProductPostPromoEffectVolumeW2')))\\\n      .drop('tempPlanPromoIncrementalLSV','tempPlanPromoBaselineLSV')\n    \n    sumPlanProductParamsList = sumPlanProductParamsList.select(\\\n               col('promoIdCol')\n              ,col('calcPlanPromoIncrementalLSV')\n              ,col('calcPlanPromoBaselineLSV')\n              ,col('calcPlanProductIncrementalVolume')\n              ,col('calcPlanProductBaselineVolume')\n              ,col('calcPlanPromoLSV')\n              ,col('calcPlanProductPostPromoEffectLSVW1')\n              ,col('calcPlanProductPostPromoEffectLSVW2')\n              ,col('calcPlanProductPostPromoEffectVolumeW1')\n              ,col('calcPlanProductPostPromoEffectVolumeW2')\n             )\n\n    sumPlanProductParamsList = sumPlanProductParamsList.collect()\n\n    planParSchema = StructType([\n      StructField(\"promoIdCol\", StringType(), True),\n      StructField(\"calcPlanPromoIncrementalLSV\", DecimalType(30,6), True),\n      StructField(\"calcPlanPromoBaselineLSV\", DecimalType(30,6), True),\n      StructField(\"calcPlanProductIncrementalVolume\", DecimalType(30,6), True),\n      StructField(\"calcPlanProductBaselineVolume\", DecimalType(30,6), True),\n      StructField(\"calcPlanPromoLSV\", DecimalType(30,6), True),\n      StructField(\"calcPlanProductPostPromoEffectLSVW1\", DecimalType(30,6), True),\n      StructField(\"calcPlanProductPostPromoEffectLSVW2\", DecimalType(30,6), True),\n      StructField(\"calcPlanProductPostPromoEffectVolumeW1\", DecimalType(30,6), True),\n      StructField(\"calcPlanProductPostPromoEffectVolumeW2\", DecimalType(30,6), True)\n    ])\n\n    planParDF = spark.createDataFrame(sumPlanProductParamsList, planParSchema)\n\n    calcPlanPromoDF = calcPlanPromoDF\\\n      .join(planParDF, planParDF.promoIdCol == calcPlanPromoDF.Id, 'inner')\n\n    allCalcPlanPromoDF = allCalcPlanPromoDF\\\n      .join(calcPlanPromoDF, 'Id', 'left')\\\n      .select(\\\n               allCalcPlanPromoDF['*']\n              ,calcPlanPromoDF.calcPlanPromoIncrementalLSV\n              ,calcPlanPromoDF.calcPlanPromoBaselineLSV\n              ,calcPlanPromoDF.calcPlanPromoLSV\n              ,calcPlanPromoDF.calcPlanProductBaselineVolume\n              ,calcPlanPromoDF.calcPlanProductIncrementalVolume\n              ,calcPlanPromoDF.calcPlanProductPostPromoEffectLSVW1\n              ,calcPlanPromoDF.calcPlanProductPostPromoEffectLSVW2\n              ,calcPlanPromoDF.calcPlanProductPostPromoEffectVolumeW1\n              ,calcPlanPromoDF.calcPlanProductPostPromoEffectVolumeW2\n             )\\\n      .withColumn('PlanPromoIncrementalLSV', when(calcPlanPromoDF.calcPlanPromoIncrementalLSV.isNull(), allCalcPlanPromoDF.PlanPromoIncrementalLSV)\\\n                                             .otherwise(calcPlanPromoDF.calcPlanPromoIncrementalLSV).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoBaselineLSV', when(calcPlanPromoDF.calcPlanPromoBaselineLSV.isNull(), allCalcPlanPromoDF.PlanPromoBaselineLSV)\\\n                                             .otherwise(calcPlanPromoDF.calcPlanPromoBaselineLSV).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoLSV', when(calcPlanPromoDF.calcPlanPromoLSV.isNull(), allCalcPlanPromoDF.PlanPromoLSV)\\\n                                             .otherwise(calcPlanPromoDF.calcPlanPromoLSV).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoUpliftPercent', when(((col('PlanPromoBaselineLSV') != 0) & (col('NeedRecountUplift') == True)\\\n                                                  & col('promoStatusSystemName').isin(*planParametersStatuses))\\\n                                                 ,col('PlanPromoIncrementalLSV') / col('PlanPromoBaselineLSV') * 100.0)\\\n                                             .otherwise(col('PlanPromoUpliftPercent')).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoBaselineVolume', when(calcPlanPromoDF.calcPlanProductBaselineVolume.isNull(), allCalcPlanPromoDF.PlanPromoBaselineVolume)\\\n                                             .otherwise(calcPlanPromoDF.calcPlanProductBaselineVolume).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoIncrementalVolume', when(col('InOut') == 'False', col('PlanPromoBaselineVolume') * col('PlanPromoUpliftPercent') / 100)\\\n                                                .otherwise(when(calcPlanPromoDF.calcPlanProductIncrementalVolume.isNull(), allCalcPlanPromoDF.PlanPromoIncrementalVolume)\\\n                                                          .otherwise(col('calcPlanProductIncrementalVolume')).cast(DecimalType(30,6))))\\\n      .withColumn('PlanPromoPostPromoEffectLSVW1', when(calcPlanPromoDF.calcPlanProductPostPromoEffectLSVW1.isNull(), allCalcPlanPromoDF.PlanPromoPostPromoEffectLSVW1)\\\n                                             .otherwise(calcPlanPromoDF.calcPlanProductPostPromoEffectLSVW1).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoPostPromoEffectLSVW2', when(calcPlanPromoDF.calcPlanProductPostPromoEffectLSVW2.isNull(), allCalcPlanPromoDF.PlanPromoPostPromoEffectLSVW2)\\\n                                             .otherwise(calcPlanPromoDF.calcPlanProductPostPromoEffectLSVW2).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoPostPromoEffectVolumeW1', when(calcPlanPromoDF.calcPlanProductPostPromoEffectVolumeW1.isNull(), allCalcPlanPromoDF.PlanPromoPostPromoEffectVolumeW1)\\\n                                             .otherwise(calcPlanPromoDF.calcPlanProductPostPromoEffectVolumeW1).cast(DecimalType(30,6)))\\\n      .withColumn('PlanPromoPostPromoEffectVolumeW2', when(calcPlanPromoDF.calcPlanProductPostPromoEffectVolumeW2.isNull(), allCalcPlanPromoDF.PlanPromoPostPromoEffectVolumeW2)\\\n                                             .otherwise(calcPlanPromoDF.calcPlanProductPostPromoEffectVolumeW2).cast(DecimalType(30,6)))\\\n      .drop('calcPlanPromoIncrementalLSV','calcPlanPromoBaselineLSV','calcPlanPromoLSV','calcPlanProductBaselineVolume','calcPlanProductIncrementalVolume','calcPlanProductPostPromoEffectLSVW1','calcPlanProductPostPromoEffectLSVW2','calcPlanProductPostPromoEffectVolumeW1','calcPlanProductPostPromoEffectVolumeW2')\n\n    #####*Get result*\n\n    # newPromoProductDF = calcPlanPromoProductDF.where(col('Action') == 'Added').select(promoProductCols)\n    calcPlanPromoProductDF = calcPlanPromoProductDF.select(promoProductCols)\n    print('Plan product parameters calculation completed!')\n    \n    return calcPlanPromoProductDF,calcPlanPromoDF,allCalcPlanPromoDF,logPromoProductDF\n    ",
      "user": "anonymous",
      "dateUpdated": "2023-08-25T04:29:36+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692684741415_923145399",
      "id": "paragraph_1660295531984_1959047283",
      "dateCreated": "2023-08-22T06:12:21+0000",
      "status": "READY",
      "$$hashKey": "object:36146"
    }
  ],
  "name": "JUPITER/PROMO_PARAMETERS_CALCULATION/PLAN_PRODUCT_PARAMS_CALCULATION_PROCESS",
  "id": "2J8YVNMBF",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/JUPITER/PROMO_PARAMETERS_CALCULATION/PLAN_PRODUCT_PARAMS_CALCULATION_PROCESS"
}