{
  "paragraphs": [
    {
      "text": "%md\n####Notebook \"ACTUAL_PRODUCT_PARAMS_CALCULATION_PROCESS\". \n####*Calculate actual product parameters and ActualPromoLSVSI, ActualPromoLSVByCompensation*.\n###### *Developer: [LLC Smart-Com](http://smartcom.software/), andrey.philushkin@effem.com*",
      "user": "anonymous",
      "dateUpdated": "2023-08-25T05:34:12+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>####Notebook &ldquo;ACTUAL_PRODUCT_PARAMS_CALCULATION_PROCESS&rdquo;. </p>\n<p>####*Calculate actual product parameters and ActualPromoLSVSI, ActualPromoLSVByCompensation*.</p>\n<h6>*Developer: <a href=\"http://smartcom.software/\">LLC Smart-Com</a>, <a href=\"mailto:&#x61;&#x6e;d&#114;&#x65;&#x79;&#46;&#112;&#104;&#105;&#108;&#x75;&#x73;&#104;&#107;&#105;&#110;&#x40;&#101;&#102;&#102;&#x65;&#109;&#46;&#x63;&#111;&#x6d;&#x2a;\">&#x61;&#x6e;d&#114;&#x65;&#x79;&#46;&#112;&#104;&#105;&#108;&#x75;&#x73;&#104;&#107;&#105;&#110;&#x40;&#101;&#102;&#102;&#x65;&#109;&#46;&#x63;&#111;&#x6d;&#x2a;</a></h6>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692941652596_1262677582",
      "id": "20220815-090312_554722352",
      "dateCreated": "2023-08-25T05:34:12+0000",
      "status": "READY",
      "focus": true,
      "$$hashKey": "object:3877"
    },
    {
      "text": "%pyspark\nfrom pyspark.sql import SQLContext, DataFrame, Row, Window\nfrom pyspark.sql import SparkSession\nfrom pyspark.context import SparkContext\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport pyspark.sql.functions as F\nimport pandas as pd\nimport datetime, time\nimport os\nimport json",
      "user": "anonymous",
      "dateUpdated": "2023-08-25T05:34:12+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692941652596_419858169",
      "id": "paragraph_1660557952481_1177826588",
      "dateCreated": "2023-08-25T05:34:12+0000",
      "status": "READY",
      "$$hashKey": "object:3878"
    },
    {
      "text": "%pyspark\ndef run(calcActualPromoProductDF,actualParamsPriceListDF,calcActualPromoDF,allCalcActualPromoDF,promoProductCols):\n    sc = SparkContext.getOrCreate();\n    spark = SparkSession(sc)\n    \n    #####*Set product price*\n\n    byPriceStartDate = Window.partitionBy(calcActualPromoProductDF.columns).orderBy(col(\"priceStartDate\").desc())\n\n    calcActualPromoProductDF = calcActualPromoProductDF\\\n      .join(actualParamsPriceListDF, \n            [\\\n              actualParamsPriceListDF.priceStartDate <= calcActualPromoProductDF.promoDispatchesStart,\n              actualParamsPriceListDF.priceEndDate >= calcActualPromoProductDF.promoDispatchesStart,\n              actualParamsPriceListDF.priceClientTreeId == calcActualPromoProductDF.promoClientTreeKeyId,\n              actualParamsPriceListDF.priceProductId == calcActualPromoProductDF.ProductId\n            ], \n            'left')\\\n      .select(\\\n               calcActualPromoProductDF['*']\n              ,actualParamsPriceListDF.priceStartDate\n              ,actualParamsPriceListDF.Price.alias('newPrice')\n             )\\\n      .withColumn('Row_Number', row_number().over(byPriceStartDate))\\\n      .where(col('Row_Number') == 1).drop('Row_Number')\n\n    calcActualPromoProductDF = calcActualPromoProductDF\\\n      .withColumn('Price', when(((col('Price').isNull()) | (col('Price') == 0)), col('newPrice')).otherwise(col('Price')))\\\n      .drop('newPrice')\n\n    #product price logging\n    logPricePromoProductDF = calcActualPromoProductDF\\\n      .select(\\\n               calcActualPromoProductDF.promoNumber\n              ,calcActualPromoProductDF.ZREP\n              ,calcActualPromoProductDF.Price\n             )\\\n      .withColumn('NullPrice', when(calcActualPromoProductDF.Price.isNull(), True).otherwise(None))\\\n      .withColumn('ZeroPrice', when(calcActualPromoProductDF.Price == 0, True).otherwise(None))\n\n    logNullPricePromoDF = logPricePromoProductDF\\\n      .where(col('NullPrice') == True)\\\n      .groupBy('promoNumber')\\\n      .agg(concat_ws(';', collect_list(col('ZREP'))).alias('nullPriceMessage'))\n\n    logZeroPricePromoDF = logPricePromoProductDF\\\n      .where(col('ZeroPrice') == True)\\\n      .groupBy('promoNumber')\\\n      .agg(concat_ws(';', collect_list(col('ZREP'))).alias('zeroPriceMessage'))\n\n    logPricePromoDF = logNullPricePromoDF\\\n      .join(logZeroPricePromoDF, 'promoNumber', 'full')\n    #---\n\n    #####*Calculate actual product parameters*\n\n    # calcPlanPromoProductDF = calcPlanPromoProductDF\\\n    #   .join(planParamsIncrementalDF, \n    #         [\\\n    #           planParamsIncrementalDF.incrementalPromoId == calcPlanPromoProductDF.PromoId\n    #          ,planParamsIncrementalDF.incrementalProductId == calcPlanPromoProductDF.ProductId\n    #         ]\n    #         ,'left')\\\n    #   .select(\\\n    #            calcPlanPromoProductDF['*']\n    #           ,planParamsIncrementalDF.PlanPromoIncrementalCases.cast(DecimalType(30,6))\n    #          )\n\n    calcActualPromoProductDF = calcActualPromoProductDF\\\n      .withColumn('isActualPromoBaseLineLSVChangedByDemand', when((~col('ActualPromoBaselineLSV').isNull()) & (col('ActualPromoBaselineLSV') != col('PlanPromoBaselineLSV')), True).otherwise(False))\\\n      .withColumn('isActualPromoLSVChangedByDemand', when((~col('ActualPromoLSVSO').isNull()) & (col('ActualPromoLSVSO') != 0), True).otherwise(False))\\\n      .withColumn('isActualPromoProstPromoEffectLSVChangedByDemand', when((~col('ActualPromoPostPromoEffectLSV').isNull()) & (col('ActualPromoPostPromoEffectLSV') != 0), True).otherwise(False))\n\n    calcActualPromoProductDF = calcActualPromoProductDF\\\n      .withColumn('ActualProductBaselineLSV', when((col('promoInOut') == 'False') & (~col('isActualPromoBaseLineLSVChangedByDemand')), col('PlanProductBaselineLSV'))\\\n                                          .otherwise(col('ActualProductBaselineLSV')).cast(DecimalType(30,6)))\\\n      .withColumn('ActualProductCaseQty', when(((col('UOM_PC2Case') != 0) & ~(col('ActualProductPCQty').isNull())), col('ActualProductPCQty') / col('UOM_PC2Case'))\\\n                  .otherwise(0).cast(IntegerType()))\\\n      .withColumn('ActualProductSellInPrice', when(col('UOM_PC2Case') != 0, col('Price') / col('UOM_PC2Case')).otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('ActualProductBaselineCaseQty', when((col('Price') != 0) & ~(col('Price').isNull()), col('ActualProductBaselineLSV') / col('Price'))\\\n                                          .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('ActualProductPCLSV', col('ActualProductPCQty') * col('ActualProductSellInPrice').cast(DecimalType(30,6)))\\\n      .withColumn('ActualProductPCLSV', when(col('ActualProductPCLSV').isNull(), 0).otherwise(col('ActualProductPCLSV')).cast(DecimalType(30,6)))\\\n      .withColumn('ActualProductLSV', when((col('promoIsOnInvoice') == True), col('ActualProductPCLSV'))\\\n                                          .otherwise(when(col('isActualPromoLSVChangedByDemand') == False, 0).otherwise(col('ActualProductLSV'))).cast(DecimalType(30,6)))\\\n      .withColumn('ActualProductIncrementalLSV', when(col('ActualProductBaselineLSV').isNull(), col('ActualProductLSV'))\\\n                                          .otherwise(col('ActualProductLSV') - col('ActualProductBaselineLSV')).cast(DecimalType(30,6)))\\\n      .withColumn('ActualProductUpliftPercent', when(col('promoInOut') == 'False', \n                                                     when(col('ActualProductBaselineLSV') != 0, col('ActualProductIncrementalLSV') / col('ActualProductBaselineLSV') * 100.0)\\\n                                                     .otherwise(0))\\\n                                                .otherwise(None).cast(DecimalType(30,6)))\\\n      .withColumn('ActualProductPostPromoEffectQtyW1', when(col('promoInOut') == 'False', col('PlanProductBaselineCaseQty') * col('PlanProductPostPromoEffectW1') / 100.0)\\\n                                              .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('ActualProductPostPromoEffectQtyW2', when(col('promoInOut') == 'False', col('PlanProductBaselineCaseQty') * col('PlanProductPostPromoEffectW2') / 100.0)\\\n                                              .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('ActualProductPostPromoEffectQty', when(col('promoInOut') == 'False', col('ActualProductPostPromoEffectQtyW1') + col('ActualProductPostPromoEffectQtyW2'))\\\n                                              .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('ActualProductLSVByCompensation', (col('ActualProductPCQty') * col('ActualProductSellInPrice')).cast(DecimalType(30,6)))\\\n      .withColumn('ActualProductLSVByCompensation', when(col('ActualProductLSVByCompensation').isNull(), 0)\\\n                  .otherwise(col('ActualProductLSVByCompensation')).cast(DecimalType(30,6)))\\\n      .withColumn('ActualProductIncrementalPCQty', when(col('ActualProductSellInPrice') != 0, col('ActualProductIncrementalLSV') / col('ActualProductSellInPrice'))\\\n                                                  .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('ActualProductIncrementalPCLSV', when(col('UOM_PC2Case') != 0, col('ActualProductIncrementalLSV') / col('UOM_PC2Case'))\\\n                                                  .otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('ActualProductQtySO', (col('ActualProductLSV') / (col('Price') /col('UOM_PC2Case'))).cast(DecimalType(30,6)))\\\n      .withColumn('PCPrice', (col('Price') / col('UOM_PC2Case')).cast(DecimalType(30,6)))\\\n      .withColumn('ActualProductBaselineVolume', (col('ActualProductBaselineLSV') / col('PCPrice') * col('PCVolume')).cast(DecimalType(30,6)))\\\n      .withColumn('ActualProductPostPromoEffectVolume', (col('ActualProductPostPromoEffectLSV') / col('PCPrice') * col('PCVolume')).cast(DecimalType(30,6)))\\\n      .withColumn('ActualProductVolumeByCompensation', (col('ActualProductPCQty') * col('PCVolume')).cast(DecimalType(30,6)))\\\n      .withColumn('ActualProductVolume', (col('ActualProductQtySO') * col('PCVolume')).cast(DecimalType(30,6)))\n\n    #####*Calculate ActualPromoLSVByCompensation, ActualPromoLSVSI*\n\n    sumActualProductParamsList = calcActualPromoProductDF\\\n      .select(\\\n                col('promoIdCol')\n               ,col('ActualProductLSVByCompensation')\n               ,col('ActualProductBaselineVolume')\n               ,col('ActualProductPostPromoEffectVolume')\n               ,col('ActualProductVolumeByCompensation')\n               ,col('ActualProductVolume')\n             )\\\n      .groupBy('promoIdCol')\\\n      .agg(sum('ActualProductLSVByCompensation').cast(DecimalType(30,6)).alias('calcActualPromoLSVByCompensation'),\n           sum('ActualProductBaselineVolume').cast(DecimalType(30,6)).alias('calcActualPromoBaselineVolume'),\n           sum('ActualProductPostPromoEffectVolume').cast(DecimalType(30,6)).alias('calcActualPromoPostPromoEffectVolume'),\n           sum('ActualProductVolumeByCompensation').cast(DecimalType(30,6)).alias('calcActualPromoVolumeByCompensation'),\n           sum('ActualProductVolume').cast(DecimalType(30,6)).alias('calcActualPromoVolume'))\\\n      .collect()\n\n    actualParSchema = StructType([\n      StructField(\"promoIdCol\", StringType(), True),\n      StructField(\"calcActualPromoLSVByCompensation\", DecimalType(30,6), True),\n      StructField(\"calcActualPromoBaselineVolume\", DecimalType(30,6), True),\n      StructField(\"calcActualPromoPostPromoEffectVolume\", DecimalType(30,6), True),\n      StructField(\"calcActualPromoVolumeByCompensation\", DecimalType(30,6), True),\n      StructField(\"calcActualPromoVolume\", DecimalType(30,6), True)\n    ])\n\n    actualParDF = spark.createDataFrame(sumActualProductParamsList, actualParSchema)\n\n    calcActualPromoDF = calcActualPromoDF\\\n      .join(actualParDF, actualParDF.promoIdCol == calcActualPromoDF.Id, 'inner')\\\n      .withColumn('ActualPromoLSVByCompensation', when(col('calcActualPromoLSVByCompensation') == 0, None).otherwise(col('calcActualPromoLSVByCompensation')))\\\n      .withColumn('ActualPromoLSVSI', when(col('calcActualPromoLSVByCompensation') == 0, None).otherwise(col('calcActualPromoLSVByCompensation')))\\\n      .withColumn('ActualPromoPostPromoEffectVolume', when(col('InOut') == False, col('calcActualPromoPostPromoEffectVolume')).otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('ActualPromoVolumeByCompensation', when(col('InOut') == False, col('calcActualPromoVolumeByCompensation')).otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('ActualPromoVolume',  when(col('IsOnInvoice') == False, col('calcActualPromoVolume')).otherwise(0).cast(DecimalType(30,6)))\\\n      .withColumn('ActualPromoVolume',  when(col('InOut') == True, col('calcActualPromoVolume')).otherwise(col('ActualPromoVolume')).cast(DecimalType(30,6)))\n\n    calcActualPromoDF = calcActualPromoDF\\\n      .select('Id', 'ActualPromoLSVByCompensation', 'ActualPromoLSVSI', 'calcActualPromoBaselineVolume', 'ActualPromoPostPromoEffectVolume', 'ActualPromoVolumeByCompensation', 'ActualPromoVolume')\n\n    allCalcActualPromoDF = allCalcActualPromoDF\\\n      .join(calcActualPromoDF, 'Id', 'left')\\\n      .select(\\\n               allCalcActualPromoDF['*']\n              ,calcActualPromoDF.ActualPromoLSVByCompensation.alias('calcActualPromoLSVByCompensation')\n              ,calcActualPromoDF.ActualPromoLSVSI.alias('calcActualPromoLSVSI')\n              ,calcActualPromoDF.calcActualPromoBaselineVolume.alias('calcActualPromoBaselineVolume')\n              ,calcActualPromoDF.ActualPromoPostPromoEffectVolume.alias('calcActualPromoPostPromoEffectVolume')\n              ,calcActualPromoDF.ActualPromoVolumeByCompensation.alias('calcActualPromoVolumeByCompensation')\n              ,calcActualPromoDF.ActualPromoVolume.alias('calcActualPromoVolume')\n             )\\\n      .withColumn('ActualPromoLSVByCompensation', when(col('calcActualPromoLSVByCompensation').isNull(), col('ActualPromoLSVByCompensation'))\\\n                  .otherwise(col('calcActualPromoLSVByCompensation')))\\\n      .withColumn('ActualPromoLSVSI', when(col('calcActualPromoLSVSI').isNull(), col('ActualPromoLSVSI')).otherwise(col('calcActualPromoLSVSI')))\\\n      .withColumn('ActualPromoBaselineVolume', when(col('calcActualPromoBaselineVolume').isNull(), col('ActualPromoBaselineVolume')).otherwise(col('calcActualPromoBaselineVolume')))\\\n      .withColumn('ActualPromoPostPromoEffectVolume', when(col('calcActualPromoPostPromoEffectVolume').isNull(), col('ActualPromoPostPromoEffectVolume')).otherwise(col('calcActualPromoPostPromoEffectVolume')))\\\n      .withColumn('ActualPromoVolumeByCompensation', when(col('calcActualPromoVolumeByCompensation').isNull(), col('ActualPromoVolumeByCompensation')).otherwise(col('calcActualPromoVolumeByCompensation')))\\\n      .withColumn('ActualPromoVolume', when(col('calcActualPromoVolume').isNull(), col('ActualPromoVolume')).otherwise(col('calcActualPromoVolume')))\\\n      .drop('calcActualPromoLSVByCompensation','calcActualPromoLSVSI','calcActualPromoBaselineVolume','calcActualPromoPostPromoEffectVolume','calcActualPromoVolumeByCompensation','calcActualPromoVolume')\n\n    #####*Get result*\n\n    calcActualPromoProductDF = calcActualPromoProductDF.select(promoProductCols)\n    print('Actual product parameters calculation completed!')\n    \n    return calcActualPromoProductDF,allCalcActualPromoDF,logPricePromoDF\n",
      "user": "anonymous",
      "dateUpdated": "2023-08-25T17:12:09+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/python",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1692941652597_1350998806",
      "id": "20220815-090312_1851535734",
      "dateCreated": "2023-08-25T05:34:12+0000",
      "status": "READY",
      "$$hashKey": "object:3879"
    }
  ],
  "name": "JUPITER/PROMO_PARAMETERS_CALCULATION/ACTUAL_PRODUCT_PARAMS_CALCULATION_PROCESS",
  "id": "2J8CMHJ7E",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/JUPITER/PROMO_PARAMETERS_CALCULATION/ACTUAL_PRODUCT_PARAMS_CALCULATION_PROCESS"
}