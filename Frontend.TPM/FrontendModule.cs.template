using Core.History;
using Core.Notification;
using Core.Security;
using Core.Settings;
using Frontend.Core.Security;
using Frontend.Core.Security.AuthorizationManager;
using History.ElasticSearch;
using History.RavenDB;
using Ninject.Activation;
using Ninject.Modules;
using Persist;
using Persist.Utils;
using System;
using System.Web;
using Utility.Security;

namespace Frontend
{
    public class FrontendModule : NinjectModule
    {

        public override void Load()
        {
            Kernel.Bind<IAuthorizationManager>().ToMethod(SelectManager);
            //Kernel.Bind<ISecurityManager>().To<AdSecurityManager>();

            Kernel.Bind<ISettingsManager>().To<SettingsManager>();

            Kernel.Bind<IMailNotificationSettingsService>().To<DbMailNotificationSettingsService>();
            Kernel.Bind<IMailNotificationService>().To<NLogMailNotificationService>();

            Kernel.Bind<IHistoryWriter<Guid>>().To<RavenDbHistoryWriter<Guid>>();
            //Kernel.Bind<IHistoryWriter<Guid>>().To<ElasticHistoryWriter<Guid>>();
            Kernel.Bind<IHistoricalEntityFactory<Guid>>().To<HistoricalEntityFactory<Guid>>().InSingletonScope();
            Kernel.Bind<IHistoryReader>().To<RavenDbHistoryReader>();
            //Kernel.Bind<IHistoryReader>().To<ElasticHistoryReader>();
        }

        private static IAuthorizationManager SelectManager(IContext context)
        {
            if (HttpContext.Current == null)
            {
                return new SystemAuthorizationManager();
            }

            var authSource = AppSettingsManager.GetSetting<String>(Consts.AUTH_SOURCE, Consts.DB_AUTH_SOURCE);

            switch (authSource) 
            {
                case Consts.DB_AUTH_SOURCE:
                    return new DbAuthorizationManager();
                case Consts.AD_AUTH_SOURCE:
                    return new AdAuthorizationManager();
                case Consts.MIXED_AUTH_SOURCE:
                    return new AdAndDbAuthorizationManager();
                default:
                    return new DbAuthorizationManager();
            }
        }

    }
}